Index: Genre_Management/Genre.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Genre_Management;\r\n\r\nimport Database.DatabaseUtils;\r\nimport Driver.DatabaseOperations;\r\nimport Driver.Name;\r\n\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\n\r\npublic class Genre implements DatabaseOperations {\r\n    private int genreID;\r\n    private Name genreName;\r\n    private int post;\r\n    private int status;\r\n\r\n    public Genre(){\r\n        post = 0;\r\n    }\r\n\r\n    // Constructor for getting data from the database\r\n    public Genre(int genreID){\r\n        this.genreID = genreID;\r\n    }\r\n\r\n    public Genre(int genreID, Name genreName, int post, int status){\r\n        this.genreID = genreID;\r\n        this.genreName = genreName;\r\n        this.post = post;\r\n        this.status = status;\r\n    }\r\n\r\n    // Method\r\n    public static ArrayList<Genre> viewGenreList(int status) throws SQLException {\r\n        ArrayList<Genre> genres = new ArrayList<>();\r\n        ResultSet result = null;\r\n        int count = 1;\r\n\r\n        try {\r\n            Object[] params = {status};\r\n            result = DatabaseUtils.selectQueryById(\"*\", \"genre\", \"genre_status = ?\", params);\r\n        } catch (SQLException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n        while (result.next()) {\r\n            Genre genre = new Genre(result.getInt(\"genre_id\"), new Name(result.getString(\"genre_name\")), result.getInt(\"post\"), result.getInt(\"genre_status\"));\r\n            genres.add(genre);\r\n        }\r\n\r\n        System.out.printf(\"\\n%-5s %-15s\\n\", \"No\", \"Genre Name\");\r\n\r\n        for (Genre genre : genres) {\r\n            System.out.printf(\"%-5d %-15s\\n\", count, genre.getGenreName().getName());\r\n            count++;\r\n        }\r\n\r\n        return genres;\r\n    }\r\n\r\n    public void view() throws SQLException {\r\n        System.out.printf(\"\\nGenre Detail:\\n\");\r\n        System.out.println(\"Genre Name: \" + genreName.getName());\r\n        System.out.println(\"Number of post: \" + getPost());\r\n    }\r\n\r\n    public boolean add() throws SQLException {\r\n        int rowAffected = 0;\r\n\r\n        try {\r\n            String insertSql = \"INSERT INTO `genre`(`genre_name`, `post`) VALUES (?, ?)\";\r\n            Object[] params = {genreName.getName(), getPost()};\r\n            rowAffected = DatabaseUtils.insertQuery(insertSql, params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (rowAffected > 0) {\r\n            System.out.println(\"\\nGenre successfully added...\");\r\n            return true;\r\n        }\r\n        else {\r\n            System.out.println(\"\\nSomething went wrong!\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean modify() throws SQLException {\r\n        int rowAffected = 0;\r\n\r\n        try {\r\n            String updateSql = \"UPDATE `genre` SET `genre_name`= ? WHERE genre_id = ?\";\r\n            Object[] params = {genreName.getName(), genreID};\r\n            rowAffected = DatabaseUtils.updateQuery(updateSql, params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (rowAffected > 0) {\r\n            System.out.println(\"\\nThe changes have been saved.\");\r\n            return true;\r\n        } else {\r\n            System.out.println(\"\\nSomething went wrong...\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean delete() throws SQLException {\r\n        int rowAffected = 0;\r\n\r\n        try {\r\n            Object[] params = {genreID};\r\n            rowAffected = DatabaseUtils.deleteQueryById(\"genre\", \"genre_status\", \"genre_id\", params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (rowAffected > 0) {\r\n            System.out.println(\"\\nThis genre has been deleted.\");\r\n            return true;\r\n        } else {\r\n            System.out.println(\"\\nSomething went wrong...\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Setter\r\n    // No setter methods for genreID and post\r\n    public void setGenreName(Name genreName){\r\n        this.genreName = genreName;\r\n    }\r\n\r\n    // Getter\r\n    public int getGenreID(){\r\n        return genreID;\r\n    }\r\n\r\n    public Name getGenreName(){\r\n        return genreName;\r\n    }\r\n\r\n    public int getPost() throws SQLException {\r\n        Object[] params = {1, genreID};\r\n        ResultSet result = DatabaseUtils.selectQueryById(\"count(*) AS POST\", \"movie m, genre g\", \"m.genre_id = g.genre_id AND m.movie_status = ? AND g.genre_id = ?\", params);\r\n        while (result.next()) {\r\n            post = result.getInt(\"post\");\r\n        }\r\n        return post;\r\n    }\r\n\r\n    public int getStatus() {\r\n        return status;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Genre_Management/Genre.java b/Genre_Management/Genre.java
--- a/Genre_Management/Genre.java	(revision b88829f35ac4a26db87027d0772291d3eec62cca)
+++ b/Genre_Management/Genre.java	(date 1694854450125)
@@ -58,7 +58,7 @@
         return genres;
     }
 
-    public void view() throws SQLException {
+    public void viewGenreDetails() throws SQLException {
         System.out.printf("\nGenre Detail:\n");
         System.out.println("Genre Name: " + genreName.getName());
         System.out.println("Number of post: " + getPost());
Index: Driver/SystemClass.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Driver;\r\n\r\nimport Database.DatabaseUtils;\r\nimport Cinema_Management.Address;\r\nimport Cinema_Management.Cinema;\r\nimport Genre_Management.Genre;\r\nimport Hall_Management.Hall;\r\nimport Movie_Management.Movie;\r\nimport Movie_Management.MovieUtils;\r\nimport Movie_Management.MovieValidator;\r\nimport Schedule_Management.TimeTable;\r\nimport Booking_Management.Booking;\r\nimport Seat_Management.Seat;\r\n\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalTime;\r\nimport java.util.ArrayList;\r\nimport java.util.InputMismatchException;\r\nimport java.util.Scanner;\r\n\r\npublic class SystemClass {\r\n    private SystemClass(){\r\n    }\r\n\r\n    public static void run(Scanner sc) throws Exception {\r\n        int choice = 0;\r\n        boolean error = true, back = false;\r\n\r\n        do {\r\n            do {\r\n                try {\r\n                    System.out.println(\"\\nSelect the operation: \");\r\n                    System.out.println(\"1. View Profile\");\r\n                    System.out.println(\"2. View Movie\");\r\n                    System.out.println(\"3. Search Movie\");\r\n                    System.out.println(\"4. Log out\");\r\n                    System.out.print(\"\\nEnter your selection: \");\r\n\r\n                    choice = sc.nextInt();\r\n                    sc.nextLine();\r\n\r\n                    if (choice > 0 && choice <= 4) {\r\n                        error = false;\r\n                    } else {\r\n                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                    }\r\n                } catch (InputMismatchException e) {\r\n                    System.out.println(\"Please enter a valid choice!\");\r\n                    sc.nextLine();\r\n                }\r\n            } while (error);\r\n\r\n            switch (choice) {\r\n                case 1:\r\n                    break;\r\n                case 2:\r\n                    do {\r\n                        int periodSelected = 0;\r\n                        error = true;\r\n                        ArrayList<Movie> moviesAfterFiltered = new ArrayList<>();\r\n                        int movieSelected = 0;\r\n                        LocalDate currentDate = LocalDate.now();\r\n\r\n                        do {\r\n                            try {\r\n                                System.out.println(\"\\nSelect the time period: \");\r\n                                System.out.println(\"1. Opening This Week\");\r\n                                System.out.println(\"2. Opening This Month\");\r\n                                System.out.println(\"3. Release Within 3 Months\");\r\n                                System.out.println(\"4. Coming Soon\");\r\n                                System.out.print(\"\\nEnter your selection (0 - Back): \");\r\n\r\n                                periodSelected = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (periodSelected >= 0 && periodSelected <= 4) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid choice!\");\r\n                                sc.nextLine();\r\n                            }\r\n                        } while (error);\r\n\r\n                        switch (periodSelected) {\r\n                            case 0:\r\n                                back = false;\r\n                                break;\r\n                            case 1:\r\n                                LocalDate oneWeekAgo = currentDate.minusWeeks(1);\r\n\r\n                                System.out.println(\"\\nOpening This Week\");\r\n                                moviesAfterFiltered = Movie.showMovieListAfterFiltered(oneWeekAgo, currentDate, 1);\r\n                                break;\r\n                            case 2:\r\n                                LocalDate oneMonthAgo = currentDate.minusMonths(1);\r\n\r\n                                System.out.println(\"\\nOpening This Month\");\r\n                                moviesAfterFiltered = Movie.showMovieListAfterFiltered(oneMonthAgo, currentDate, 1);\r\n                                break;\r\n                            case 3:\r\n                                LocalDate threeMonthAgo = currentDate.minusMonths(3);\r\n\r\n                                System.out.println(\"\\nRelease within 3 months\");\r\n                                moviesAfterFiltered = Movie.showMovieListAfterFiltered(threeMonthAgo, currentDate, 1);\r\n                                break;\r\n                            case 4:\r\n                                LocalDate comingSoon = currentDate.plusDays(1);\r\n\r\n                                System.out.println(\"\\nComing Soon\");\r\n                                moviesAfterFiltered = Movie.showMovieListAfterFiltered(comingSoon, null, 1);\r\n                                break;\r\n                        }\r\n\r\n                        if (periodSelected != 0) {\r\n                            do {\r\n                                try {\r\n                                    System.out.print(\"\\nEnter the movie no (0 - Back): \");\r\n                                    movieSelected = sc.nextInt();\r\n                                    sc.nextLine();\r\n\r\n                                    if (movieSelected >= 0 && movieSelected <= moviesAfterFiltered.size()) {\r\n                                        error = false;\r\n                                    } else {\r\n                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                        error = true;\r\n                                    }\r\n                                } catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid choice!\");\r\n                                    sc.nextLine();\r\n                                    error = true;\r\n                                }\r\n                            } while (error);\r\n\r\n                            if (movieSelected != 0) {\r\n                                Movie movie = moviesAfterFiltered.get(movieSelected - 1);\r\n                                movie.viewMovieDetails();\r\n\r\n                                if (periodSelected != 4) {  // Coming Soon movie cannot be booked\r\n                                    String bookNow;\r\n\r\n                                    do {\r\n                                        System.out.println(\"\\nDo you want to book now? (Y / N)\");\r\n                                        System.out.print(\"Answer: \");\r\n                                        String answer = sc.next();\r\n                                        sc.nextLine();\r\n\r\n                                        bookNow = SystemClass.askForContinue(answer);\r\n                                    } while (bookNow.equals(\"Invalid\"));\r\n\r\n                                    if (bookNow.equals(\"Y\")) {\r\n                                        TimeTable timeTable = new TimeTable();\r\n                                        timeTable.setMovie(movie);\r\n\r\n                                        // 1. Select the cinema\r\n                                        int cinemaNo = 0;\r\n                                        error = true;\r\n                                        ArrayList<Cinema> cinemas = new ArrayList<>();\r\n                                        do {\r\n                                            try {\r\n                                                System.out.print(\"\\nSelect the cinema you want to view the schedule: \");\r\n                                                cinemas = Cinema.viewCinemaList(1);\r\n                                                System.out.print(\"\\nEnter the cinema no: \");\r\n                                                cinemaNo = sc.nextInt();\r\n                                                sc.nextLine();\r\n\r\n                                                if (cinemaNo > 0 && cinemaNo <= cinemas.size()) {\r\n                                                    error = false;\r\n                                                } else {\r\n                                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                                }\r\n                                            } catch (InputMismatchException e) {\r\n                                                System.out.println(\"Please enter a valid cinema no!\");\r\n                                                sc.nextLine();\r\n                                            }\r\n                                        } while (error);\r\n\r\n                                        // 2. Select the show date\r\n                                        int dateNo = 0;\r\n                                        error = true;\r\n                                        ArrayList<LocalDate> dateList;\r\n                                        do {\r\n                                            try {\r\n                                                System.out.println(\"\\nSelect the date you want to view the schedule: \");\r\n                                                dateList = TimeTable.generateOneWeekDateList();\r\n                                                System.out.print(\"\\nEnter the date no: \");\r\n                                                dateNo = sc.nextInt();\r\n                                                sc.nextLine();\r\n\r\n                                                if (dateNo > 0 && dateNo <= dateList.size()) {\r\n                                                    DateTime date = new DateTime(dateList.get(dateNo - 1));\r\n                                                    timeTable.setShowDate(date);\r\n                                                    error = false;\r\n                                                } else {\r\n                                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                                }\r\n                                            } catch (InputMismatchException e) {\r\n                                                System.out.println(\"Please enter a valid date no!\");\r\n                                                sc.nextLine();\r\n                                            }\r\n                                        } while (error);\r\n\r\n                                        // 3. Select the time\r\n                                        error = true;\r\n                                        int scheduleSelected = 0;\r\n                                        do {\r\n                                            ArrayList<Hall> halls = cinemas.get(cinemaNo - 1).getHallList(1);\r\n                                            ArrayList<TimeTable> timeTables = new ArrayList<>();\r\n\r\n                                            int count = 1;\r\n                                            System.out.printf(\"\\n%-30s %15s %15s\\n\", \"Hall Name\", \"Start Time\", \"End Time\");\r\n                                            for (int i = 0; i < halls.size(); i++) {\r\n                                                timeTable.setHall(halls.get(i));\r\n                                                count = timeTable.showHallAndTime(count, timeTables);\r\n                                            }\r\n\r\n                                            try {\r\n                                                System.out.print(\"\\nEnter the schedule no: \");\r\n                                                scheduleSelected = sc.nextInt();\r\n                                                sc.nextLine();\r\n\r\n                                                if (scheduleSelected > 0 && scheduleSelected <= timeTables.size()) {\r\n                                                    timeTable.setTimetableID(timeTables.get(scheduleSelected - 1).getTimetableID());\r\n                                                    timeTable.setHall(timeTables.get(scheduleSelected - 1).getHall());\r\n                                                    timeTable.setStartTime(timeTables.get(scheduleSelected - 1).getStartTime());\r\n                                                    timeTable.setEndTime(timeTables.get(scheduleSelected - 1).getEndTime());\r\n                                                    error = false;\r\n                                                } else {\r\n                                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                                }\r\n                                            } catch (InputMismatchException e) {\r\n                                                System.out.println(\"Please enter a valid schedule no!\");\r\n                                                sc.nextLine();\r\n                                            }\r\n                                        } while (error);\r\n\r\n                                        // 4. Select the seat chin yong part\r\n                                        Booking booking = new Booking();\r\n                                        booking.executeBooking(timeTable);\r\n\r\n                                    } else {\r\n                                        back = false;\r\n                                    }\r\n                                } else {\r\n                                    back = false;\r\n                                }\r\n                            } else {\r\n                                back = false;\r\n                            }\r\n                        } else {\r\n                            break;\r\n                        }\r\n                    } while (back == false);\r\n                    break;\r\n                case 3:\r\n                    error = true;\r\n                    int searchingMethod = 0;\r\n                    do {\r\n                        try {\r\n                            System.out.println(\"\\nSelect the searching method:\");\r\n                            System.out.println(\"1. Search by movie name\");\r\n                            System.out.println(\"2. Search by genre\");\r\n                            System.out.print(\"\\nEnter your selection (0 - Back): \");\r\n                            searchingMethod = sc.nextInt();\r\n                            sc.nextLine();\r\n\r\n                            if (searchingMethod >= 0 && searchingMethod <= 2) {\r\n                                error = false;\r\n                            }\r\n                            else {\r\n                                System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                            }\r\n                        }\r\n                        catch (InputMismatchException e) {\r\n                            System.out.println(\"Please enter a valid choice!\");\r\n                            sc.nextLine();\r\n                        }\r\n                    } while (error);\r\n\r\n                    switch (searchingMethod) {\r\n                        case 0:\r\n                            back = false;\r\n                            break;\r\n                        case 1:\r\n                            // Search by movie name\r\n                            error = true;\r\n                            String searchedMvName;\r\n\r\n                            do {\r\n                                System.out.print(\"\\nEnter the movie name you want to search for: \");\r\n                                searchedMvName = sc.nextLine();\r\n\r\n                                if (searchedMvName.trim().isEmpty()) {\r\n                                    System.out.println(\"Please enter the movie name!\");\r\n                                }\r\n                                else {\r\n                                    error = false;\r\n                                }\r\n                            } while (error);\r\n\r\n                            ArrayList<Movie> searchResults = MovieUtils.queryMovieByName(searchedMvName);\r\n\r\n                            System.out.println(\"\\nSearch Results: \");\r\n                            for (int i = 0; i < searchResults.size(); i++) {\r\n                                System.out.println((i + 1) + \". \" + searchResults.get(i).getMvName().getName());\r\n                            }\r\n                            break;\r\n                        case 2:\r\n                            // Search by genre\r\n                            int genreSelected = 0;\r\n                            ArrayList<Genre> genres = Genre.viewGenreList(1);\r\n\r\n                            do {\r\n                                try {\r\n                                    System.out.print(\"\\nEnter the genre no (0 - Back): \");\r\n                                    genreSelected = sc.nextInt();\r\n                                    sc.nextLine();\r\n\r\n                                    if (genreSelected >= 0 && genreSelected <= genres.size()) {\r\n                                        error = false;\r\n                                    }\r\n                                    else {\r\n                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                        error = true;\r\n                                    }\r\n                                }\r\n                                catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid choice!\");\r\n                                    sc.nextLine();\r\n                                    error = true;\r\n                                }\r\n                            } while (error);\r\n\r\n                            if (genreSelected != 0) {\r\n                                ArrayList<Movie> movies = new ArrayList<>();\r\n\r\n                                Genre viewGenre = genres.get(genreSelected - 1);\r\n                                movies = MovieUtils.queryMovieByGenre(viewGenre);\r\n\r\n                                System.out.println(\"\\nMovie List:\");\r\n                                for (int i = 0; i < movies.size(); i++) {\r\n                                    System.out.println((i + 1) + \". \" + movies.get(i).getMvName().getName());\r\n                                }\r\n                            }\r\n                            break;\r\n                    }\r\n                    break;\r\n                case 4:\r\n                    back = true;\r\n                    break;\r\n            }\r\n        } while (back == false);\r\n\r\n        // Admin\r\n        back = false;\r\n        error = true;\r\n\r\n        do {\r\n            do {\r\n                try {\r\n                    System.out.println(\"\\nSelect the operation:\");\r\n                    System.out.println(\"1. Manage Cinema\");\r\n                    System.out.println(\"2. Manage Hall\");\r\n                    System.out.println(\"3. Manage Movie\");\r\n                    System.out.println(\"4. Manage Genre\");\r\n                    System.out.println(\"5. Manage Schedule\");\r\n                    System.out.println(\"6. Log out\");\r\n                    System.out.print(\"\\nEnter your selection: \");\r\n\r\n                    choice = sc.nextInt();\r\n                    sc.nextLine();\r\n\r\n                    error = false;\r\n                } catch (InputMismatchException e) {\r\n                    System.out.println(\"Please enter a valid choice!\");\r\n                    sc.nextLine();\r\n                }\r\n            } while (error);\r\n\r\n            switch (choice) {\r\n                case 1:\r\n                    manageCinema(sc);\r\n                    break;\r\n                case 2:\r\n                    manageHall(sc);\r\n                    break;\r\n                case 3:\r\n                    manageMovie(sc);\r\n                    break;\r\n                case 4:\r\n                    manageGenre(sc);\r\n                    break;\r\n                case 5:\r\n                    manageSchedule(sc);\r\n                    break;\r\n                case 6:\r\n                    back = true;\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n            }\r\n        } while (back == false);\r\n    }\r\n\r\n    private static void manageCinema(Scanner sc) throws Exception {\r\n        boolean back = false;\r\n\r\n        do {\r\n            int choice = displayMenu(\"Cinema\", sc);\r\n            boolean error = true;\r\n            boolean continues = true;\r\n\r\n            switch (choice) {\r\n                case 0:\r\n                    back = true;\r\n                    break;\r\n                case 1:\r\n                    // View Cinema\r\n                    do {\r\n                        int cinemaNo = 0;\r\n                        error = true;\r\n                        ArrayList<Cinema> cinemas = new ArrayList<>();\r\n                        do {\r\n                            try {\r\n                                System.out.println(\"\\nSelect the cinema: \");\r\n                                cinemas = Cinema.viewCinemaList(1);\r\n                                System.out.print(\"\\nEnter the cinema no (0 - Back): \");\r\n                                cinemaNo = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (cinemaNo >= 0 && cinemaNo <= cinemas.size()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid hall no!\");\r\n                                sc.nextLine();\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (cinemaNo != 0) {\r\n                            cinemas.get(cinemaNo - 1).viewCinemaDetails();\r\n\r\n                            String continueViewCinema;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want view another cinema? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                continueViewCinema = SystemClass.askForContinue(answer);\r\n                            } while (continueViewCinema.equals(\"Invalid\"));\r\n\r\n                            if (continueViewCinema.equals(\"Y\")) {\r\n                                continues = true;\r\n                            } else {\r\n                                continues = false;\r\n                                back = false;\r\n                            }\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 2:\r\n                    // Add Cinema\r\n                    do {\r\n                        Cinema newCinema = new Cinema();\r\n                        // Cinema Name\r\n                        Name name = null;\r\n                        do {\r\n                            System.out.print(\"\\nEnter cinema name (0 - Back): \");\r\n                            String cinemaName = sc.nextLine();\r\n\r\n                            name = new Name(cinemaName);\r\n                            name.capitalizeWords();\r\n\r\n                            ResultSet result = null;\r\n                            try {\r\n                                result = DatabaseUtils.selectQueryById(\"cinema_name\", \"cinema\", null, null);\r\n                            } catch (SQLException e) {\r\n                                throw new RuntimeException(e);\r\n                            }\r\n\r\n                            String errorMessage = name.checkName(\"cinema\", result, \"cinema_name\");\r\n\r\n                            if (errorMessage == null) {\r\n                                newCinema.setCinemaName(name);\r\n                                error = false;\r\n                            } else {\r\n                                System.out.println(errorMessage);\r\n                                error = true;\r\n                            }\r\n                        } while (error);\r\n\r\n                        boolean duplicatedAddress = false;\r\n                        do {\r\n                            // Cinema Address\r\n                            int stateSelected = 0;\r\n                            do {\r\n                                try {\r\n                                    System.out.println(\"\\nSelect the state: \");\r\n                                    Address.viewStateList();\r\n                                    System.out.print(\"\\nEnter your selection: \");\r\n                                    stateSelected = sc.nextInt();\r\n                                    sc.nextLine();\r\n\r\n                                    if (stateSelected > 0 && stateSelected <= Address.getStateToCities().size()) {\r\n                                        error = false;\r\n                                    } else {\r\n                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                        error = true;\r\n                                    }\r\n                                } catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid state no!\");\r\n                                    sc.nextLine();\r\n                                }\r\n                            } while (error);\r\n\r\n                            String stateName = Address.getStateName(stateSelected - 1);\r\n\r\n                            int citySelected = 0;\r\n                            do {\r\n                                try {\r\n                                    System.out.println(\"\\nSelect the city: \");\r\n                                    int count = Address.viewCityList(stateSelected - 1);\r\n                                    System.out.print(\"\\nEnter your selection: \");\r\n                                    citySelected = sc.nextInt();\r\n                                    sc.nextLine();\r\n\r\n                                    if (citySelected > 0 && citySelected <= count) {\r\n                                        error = false;\r\n                                    } else {\r\n                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                        error = true;\r\n                                    }\r\n                                } catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid city no!\");\r\n                                    sc.nextLine();\r\n                                }\r\n                            } while (error);\r\n\r\n                            String cityName = Address.getCityName(stateName, citySelected - 1);\r\n\r\n                            int postcodeSelected = 0;\r\n                            do {\r\n                                try {\r\n                                    System.out.println(\"\\nSelect the city: \");\r\n                                    int count = Address.viewPostcodeList(cityName);\r\n                                    System.out.print(\"\\nEnter your selection: \");\r\n                                    postcodeSelected = sc.nextInt();\r\n                                    sc.nextLine();\r\n\r\n                                    if (postcodeSelected > 0 && postcodeSelected <= count) {\r\n                                        error = false;\r\n                                    } else {\r\n                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                        error = true;\r\n                                    }\r\n                                } catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid postcode no!\");\r\n                                    sc.nextLine();\r\n                                }\r\n                            } while (error);\r\n\r\n                            String postcode = Address.getPostcodeSelected(cityName, postcodeSelected - 1);\r\n\r\n                            String streetName;\r\n                            do {\r\n                                System.out.print(\"\\nEnter the street name: \");\r\n                                streetName = sc.nextLine();\r\n\r\n                                if (streetName.trim().isEmpty()) {\r\n                                    System.out.println(\"Please enter the street name.\");\r\n                                    error = true;\r\n                                } else {\r\n                                    streetName = streetName.toUpperCase();\r\n                                    error = false;\r\n                                }\r\n                            } while (error);\r\n\r\n                            Address cinemaAddress = new Address(streetName.trim(), postcode, cityName, stateName);\r\n                            newCinema.setCinemaAddress(cinemaAddress);\r\n\r\n                            ResultSet result = null;\r\n                            try {\r\n                                result = DatabaseUtils.selectQueryById(\"cinema_address\", \"cinema\", null, null);\r\n                            } catch (SQLException e) {\r\n                                throw new RuntimeException(e);\r\n                            }\r\n\r\n                            duplicatedAddress = cinemaAddress.checkAddressDuplicate(result, \"cinema_address\");\r\n\r\n                            if (duplicatedAddress == true) {\r\n                                System.out.println(\"Same cinema address detected.\");\r\n                            }\r\n                        } while (duplicatedAddress);\r\n\r\n                        // Cinema Phone\r\n                        do {\r\n                            System.out.print(\"\\nEnter the cinema phone number: \");\r\n                            String phoneNumber = sc.nextLine();\r\n\r\n                            if (phoneNumber.trim().isEmpty()) {\r\n                                System.out.println(\"Please enter the phone number.\");\r\n                                error = true;\r\n                            } else {\r\n                                newCinema.setCinemaPhone(phoneNumber.trim());\r\n\r\n                                if (newCinema.isValidOfficePhoneNumber()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"The phone number is invalid.\");\r\n                                    error = true;\r\n                                }\r\n                            }\r\n                        } while (error);\r\n\r\n                        // Add Cinema\r\n                        String confirmation;\r\n                        do {\r\n                            System.out.println(\"\\nDo you want add the new cinema? (Y / N)\");\r\n                            System.out.print(\"Answer: \");\r\n                            String answer = sc.next();\r\n                            sc.nextLine();\r\n\r\n                            confirmation = SystemClass.askForContinue(answer);\r\n                        } while (confirmation.equals(\"Invalid\"));\r\n\r\n                        // Confirm that the cinema is successfully added\r\n                        boolean success = false;\r\n                        do {\r\n                            if (confirmation.equals(\"Y\")) {\r\n                                success = newCinema.add();\r\n                            } else {\r\n                                success = true;\r\n                                System.out.println(\"This cinema will not be added.\");\r\n                            }\r\n\r\n                            if (success == false) {\r\n                                do {\r\n                                    System.out.println(\"\\nDo you want to retry to add the new cinema? (Y / N)\");\r\n                                    System.out.print(\"Answer: \");\r\n                                    String answer = sc.next();\r\n                                    sc.nextLine();\r\n\r\n                                    confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                    if (confirmation.equals(\"Y\")) {\r\n                                        continues = true;\r\n                                    } else {\r\n                                        continues = false;\r\n                                    }\r\n                                } while (confirmation.equals(\"Invalid\"));\r\n                            }\r\n                            else {\r\n                                continues = false;\r\n                            }\r\n                        } while (continues);\r\n\r\n                        String continueAddCinema;\r\n                        do {\r\n                            System.out.println(\"\\nDo you want add another new cinema? (Y / N)\");\r\n                            System.out.print(\"Answer: \");\r\n                            String answer = sc.next();\r\n                            sc.nextLine();\r\n\r\n                            continueAddCinema = SystemClass.askForContinue(answer);\r\n                        } while (continueAddCinema.equals(\"Invalid\"));\r\n\r\n                        if (continueAddCinema.equals(\"Y\")) {\r\n                            continues = true;\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 3:\r\n                    // Modify Cinema\r\n                    do {\r\n                        error = true;\r\n                        ArrayList<Cinema> cinemasModified = new ArrayList<>();\r\n                        int cinemaModified = 0;\r\n\r\n                        do {\r\n                            try {\r\n                                System.out.println(\"\\nSelect the cinema you want to modify: \");\r\n                                cinemasModified = Cinema.viewCinemaList(1);\r\n                                System.out.print(\"\\nEnter the cinema no (0 - Back): \");\r\n                                cinemaModified = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (cinemaModified >= 0 && cinemaModified <= cinemasModified.size()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    error = true;\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid cinema no!\");\r\n                                sc.nextLine();\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (cinemaModified != 0) {\r\n                            Cinema orgCinema = cinemasModified.get(cinemaModified - 1);\r\n                            Cinema cinema = new Cinema(orgCinema.getCinemaID(), orgCinema.getCinemaName(), orgCinema.getCinemaAddress(), orgCinema.getCinemaPhone());\r\n                            boolean stop = false;\r\n\r\n                            do {\r\n                                int serialNum = cinema.modifyCinemaDetails(sc);\r\n                                switch (serialNum) {\r\n                                    case 0:\r\n                                        String confirmation;\r\n                                        do {\r\n                                            System.out.println(\"\\nDo you want to save the changes? (Y / N)\");\r\n                                            System.out.print(\"Answer: \");\r\n                                            String answer = sc.next();\r\n                                            sc.nextLine();\r\n\r\n                                            confirmation = SystemClass.askForContinue(answer);\r\n                                        } while (confirmation.equals(\"Invalid\"));\r\n\r\n                                        stop = true;\r\n\r\n                                        // Confirm that the cinema is successfully modified\r\n                                        boolean success = false;\r\n                                        do {\r\n                                            if (confirmation.equals(\"Y\")) {\r\n                                                success = cinema.modify();\r\n                                            } else {\r\n                                                success = true;\r\n                                                cinema = orgCinema;\r\n                                                System.out.println(\"\\nThe changes have not been saved.\");\r\n                                            }\r\n\r\n                                            if (success == false) {\r\n                                                do {\r\n                                                    System.out.println(\"\\nDo you want to retry to modify the cinema? (Y / N)\");\r\n                                                    System.out.print(\"Answer: \");\r\n                                                    String answer = sc.next();\r\n                                                    sc.nextLine();\r\n\r\n                                                    confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                                    if (confirmation.equals(\"Y\")) {\r\n                                                        continues = true;\r\n                                                    } else {\r\n                                                        continues = false;\r\n                                                    }\r\n                                                } while (confirmation.equals(\"Invalid\"));\r\n                                            }\r\n                                            else {\r\n                                                continues = false;\r\n                                            }\r\n                                        } while (continues);\r\n\r\n                                        String continueModifyCinema;\r\n                                        do {\r\n                                            System.out.println(\"\\nDo you want modify another cinema? (Y / N)\");\r\n                                            System.out.print(\"Answer: \");\r\n                                            String answer = sc.next();\r\n                                            sc.nextLine();\r\n\r\n                                            continueModifyCinema = SystemClass.askForContinue(answer);\r\n                                        } while (continueModifyCinema.equals(\"Invalid\"));\r\n\r\n                                        if (continueModifyCinema.equals(\"Y\")) {\r\n                                            continues = true;\r\n                                        } else {\r\n                                            continues = false;\r\n                                            back = false;\r\n                                        }\r\n                                        break;\r\n                                    case 1:\r\n                                        // Cinema Name\r\n                                        Name name = null;\r\n                                        do {\r\n                                            System.out.print(\"\\nEnter the new cinema name: \");\r\n                                            String newCinemaName = sc.nextLine();\r\n\r\n                                            name = new Name(newCinemaName);\r\n                                            name.capitalizeWords();\r\n\r\n                                            ResultSet result = null;\r\n                                            try {\r\n                                                result = DatabaseUtils.selectQueryById(\"cinema_name\", \"cinema\", null, null);\r\n                                            } catch (SQLException e) {\r\n                                                throw new RuntimeException(e);\r\n                                            }\r\n\r\n                                            String errorMessage = name.checkEditName(\"cinema\", result, \"cinema_name\", cinema.getCinemaName().getName());\r\n\r\n                                            if (errorMessage == null) {\r\n                                                cinema.setCinemaName(name);\r\n                                                error = false;\r\n                                            } else {\r\n                                                System.out.println(errorMessage);\r\n                                                error = true;\r\n                                            }\r\n                                        } while (error);\r\n                                        break;\r\n                                    case 2:\r\n                                        // Cinema Address\r\n                                        boolean duplicatedAddress;\r\n                                        do {\r\n                                            int stateSelected = 0;\r\n                                            do {\r\n                                                try {\r\n                                                    System.out.println(\"\\nSelect the state: \");\r\n                                                    Address.viewStateList();\r\n                                                    System.out.print(\"\\nEnter your selection: \");\r\n                                                    stateSelected = sc.nextInt();\r\n                                                    sc.nextLine();\r\n\r\n                                                    if (stateSelected > 0 && stateSelected <= Address.getStateToCities().size()) {\r\n                                                        error = false;\r\n                                                    } else {\r\n                                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                                        error = true;\r\n                                                    }\r\n                                                } catch (InputMismatchException e) {\r\n                                                    System.out.println(\"Please enter a valid state no!\");\r\n                                                    sc.nextLine();\r\n                                                }\r\n                                            } while (error);\r\n\r\n                                            String stateName = Address.getStateName(stateSelected - 1);\r\n\r\n                                            int citySelected = 0;\r\n                                            do {\r\n                                                try {\r\n                                                    System.out.println(\"\\nSelect the city: \");\r\n                                                    int count = Address.viewCityList(stateSelected - 1);\r\n                                                    System.out.print(\"\\nEnter your selection: \");\r\n                                                    citySelected = sc.nextInt();\r\n                                                    sc.nextLine();\r\n\r\n                                                    if (citySelected > 0 && citySelected <= count) {\r\n                                                        error = false;\r\n                                                    } else {\r\n                                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                                        error = true;\r\n                                                    }\r\n                                                } catch (InputMismatchException e) {\r\n                                                    System.out.println(\"Please enter a valid city no!\");\r\n                                                    sc.nextLine();\r\n                                                }\r\n                                            } while (error);\r\n\r\n                                            String cityName = Address.getCityName(stateName, citySelected - 1);\r\n\r\n                                            int postcodeSelected = 0;\r\n                                            do {\r\n                                                try {\r\n                                                    System.out.println(\"\\nSelect the city: \");\r\n                                                    int count = Address.viewPostcodeList(cityName);\r\n                                                    System.out.print(\"\\nEnter your selection: \");\r\n                                                    postcodeSelected = sc.nextInt();\r\n                                                    sc.nextLine();\r\n\r\n                                                    if (postcodeSelected > 0 && postcodeSelected <= count) {\r\n                                                        error = false;\r\n                                                    } else {\r\n                                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                                        error = true;\r\n                                                    }\r\n                                                } catch (InputMismatchException e) {\r\n                                                    System.out.println(\"Please enter a valid postcode no!\");\r\n                                                    sc.nextLine();\r\n                                                }\r\n                                            } while (error);\r\n\r\n                                            String postcode = Address.getPostcodeSelected(cityName, postcodeSelected - 1);\r\n\r\n                                            String streetName;\r\n                                            do {\r\n                                                System.out.print(\"\\nEnter the street name: \");\r\n                                                streetName = sc.nextLine();\r\n\r\n                                                if (streetName.trim().isEmpty()) {\r\n                                                    System.out.println(\"Please enter the street name.\");\r\n                                                    error = true;\r\n                                                } else {\r\n                                                    streetName = streetName.toUpperCase();\r\n                                                    error = false;\r\n                                                }\r\n                                            } while (error);\r\n\r\n                                            Address cinemaAddress = new Address(streetName.trim(), postcode, cityName, stateName);\r\n                                            cinema.setCinemaAddress(cinemaAddress);\r\n\r\n                                            ResultSet result = null;\r\n                                            try {\r\n                                                result = DatabaseUtils.selectQueryById(\"cinema_address\", \"cinema\", null, null);\r\n                                            } catch (SQLException e) {\r\n                                                throw new RuntimeException(e);\r\n                                            }\r\n\r\n                                            duplicatedAddress = cinemaAddress.checkEditAddressDuplicate(result, \"cinema_address\", orgCinema.getCinemaAddress().getAddress());\r\n\r\n                                            if (duplicatedAddress == true) {\r\n                                                System.out.println(\"Same cinema address detected.\");\r\n                                            }\r\n                                        } while (duplicatedAddress);\r\n                                        break;\r\n                                    case 3:\r\n                                        // Cinema phone\r\n                                        do {\r\n                                            System.out.print(\"\\nEnter the new cinema phone number: \");\r\n                                            String phoneNumber = sc.nextLine();\r\n\r\n                                            if (phoneNumber.trim().isEmpty()) {\r\n                                                System.out.println(\"Please enter the phone number.\");\r\n                                                error = true;\r\n                                            } else {\r\n                                                cinema.setCinemaPhone(phoneNumber.trim());\r\n\r\n                                                if (cinema.isValidOfficePhoneNumber()) {\r\n                                                    error = false;\r\n                                                } else {\r\n                                                    System.out.println(\"The phone number is invalid.\");\r\n                                                    error = true;\r\n                                                }\r\n                                            }\r\n                                        } while (error);\r\n                                        break;\r\n                                }\r\n                            } while (stop == false);\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 4:\r\n                    // Delete Cinema\r\n                    do {\r\n                        error = true;\r\n                        int cinemaDeleted = 0;\r\n                        ArrayList<Cinema> cinemasDeleted = new ArrayList<>();\r\n                        do {\r\n                            try {\r\n                                System.out.println(\"\\nSelect the cinema you want to delete: \");\r\n                                cinemasDeleted = Cinema.viewCinemaList(1);\r\n                                System.out.print(\"\\nEnter the cinema no (0 - Back): \");\r\n                                cinemaDeleted = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (cinemaDeleted >= 0 && cinemaDeleted <= cinemasDeleted.size()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                    error = true;\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid choice!\");\r\n                                sc.nextLine();\r\n                                error = true;\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (cinemaDeleted != 0) {\r\n                            Cinema cinema = cinemasDeleted.get(cinemaDeleted - 1);\r\n\r\n                            String confirmation;\r\n                            do {\r\n                                System.out.println(\"\\nAre you sure you want to delete this cinema? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                confirmation = SystemClass.askForContinue(answer);\r\n                            } while (confirmation.equals(\"Invalid\"));\r\n\r\n                            // Confirm that the cinema is successfully deleted\r\n                            boolean success = false;\r\n                            do {\r\n                                if (confirmation.equals(\"Y\")) {\r\n                                    success = cinema.delete();\r\n                                } else {\r\n                                    success = true;\r\n                                    System.out.println(\"\\nThe cinema is safe :)\");\r\n                                }\r\n\r\n                                if (success == false) {\r\n                                    do {\r\n                                        System.out.println(\"\\nDo you want to retry to delete this cinema? (Y / N)\");\r\n                                        System.out.print(\"Answer: \");\r\n                                        String answer = sc.next();\r\n                                        sc.nextLine();\r\n\r\n                                        confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                        if (confirmation.equals(\"Y\")) {\r\n                                            continues = true;\r\n                                        } else {\r\n                                            continues = false;\r\n                                        }\r\n                                    } while (confirmation.equals(\"Invalid\"));\r\n                                }\r\n                                else {\r\n                                    continues = false;\r\n                                }\r\n                            } while (continues);\r\n\r\n                            String continueDeleteCinema;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want to continue to delete another cinema? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer2 = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                continueDeleteCinema = SystemClass.askForContinue(answer2);\r\n                            } while (continueDeleteCinema.equals(\"Invalid\"));\r\n\r\n                            if (continueDeleteCinema.equals(\"Y\")) {\r\n                                continues = true;\r\n                            } else {\r\n                                continues = false;\r\n                                back = false;\r\n                            }\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n            }\r\n        } while (back == false);\r\n    }\r\n\r\n    private static void manageHall(Scanner sc) throws Exception {\r\n        boolean back = false;\r\n        boolean error = true;\r\n        boolean continues = true;\r\n\r\n        ArrayList<Cinema> cinemas = Cinema.viewCinemaList(1);\r\n        int cinemaSelected = 0;\r\n\r\n        do {\r\n            try {\r\n                System.out.println(\"\\nSelect the cinema you want to manage it's hall: \");\r\n                for (int i = 0; i < cinemas.size(); i++) {\r\n                    System.out.println((i + 1) + \". \" + cinemas.get(i).getCinemaName().getName());\r\n                }\r\n                System.out.print(\"\\nEnter your selection: \");\r\n                cinemaSelected = sc.nextInt();\r\n                sc.nextLine();\r\n\r\n                if (cinemaSelected > 0 && cinemaSelected <= cinemas.size()) {\r\n                    error = false;\r\n                }\r\n                else {\r\n                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Please enter a valid cinema no!\");\r\n                sc.nextLine();\r\n            }\r\n        } while (error);\r\n\r\n        Cinema cinema = cinemas.get(cinemaSelected - 1);\r\n\r\n        do {\r\n            int choice = displayMenu(\"Hall\", sc);\r\n            error = true;\r\n\r\n            switch (choice) {\r\n                case 0:\r\n                    back = true;\r\n                    break;\r\n                case 1:\r\n                    // Hall\r\n                    do {\r\n                        int hallNo = 0;\r\n                        error = true;\r\n                        ArrayList<Hall> halls = new ArrayList<>();\r\n                        do {\r\n                            try {\r\n                                System.out.println(\"\\nSelect the hall: \");\r\n                                halls = cinema.getHallList(1);\r\n\r\n                                for (int i = 0; i < halls.size(); i++) {\r\n                                    System.out.println((i + 1) + \". \" + halls.get(i).getHallName().getName());\r\n                                }\r\n\r\n                                System.out.print(\"\\nEnter the hall no (0 - Back): \");\r\n                                hallNo = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (hallNo >= 0 && hallNo <= halls.size()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid hall no!\");\r\n                                sc.nextLine();\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (hallNo != 0) {\r\n                            halls.get(hallNo - 1).viewHallDetails();\r\n\r\n                            String continueViewHall;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want view another cinema? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                continueViewHall = SystemClass.askForContinue(answer);\r\n                            } while (continueViewHall.equals(\"Invalid\"));\r\n\r\n                            if (continueViewHall.equals(\"Y\")) {\r\n                                continues = true;\r\n                            } else {\r\n                                continues = false;\r\n                                back = false;\r\n                            }\r\n                        }\r\n                        else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 2:\r\n                    do {\r\n                        Name name = null;\r\n                        String hallName;\r\n\r\n                        do {\r\n                            System.out.print(\"\\nEnter the hall name (0 - Back): \");\r\n                            hallName = sc.nextLine();\r\n\r\n                            if (!hallName.equals(\"0\")) {\r\n                                back = false;\r\n                                name = new Name(hallName);\r\n                                name.capitalizeWords();\r\n\r\n                                ResultSet result = null;\r\n                                try {\r\n                                    Object[] params = {cinema.getCinemaID()};\r\n                                    result = DatabaseUtils.selectQueryById(\"hall_name\", \"hall\", \"cinema_id = ?\", params);\r\n                                } catch (SQLException e) {\r\n                                    throw new RuntimeException(e);\r\n                                }\r\n\r\n                                String errorMsg = name.checkName(\"hall\", result, \"hall_name\");\r\n\r\n                                if (errorMsg == null) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(errorMsg);\r\n                                    error = true;\r\n                                }\r\n                            }\r\n                            else {\r\n                                error = false;\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (!hallName.equals(\"0\")) {\r\n                            String hallType = null;\r\n\r\n                            do {\r\n                                try {\r\n                                    System.out.println(\"\\nSelect the hall type: \");\r\n                                    System.out.println(\"1. Standard Hall\");\r\n                                    System.out.println(\"2. 3D Hall\");\r\n                                    System.out.print(\"\\nEnter your selection: \");\r\n                                    int hallTypeSelection = sc.nextInt();\r\n                                    sc.nextLine();\r\n\r\n                                    if (hallTypeSelection == 1) {\r\n                                        hallType = \"STANDARD\";\r\n                                        error = false;\r\n                                    } else if (hallTypeSelection == 2) {\r\n                                        hallType = \"3D\";\r\n                                        error = false;\r\n                                    } else {\r\n                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                        error = true;\r\n                                    }\r\n                                } catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid hall type no!\");\r\n                                    sc.nextLine();\r\n                                    error = true;\r\n                                }\r\n                            } while (error);\r\n\r\n                            Hall hall = new Hall(name, hallType);\r\n\r\n                            String confirmation;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want add the new hall for this cinema? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                confirmation = SystemClass.askForContinue(answer);\r\n                            } while (confirmation.equals(\"Invalid\"));\r\n\r\n                            // Confirm that the hall is successfully added\r\n                            boolean success;\r\n                            do {\r\n                                if (confirmation.equals(\"Y\")) {\r\n                                    success = cinema.addHall(hall);\r\n                                } else {\r\n                                    success = true;\r\n                                    System.out.println(\"This hall will not be added for the cinema.\");\r\n                                }\r\n\r\n                                if (success == false) {\r\n                                    do {\r\n                                        System.out.println(\"\\nDo you want to retry to add the new hall for this cinema? (Y / N)\");\r\n                                        System.out.print(\"Answer: \");\r\n                                        String answer = sc.next();\r\n                                        sc.nextLine();\r\n\r\n                                        confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                        if (confirmation.equals(\"Y\")) {\r\n                                            continues = true;\r\n                                        } else {\r\n                                            continues = false;\r\n                                        }\r\n                                    } while (confirmation.equals(\"Invalid\"));\r\n                                }\r\n                                else {\r\n                                    continues = false;\r\n                                }\r\n                            } while (continues);\r\n\r\n                            String continueAddHall;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want add another new cinema? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                continueAddHall = SystemClass.askForContinue(answer);\r\n                            } while (continueAddHall.equals(\"Invalid\"));\r\n\r\n                            if (continueAddHall.equals(\"Y\")) {\r\n                                continues = true;\r\n                            } else {\r\n                                continues = false;\r\n                                back = false;\r\n                            }\r\n                        }\r\n                        else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 3:\r\n                    // Modify Hall\r\n                    do {\r\n                        error = true;\r\n                        boolean stop = true;\r\n                        ArrayList<Hall> hallsModified = new ArrayList<>();\r\n                        int hallModified = 0;\r\n\r\n                        do {\r\n                            try {\r\n                                System.out.println(\"\\nSelect the hall you want to modify: \");\r\n                                hallsModified = cinema.getHallList(1);\r\n\r\n                                for (int i = 0; i < hallsModified.size(); i++) {\r\n                                    System.out.println((i + 1) + \". \" + hallsModified.get(i).getHallName().getName());\r\n                                }\r\n\r\n                                System.out.print(\"\\nEnter the hall no (0 - Back): \");\r\n                                hallModified = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (hallModified >= 0 && hallModified <= hallsModified.size()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid hall no!\");\r\n                                sc.nextLine();\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (hallModified != 0) {\r\n                            do {\r\n                                cinema.setHall(hallsModified.get(hallModified - 1));\r\n                                int serialNo = cinema.getHall().modifyHallDetails(sc);\r\n\r\n                                switch (serialNo) {\r\n                                    case 0:\r\n                                        String confirmation;\r\n                                        do {\r\n                                            System.out.println(\"\\nDo you want to save the changes? (Y / N)\");\r\n                                            System.out.print(\"Answer: \");\r\n                                            String answer = sc.next();\r\n                                            sc.nextLine();\r\n\r\n                                            confirmation = SystemClass.askForContinue(answer);\r\n                                        } while (confirmation.equals(\"Invalid\"));\r\n\r\n                                        stop = false;\r\n\r\n                                        // Confirm that the hall is successfully modified\r\n                                        boolean success = false;\r\n                                        do {\r\n                                            if (confirmation.equals(\"Y\")) {\r\n                                                success = cinema.getHall().modifyHall();\r\n                                            } else {\r\n                                                success = true;\r\n                                                System.out.println(\"\\nThe changes have not been saved.\");\r\n                                            }\r\n\r\n                                            if (success == false) {\r\n                                                do {\r\n                                                    System.out.println(\"\\nDo you want to retry to modify the hall? (Y / N)\");\r\n                                                    System.out.print(\"Answer: \");\r\n                                                    String answer = sc.next();\r\n                                                    sc.nextLine();\r\n\r\n                                                    confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                                    if (confirmation.equals(\"Y\")) {\r\n                                                        continues = true;\r\n                                                    } else {\r\n                                                        continues = false;\r\n                                                    }\r\n                                                } while (confirmation.equals(\"Invalid\"));\r\n                                            }\r\n                                            else {\r\n                                                continues = false;\r\n                                            }\r\n                                        } while (continues);\r\n\r\n                                        String continueModifyHall;\r\n                                        do {\r\n                                            System.out.println(\"\\nDo you want modify another hall? (Y / N)\");\r\n                                            System.out.print(\"Answer: \");\r\n                                            String answer = sc.next();\r\n                                            sc.nextLine();\r\n\r\n                                            continueModifyHall = SystemClass.askForContinue(answer);\r\n                                        } while (continueModifyHall.equals(\"Invalid\"));\r\n\r\n                                        if (continueModifyHall.equals(\"Y\")) {\r\n                                            continues = true;\r\n                                        } else {\r\n                                            continues = false;\r\n                                            back = false;\r\n                                        }\r\n                                        break;\r\n                                    case 1:\r\n                                        Name name = null;\r\n                                        do {\r\n                                            System.out.print(\"\\nEnter the new hall name: \");\r\n                                            String hallName = sc.nextLine();\r\n\r\n                                            name = new Name(hallName);\r\n                                            name.capitalizeWords();\r\n\r\n                                            ResultSet result = null;\r\n                                            try {\r\n                                                Object[] params = {cinema.getCinemaID()};\r\n                                                result = DatabaseUtils.selectQueryById(\"hall_name\", \"hall\", \"cinema_id = ?\", params);\r\n                                            } catch (SQLException e) {\r\n                                                throw new RuntimeException(e);\r\n                                            }\r\n\r\n                                            String errorMsg = name.checkEditName(\"hall\", result, \"hall_name\", cinema.getHall().getHallName().getName());\r\n\r\n                                            if (errorMsg == null) {\r\n                                                hallsModified.get(hallModified - 1).setHallName(name);\r\n                                                error = false;\r\n                                            } else {\r\n                                                System.out.println(errorMsg);\r\n                                                error = true;\r\n                                            }\r\n                                        } while (error);\r\n                                        break;\r\n                                    case 2:\r\n                                        System.out.println(\"Hall type cannot be modified! Please retry.\");\r\n                            /*do {\r\n                                try {\r\n                                    System.out.println(\"\\nSelect the hall type: \");\r\n                                    System.out.println(\"1. Standard Hall\");\r\n                                    System.out.println(\"2. 3D Hall\");\r\n                                    System.out.print(\"\\nEnter your selection: \");\r\n                                    int hallTypeSelection = sc.nextInt();\r\n\r\n                                    if (hallTypeSelection == 1) {\r\n                                        hallsModified.get(hallModified - 1).setHallType(\"STANDARD\");\r\n                                        //cinema.setHall(new Hall(hallsModified.get(hallModified - 1).getHallName(), \"STANDARD\"));\r\n                                        error = false;\r\n                                    } else if (hallTypeSelection == 2) {\r\n                                        hallsModified.get(hallModified - 1).setHallType(\"3D\");\r\n                                        //cinema.setHall(new Hall(hallsModified.get(hallModified - 1).getHallName(), \"3D\"));\r\n                                        error = false;\r\n                                    } else {\r\n                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                        error = true;\r\n                                    }\r\n                                }\r\n                                catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid hall type no!\");\r\n                                    sc.nextLine();\r\n                                    error = true;\r\n                                }\r\n                            } while (error);*/\r\n                                        break;\r\n                                    case 3:\r\n                                        System.out.println(\"Hall capacity cannot be modified! Please retry.\");\r\n                                        break;\r\n                                    case 4: //ChinYong Part\r\n\r\n                                        hallsModified.get(hallModified-1).initSeatList();\r\n\r\n                                        int row = 0, col = 0;\r\n                                        Scanner scanner=new Scanner(System.in);\r\n                                        boolean validInput = false;\r\n                                        String strCon=\"Y\";\r\n                                        char chCon = strCon.charAt(0);\r\n                                        while (chCon=='Y') {\r\n                                            hallsModified.get(hallModified-1).viewSeat_status();\r\n                                            while (!validInput) {\r\n                                                try {\r\n                                                    System.out.print(\"\\nSelect Row    : \");\r\n                                                    row = scanner.nextInt();\r\n\r\n                                                    System.out.print(\"Select Column : \");\r\n                                                    col = scanner.nextInt();\r\n\r\n                                                    if (!Seat.checkSeatValidation(row, col)) {\r\n                                                        System.out.println(\"Invalid Input\");\r\n                                                        continue;\r\n                                                    } else {\r\n                                                        validInput = true;\r\n                                                    }\r\n                                                } catch (Exception e) {\r\n                                                    System.out.println(\"Something wrong...\");\r\n                                                    scanner.nextLine();\r\n                                                }\r\n                                            }\r\n                                            validInput=false;\r\n                                            String letter2 = Integer.toString(hallsModified.get(hallModified - 1).getHallID());\r\n                                            char letter = (char) ('A' + row - 1);\r\n                                            String combineSeatId = letter2 + letter + Integer.toString(col);\r\n\r\n                                            int seatStatus = 1;\r\n                                            do {\r\n                                                System.out.print(\"Enter Status (1=Available 0=Unavailable) : \");\r\n                                                try {\r\n                                                    seatStatus = sc.nextInt();\r\n                                                    if (seatStatus != 1 && seatStatus != 0) {\r\n                                                        System.out.println(\"Invalid Input\");\r\n                                                    }\r\n                                                } catch (Exception e) {\r\n                                                    System.out.println(\"Something wrong...\");\r\n                                                    scanner.nextLine();\r\n                                                }\r\n                                            } while (seatStatus != 1 && seatStatus != 0);\r\n                                            String str = \" \";\r\n                                            char ch = str.charAt(0);\r\n                                            do {\r\n                                                System.out.print(\"Confirm ? (Y=Yes N=No) : \");\r\n                                                str = scanner.next().toUpperCase();\r\n                                                ch = str.charAt(0);\r\n                                            } while (ch != 'Y' && ch != 'N');\r\n                                            if (ch == 'Y') {\r\n                                                for (Seat seats : hallsModified.get(hallModified - 1).getSeats()) {\r\n                                                    if (seats.getSeat_id().equals(combineSeatId)) {\r\n                                                        seats.setSeat_status(seatStatus);\r\n                                                        seats.updateSeatStatus();\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            do {\r\n                                                System.out.print(\"Continue ? (Y=Yes N=No) : \");\r\n                                                strCon = scanner.next().toUpperCase();\r\n                                                chCon = str.charAt(0);\r\n                                            } while (chCon != 'Y' && chCon != 'N');\r\n                                        }\r\n                                        break;\r\n                                }\r\n                            } while (stop);\r\n                        }\r\n                        else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 4:\r\n                    // Delete Hall\r\n                    do {\r\n                        error = true;\r\n                        ArrayList<Hall> hallsDeleted = new ArrayList<>();\r\n                        int hallDeleted = 0;\r\n\r\n                        do {\r\n                            try {\r\n                                System.out.println(\"\\nSelect the hall you want to delete: \");\r\n                                hallsDeleted = cinema.getHallList(1);\r\n\r\n                                for (int i = 0; i < hallsDeleted.size(); i++) {\r\n                                    System.out.println((i + 1) + \". \" + hallsDeleted.get(i).getHallName().getName());\r\n                                }\r\n\r\n                                System.out.print(\"\\nEnter the hall no (0 - Back): \");\r\n                                hallDeleted = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (hallDeleted >= 0 && hallDeleted <= hallsDeleted.size()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid hall no!\");\r\n                                sc.nextLine();\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (hallDeleted != 0) {\r\n                            cinema.setHall(hallsDeleted.get(hallDeleted - 1));\r\n                            String confirmation;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want to delete this hall? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                confirmation = SystemClass.askForContinue(answer);\r\n                            } while (confirmation.equals(\"Invalid\"));\r\n\r\n                            if (confirmation.equals(\"Y\")) {\r\n                                cinema.getHall().deleteHall();\r\n                            } else {\r\n                                System.out.println(\"\\nThe hall is saved.\");\r\n                            }\r\n\r\n                            // Confirm that the cinema is successfully deleted\r\n                            boolean success;\r\n                            do {\r\n                                if (confirmation.equals(\"Y\")) {\r\n                                    success = cinema.getHall().deleteHall();\r\n                                } else {\r\n                                    success = true;\r\n                                    System.out.println(\"\\nThe hall is safe :)\");\r\n                                }\r\n\r\n                                if (success == false) {\r\n                                    do {\r\n                                        System.out.println(\"\\nDo you want to retry to delete this hall? (Y / N)\");\r\n                                        System.out.print(\"Answer: \");\r\n                                        String answer = sc.next();\r\n                                        sc.nextLine();\r\n\r\n                                        confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                        if (confirmation.equals(\"Y\")) {\r\n                                            continues = true;\r\n                                        } else {\r\n                                            continues = false;\r\n                                        }\r\n                                    } while (confirmation.equals(\"Invalid\"));\r\n                                }\r\n                                else {\r\n                                    continues = false;\r\n                                }\r\n                            } while (continues);\r\n\r\n                            String continueDeleteHall;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want to continue to delete another hall? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer2 = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                continueDeleteHall = SystemClass.askForContinue(answer2);\r\n                            } while (continueDeleteHall.equals(\"Invalid\"));\r\n\r\n                            if (continueDeleteHall.equals(\"Y\")) {\r\n                                continues = true;\r\n                            } else {\r\n                                continues = false;\r\n                                back = false;\r\n                            }\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n            }\r\n        } while (back == false);\r\n    }\r\n\r\n    private static void manageMovie(Scanner sc) throws Exception {\r\n        boolean back = false;\r\n\r\n        do {\r\n            int choice = displayMenu(\"Movie\", sc);\r\n            boolean error = true;\r\n            boolean continues = true;\r\n\r\n            switch (choice) {\r\n                case 0:\r\n                    back = true;\r\n                    break;\r\n                case 1:\r\n                    // View Movie\r\n                    do {\r\n                        int choice1 = 0;\r\n                        ArrayList<Movie> moviesAfterFiltered = Movie.showMovieListAfterFiltered(null, null, 1);\r\n\r\n                        do {\r\n                            try {\r\n                                System.out.print(\"\\nEnter the movie no (0 - Back): \");\r\n                                choice1 = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (choice1 >= 0 && choice1 <= moviesAfterFiltered.size()) {\r\n                                    error = false;\r\n                                }\r\n                                else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                    error = true;\r\n                                }\r\n                            }\r\n                            catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid choice!\");\r\n                                sc.nextLine();\r\n                                error = true;\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (choice1 != 0) {\r\n                            Movie viewMovie = moviesAfterFiltered.get(choice1 - 1);\r\n                            viewMovie.viewMovieDetails();\r\n\r\n                            String continueViewMovie;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want view another movie? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                continueViewMovie = SystemClass.askForContinue(answer);\r\n                            } while (continueViewMovie.equals(\"Invalid\"));\r\n\r\n                            if (continueViewMovie.equals(\"Y\")) {\r\n                                continues = true;\r\n                            } else {\r\n                                continues = false;\r\n                                back = false;\r\n                            }\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 2:\r\n                    do {\r\n                        Movie newMovie = new Movie();\r\n\r\n                        // Movie Name\r\n                        Name name = null;\r\n                        do {\r\n                            System.out.print(\"\\nEnter movie name: \");\r\n                            String mvName = sc.nextLine();\r\n\r\n                            name = new Name(mvName);\r\n                            name.capitalizeWords();\r\n\r\n                            ResultSet result = null;\r\n                            try {\r\n                                result = DatabaseUtils.selectQueryById(\"mv_name\", \"movie\", null, null);\r\n                            } catch (SQLException e) {\r\n                                throw new RuntimeException(e);\r\n                            }\r\n\r\n                            String errorMessage = name.checkName(\"movie\", result, \"mv_name\");\r\n\r\n                            if (errorMessage == null) {\r\n                                newMovie.setMvName(name);\r\n                                error = false;\r\n                            } else {\r\n                                System.out.println(errorMessage + \"\\n\");\r\n                                error = true;\r\n                            }\r\n                        } while (error);\r\n\r\n                        // Movie Genre ID\r\n                        do {\r\n                            try {\r\n                                Object[] params = {1};\r\n                                ResultSet result = DatabaseUtils.selectQueryById(\"genre_id, genre_name\", \"genre\", \"genre_status = ?\", params);\r\n\r\n                                try {\r\n                                    int i = 1;\r\n                                    ArrayList<Integer> genreID = new ArrayList<>();\r\n\r\n                                    System.out.println(\"\\nAvailable Genres\");\r\n                                    while (result.next()) {\r\n                                        System.out.println(i + \". \" + result.getString(\"genre_name\"));\r\n                                        genreID.add(result.getInt(\"genre_id\"));  // Store the genre ID\r\n                                        i++;\r\n                                    }\r\n                                    System.out.print(\"\\nEnter your selection: \");\r\n                                    int genreSelected = sc.nextInt();\r\n                                    sc.nextLine();\r\n\r\n                                    String errorMessage = MovieValidator.checkGenreID(genreID.size(), genreSelected);\r\n\r\n                                    if (errorMessage == null) {\r\n                                        Genre genre = new Genre(genreID.get(genreSelected - 1));\r\n                                        newMovie.setGenre(genre);  // ArrayList starts from index 0\r\n                                        error = false;\r\n                                    }\r\n                                    else {\r\n                                        System.out.println(errorMessage);\r\n                                        error = true;\r\n                                    }\r\n                                }\r\n                                catch (Exception e) {\r\n                                    System.out.println(\"Please enter a valid choice!\");\r\n                                    sc.nextLine();\r\n                                    error = true;\r\n                                }\r\n                            }\r\n                            catch (SQLException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        } while (error);\r\n\r\n                        // Movie Release Date\r\n                        do {\r\n                            System.out.print(\"\\nEnter movie release date (YYYY-MM-DD): \");\r\n                            String releaseDate = sc.nextLine();\r\n\r\n                            if (releaseDate.trim().isEmpty()) {\r\n                                System.out.println(\"Please enter the release date.\");\r\n                                error = true;\r\n                            } else {\r\n                                try {\r\n                                    String[] parts = releaseDate.split(\"-\");\r\n                                    int year = Integer.parseInt(parts[0]);  // Java's built-in method for converting strings to integers (int type)\r\n                                    int month = Integer.parseInt(parts[1]);\r\n                                    int day = Integer.parseInt(parts[2]);\r\n\r\n                                    // 验证日期是否 valid\r\n                                    DateTime date = new DateTime(year, month, day);\r\n                                    boolean validDate = date.isValidDate();\r\n\r\n                                    if (validDate == true) {\r\n                                        String errorMessage = date.checkLocalDate();\r\n\r\n                                        if (errorMessage == null) {\r\n                                            newMovie.setReleaseDate(date);\r\n                                            error = false;\r\n                                        } else {\r\n                                            System.out.println(errorMessage);\r\n                                            error = true;\r\n                                        }\r\n                                    } else {\r\n                                        System.out.println(\"Please enter a valid date!\");\r\n                                        error = true;\r\n                                    }\r\n                                } catch (Exception e) {\r\n                                    System.out.println(\"The date format entered in wrong!\");\r\n                                    error = true;\r\n                                }\r\n                            }\r\n                        } while (error);\r\n\r\n                        // Movie Duration\r\n                        do {\r\n                            try {\r\n                                System.out.print(\"\\nEnter movie duration (in minutes): \");\r\n                                int duration = sc.nextInt();\r\n                                sc.nextLine();  // Consume the newline left by nextInt()\r\n\r\n                                String errorMessage = MovieValidator.checkDuration(duration);\r\n\r\n                                if (errorMessage == null) {\r\n                                    newMovie.setDuration(duration);\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(errorMessage);\r\n                                    error = true;\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid duration!\");\r\n                                sc.nextLine(); // Consume the erroneous input\r\n                                error = true;\r\n                            }\r\n                        } while (error);\r\n\r\n                        // Movie Language\r\n                        String[] languages = {\"English\", \"Chinese\", \"Japanese\", \"Korean\", \"German\", \"Italian\", \"Spanish\", \"Cantonese\", \"French\", \"Russian\", \"Arabic\", \"Hindi\", \"Tamil\"};\r\n\r\n                        String mvLanguage = Movie.getMultipleChosens(sc, languages, \"languages\");\r\n                        newMovie.setLang(mvLanguage);\r\n\r\n                        // Movie Director\r\n                        String mvDirector = Movie.getMultipleValues(sc, \"director\", \"directors\");\r\n                        newMovie.setDirector(mvDirector);\r\n\r\n                        // Movie Writter\r\n                        String mvWritter = Movie.getMultipleValues(sc, \"writter\", \"writters\");\r\n                        newMovie.setWritter(mvWritter);\r\n\r\n                        // Movie Starring\r\n                        String mvStarring = Movie.getMultipleValues(sc, \"starring\", \"starrings\");\r\n                        newMovie.setStarring(mvStarring);\r\n\r\n                        // Movie Music Provider\r\n                        String mvMusicProvider = Movie.getMultipleValues(sc, \"music provider\", \"music prodivers\");\r\n                        newMovie.setMusicProvider(mvMusicProvider);\r\n\r\n                        // Movie Country\r\n                        String[] countries = {\"United States\", \"United Kingdom\", \"Canada\", \"China\", \"Taiwan\", \"Malaysia\", \"Singapore\", \"Japan\", \"North Korea\", \"Italy\", \"Hong Kong\", \"France\", \"Russia\", \"India\"};\r\n\r\n                        String mvCountry = Movie.getMultipleChosens(sc, countries, \"countries\");\r\n                        newMovie.setCountry(mvCountry);\r\n\r\n                        // Movie Basic Ticket Price\r\n                        double mvBasicTicketPrice = Movie.getTicketPrice(sc, \"basic\");\r\n                        newMovie.setBasicTicketPrice(mvBasicTicketPrice);\r\n\r\n                        // Movie Meta Description\r\n                        do {\r\n                            System.out.print(\"\\nEnter movie meta description: \");\r\n                            String mvDescription = sc.nextLine();\r\n\r\n                            String errorMessage = MovieValidator.checkMetaDescription(mvDescription);\r\n\r\n                            if (errorMessage == null) {\r\n                                newMovie.setMetaDescription(mvDescription);\r\n                                error = false;\r\n                            }\r\n                            else {\r\n                                System.out.println(errorMessage);\r\n                                error = true;\r\n                            }\r\n                        } while (error);\r\n\r\n                        String confirmation;\r\n                        do {\r\n                            System.out.println(\"\\nDo you want add this new movie? (Y / N)\");\r\n                            System.out.print(\"Answer: \");\r\n                            String answer = sc.next();\r\n                            sc.nextLine();\r\n\r\n                            confirmation = SystemClass.askForContinue(answer);\r\n                        } while (confirmation.equals(\"Invalid\"));\r\n\r\n                        // Confirm that the movie is successfully added\r\n                        boolean success = false;\r\n                        do {\r\n                            if (confirmation.equals(\"Y\")) {\r\n                                success = newMovie.add();\r\n                            } else {\r\n                                success = true;\r\n                                System.out.println(\"This movie will not be added.\");\r\n                            }\r\n\r\n                            if (success == false) {\r\n                                do {\r\n                                    System.out.println(\"\\nDo you want to retry to add the new movie? (Y / N)\");\r\n                                    System.out.print(\"Answer: \");\r\n                                    String answer = sc.next();\r\n                                    sc.nextLine();\r\n\r\n                                    confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                    if (confirmation.equals(\"Y\")) {\r\n                                        continues = true;\r\n                                    } else {\r\n                                        continues = false;\r\n                                    }\r\n                                } while (confirmation.equals(\"Invalid\"));\r\n                            }\r\n                            else {\r\n                                continues = false;\r\n                            }\r\n                        } while (continues);\r\n\r\n                        String continueAddMovie;\r\n                        do {\r\n                            System.out.println(\"\\nDo you want add another new movie? (Y / N)\");\r\n                            System.out.print(\"Answer: \");\r\n                            String answer = sc.next();\r\n                            sc.nextLine();\r\n\r\n                            continueAddMovie = SystemClass.askForContinue(answer);\r\n                        } while (continueAddMovie.equals(\"Invalid\"));\r\n\r\n                        if (continueAddMovie.equals(\"Y\")) {\r\n                            continues = true;\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 3:\r\n                    ArrayList<Movie> moviesAfterFiltered;\r\n                    int movieID = 1;\r\n\r\n                    do {\r\n                        System.out.println(\"\\nSelect the movie you want to modify: \");\r\n                        moviesAfterFiltered = Movie.showMovieListAfterFiltered(null, null, 1);\r\n\r\n                        do {\r\n                            try {\r\n                                System.out.print(\"\\nEnter the movie id (0 - Back): \");\r\n                                movieID = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (movieID >= 0 && movieID <= moviesAfterFiltered.size()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                    error = true;\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid movie id!\");\r\n                                sc.nextLine();\r\n                                error = true;\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (movieID != 0) {\r\n                            Movie orgMovie = moviesAfterFiltered.get(movieID - 1);\r\n                            Movie movie = new Movie(orgMovie.getMovieID(), orgMovie.getGenre(), orgMovie.getMvName(), orgMovie.getReleaseDate(), orgMovie.getDuration(), orgMovie.getLang(), orgMovie.getDirector(), orgMovie.getWritter(), orgMovie.getStarring(), orgMovie.getMusicProvider(), orgMovie.getCountry(), orgMovie.getMetaDescription(), orgMovie.getBasicTicketPrice());\r\n                            boolean stop = true;\r\n\r\n                            do {\r\n                                int serialNum = movie.modifyMovieDetail(sc);\r\n                                switch (serialNum) {\r\n                                    case 0:\r\n                                        String confirmation;\r\n                                        do {\r\n                                            System.out.println(\"\\nDo you want to save the changes? (Y / N)\");\r\n                                            System.out.print(\"Answer: \");\r\n                                            String answer = sc.next();\r\n                                            sc.nextLine();\r\n\r\n                                            confirmation = SystemClass.askForContinue(answer);\r\n                                        } while (confirmation.equals(\"Invalid\"));\r\n\r\n                                        stop = false;\r\n\r\n                                        // Confirm that the movie is successfully modified\r\n                                        boolean success = false;\r\n                                        do {\r\n                                            if (confirmation.equals(\"Y\")) {\r\n                                                success = movie.modify();\r\n                                            } else {\r\n                                                success = true;\r\n                                                movie = orgMovie;\r\n                                                System.out.println(\"\\nThe changes have not been saved.\");\r\n                                            }\r\n\r\n                                            if (success == false) {\r\n                                                do {\r\n                                                    System.out.println(\"\\nDo you want to retry to modify the movie? (Y / N)\");\r\n                                                    System.out.print(\"Answer: \");\r\n                                                    String answer = sc.next();\r\n                                                    sc.nextLine();\r\n\r\n                                                    confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                                    if (confirmation.equals(\"Y\")) {\r\n                                                        continues = true;\r\n                                                    } else {\r\n                                                        continues = false;\r\n                                                    }\r\n                                                } while (confirmation.equals(\"Invalid\"));\r\n                                            }\r\n                                            else {\r\n                                                continues = false;\r\n                                            }\r\n                                        } while (continues);\r\n\r\n                                        String continueModifyMovie;\r\n                                        do {\r\n                                            System.out.println(\"\\nDo you want modify another movie? (Y / N)\");\r\n                                            System.out.print(\"Answer: \");\r\n                                            String answer = sc.next();\r\n                                            sc.nextLine();\r\n\r\n                                            continueModifyMovie = SystemClass.askForContinue(answer);\r\n                                        } while (continueModifyMovie.equals(\"Invalid\"));\r\n\r\n                                        if (continueModifyMovie.equals(\"Y\")) {\r\n                                            continues = true;\r\n                                        } else {\r\n                                            continues = false;\r\n                                            back = false;\r\n                                        }\r\n                                        break;\r\n                                    case 1:\r\n                                        // Movie Name\r\n                                        Name name = null;\r\n                                        do {\r\n                                            System.out.print(\"\\nEnter the new movie name: \");\r\n                                            String newMvName = sc.nextLine();\r\n\r\n                                            name = new Name(newMvName);\r\n                                            name.capitalizeWords();\r\n\r\n                                            ResultSet result = null;\r\n                                            try {\r\n                                                result = DatabaseUtils.selectQueryById(\"mv_name\", \"movie\", null, null);\r\n                                            } catch (SQLException e) {\r\n                                                throw new RuntimeException(e);\r\n                                            }\r\n\r\n                                            String errorMessage = name.checkEditName(\"movie\", result, \"mv_name\", orgMovie.getMvName().getName());\r\n\r\n                                            if (errorMessage == null) {\r\n                                                movie.setMvName(name);\r\n                                                error = false;\r\n                                            } else {\r\n                                                System.out.println(errorMessage);\r\n                                                error = true;\r\n                                            }\r\n                                        } while (error);\r\n                                        break;\r\n                                    case 2:\r\n                                        // Movie Genre ID\r\n                                        do {\r\n                                            try {\r\n                                                Object[] params = {1};\r\n                                                ResultSet result = DatabaseUtils.selectQueryById(\"genre_id, genre_name\", \"genre\", \"genre_status = ?\", params);\r\n\r\n                                                try {\r\n                                                    int i = 1;\r\n                                                    ArrayList<Integer> genreID = new ArrayList<>();\r\n\r\n                                                    System.out.println(\"\\nAvailable Genres\");\r\n                                                    while (result.next()) {\r\n                                                        System.out.println(i + \". \" + result.getString(\"genre_name\"));\r\n                                                        genreID.add(result.getInt(\"genre_id\"));  // Store the genre ID\r\n                                                        i++;\r\n                                                    }\r\n                                                    System.out.print(\"\\nEnter your selection: \");\r\n                                                    int newGenre = sc.nextInt();\r\n                                                    sc.nextLine();\r\n\r\n                                                    String errorMessage = MovieValidator.checkGenreID(genreID.size(), newGenre);\r\n\r\n                                                    if (errorMessage == null) {\r\n                                                        Genre genre = new Genre(genreID.get(newGenre - 1));\r\n                                                        movie.setGenre(genre);  // ArrayList starts from index 0\r\n                                                        error = false;\r\n                                                    } else {\r\n                                                        System.out.println(errorMessage);\r\n                                                        error = true;\r\n                                                    }\r\n                                                } catch (Exception e) {\r\n                                                    System.out.println(\"Please enter a valid choice!\");\r\n                                                    sc.nextLine();\r\n                                                    error = true;\r\n                                                }\r\n                                            } catch (SQLException e) {\r\n                                                e.printStackTrace();\r\n                                            }\r\n                                        } while (error);\r\n                                        break;\r\n                                    case 3:\r\n                                        // Movie Release Date\r\n                                        do {\r\n                                            System.out.print(\"\\nEnter movie release date (YYYY-MM-DD) (X - Back): \");\r\n                                            String editReleaseDate = sc.nextLine();\r\n\r\n                                            if (editReleaseDate.trim().isEmpty()) {\r\n                                                System.out.println(\"Please enter the release date.\");\r\n                                                error = true;\r\n                                            } else if (editReleaseDate.equals(\"x\") || editReleaseDate.equals(\"X\")) {\r\n                                                break;\r\n                                            } else {\r\n                                                try {\r\n                                                    String[] editParts = editReleaseDate.split(\"-\");\r\n                                                    int editYear = Integer.parseInt(editParts[0]);  // Java's built-in method for converting strings to integers (int type)\r\n                                                    int editMonth = Integer.parseInt(editParts[1]);\r\n                                                    int editDay = Integer.parseInt(editParts[2]);\r\n\r\n                                                    // 验证日期是否 valid\r\n                                                    DateTime editDate = new DateTime(editYear, editMonth, editDay);\r\n                                                    boolean editValidDate = editDate.isValidDate();\r\n\r\n                                                    if (editValidDate == true) {\r\n                                                        String errorMessage = editDate.checkLocalDate();\r\n\r\n                                                        if (errorMessage == null) {\r\n                                                            movie.setReleaseDate(editDate);\r\n                                                            error = false;\r\n                                                        } else {\r\n                                                            System.out.println(errorMessage);\r\n                                                            error = true;\r\n                                                        }\r\n                                                    } else {\r\n                                                        System.out.println(\"Please enter a valid date!\");\r\n                                                        error = true;\r\n                                                    }\r\n                                                } catch (Exception e) {\r\n                                                    System.out.println(\"The date format entered in wrong!\");\r\n                                                    error = true;\r\n                                                }\r\n                                            }\r\n                                        } while (error);\r\n                                        break;\r\n                                    case 4:\r\n                                        // Movie Duration\r\n                                        do {\r\n                                            try {\r\n                                                System.out.print(\"\\nEnter the new movie duration (in minutes): \");\r\n                                                int editDuration = sc.nextInt();\r\n                                                sc.nextLine();  // Consume the newline left by nextInt()\r\n\r\n                                                String errorMessage = MovieValidator.checkDuration(editDuration);\r\n\r\n                                                if (errorMessage == null) {\r\n                                                    movie.setDuration(editDuration);\r\n                                                    error = false;\r\n                                                } else {\r\n                                                    System.out.println(errorMessage);\r\n                                                    error = true;\r\n                                                }\r\n                                            } catch (InputMismatchException e) {\r\n                                                System.out.println(\"Please enter a valid duration!\");\r\n                                                sc.nextLine(); // Consume the erroneous input\r\n                                                error = true;\r\n                                            }\r\n                                        } while (error);\r\n                                        break;\r\n                                    case 5:\r\n                                        // Movie Language\r\n                                        String[] languages = {\"English\", \"Chinese\", \"Japanese\", \"Korean\", \"German\", \"Italian\", \"Spanish\", \"Cantonese\", \"French\", \"Russian\", \"Arabic\", \"Hindi\", \"Tamil\"};\r\n\r\n                                        String editMvLanguage = movie.getMultipleChosens(sc, languages, \"languages\");\r\n                                        movie.setLang(editMvLanguage);\r\n                                        break;\r\n                                    case 6:\r\n                                        // Movie Director\r\n                                        String editMvDirector = movie.getMultipleValues(sc, \"director\", \"directors\");\r\n                                        movie.setDirector(editMvDirector);\r\n                                        break;\r\n                                    case 7:\r\n                                        // Movie Writter\r\n                                        String editMvWritter = movie.getMultipleValues(sc, \"writter\", \"writters\");\r\n                                        movie.setWritter(editMvWritter);\r\n                                        break;\r\n                                    case 8:\r\n                                        // Movie Starring\r\n                                        String editMvStarring = movie.getMultipleValues(sc, \"starring\", \"starrings\");\r\n                                        movie.setStarring(editMvStarring);\r\n                                        break;\r\n                                    case 9:\r\n                                        // Movie Music Provider\r\n                                        String editMvMusicProvider = movie.getMultipleValues(sc, \"music provider\", \"music prodivers\");\r\n                                        movie.setMusicProvider(editMvMusicProvider);\r\n                                        break;\r\n                                    case 10:\r\n                                        // Movie Country\r\n                                        String[] countries = {\"United States\", \"United Kingdom\", \"Canada\", \"China\", \"Taiwan\", \"Malaysia\", \"Singapore\", \"Japan\", \"North Korea\", \"Italy\", \"Hong Kong\", \"France\", \"Russia\", \"India\"};\r\n\r\n                                        String editMvCountry = movie.getMultipleChosens(sc, countries, \"countries\");\r\n                                        movie.setCountry(editMvCountry);\r\n                                        break;\r\n                                    case 11:\r\n                                        // Movie Basic Ticket Price\r\n                                        double editMvBasicTicketPrice = Movie.getTicketPrice(sc, \"basic\");\r\n                                        movie.setBasicTicketPrice(editMvBasicTicketPrice);\r\n                                        System.out.println(movie.getBasicTicketPrice());\r\n                                        break;\r\n                                    case 12:\r\n                                        // Movie Meta Description\r\n                                        do {\r\n                                            System.out.print(\"\\nEnter the new movie meta description: \");\r\n                                            String editMvDescription = sc.nextLine();\r\n\r\n                                            String errorMessage = MovieValidator.checkMetaDescription(editMvDescription);\r\n\r\n                                            if (errorMessage == null) {\r\n                                                movie.setMetaDescription(editMvDescription);\r\n                                                error = false;\r\n                                            }\r\n                                            else {\r\n                                                System.out.println(errorMessage);\r\n                                                error = true;\r\n                                            }\r\n                                        } while (error);\r\n                                        break;\r\n                                }\r\n                            } while (stop);\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 4:\r\n                    movieID = 0;\r\n                    do {\r\n                        System.out.println(\"\\nSelect the movie you want to delete: \");\r\n                        moviesAfterFiltered = Movie.showMovieListAfterFiltered(null, null, 1);\r\n\r\n                        do {\r\n                            try {\r\n                                System.out.print(\"\\nEnter the movie id (0 - Back): \");\r\n                                movieID = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (movieID >= 0 && movieID <= moviesAfterFiltered.size()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                    error = true;\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid movie id!\");\r\n                                sc.nextLine();\r\n                                error = true;\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (movieID != 0) {\r\n                            Movie movie = moviesAfterFiltered.get(movieID - 1);\r\n                            movie.viewMovieDetails();\r\n                            String confirmation;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want to delete this movie? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                confirmation = SystemClass.askForContinue(answer);\r\n                            } while (confirmation.equals(\"Invalid\"));\r\n\r\n                            // Confirm that the movie is successfully deleted\r\n                            boolean success = false;\r\n                            do {\r\n                                if (confirmation.equals(\"Y\")) {\r\n                                    success = movie.delete();\r\n                                } else {\r\n                                    success = true;\r\n                                    System.out.println(\"\\nThe movie is safe :)\");\r\n                                }\r\n\r\n                                if (success == false) {\r\n                                    do {\r\n                                        System.out.println(\"\\nDo you want to retry to delete this cinema? (Y / N)\");\r\n                                        System.out.print(\"Answer: \");\r\n                                        String answer = sc.next();\r\n                                        sc.nextLine();\r\n\r\n                                        confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                        if (confirmation.equals(\"Y\")) {\r\n                                            continues = true;\r\n                                        } else {\r\n                                            continues = false;\r\n                                        }\r\n                                    } while (confirmation.equals(\"Invalid\"));\r\n                                }\r\n                                else {\r\n                                    continues = false;\r\n                                }\r\n                            } while (continues);\r\n\r\n                            String continueDeleteMovie;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want delete another movie? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                continueDeleteMovie = SystemClass.askForContinue(answer);\r\n                            } while (continueDeleteMovie.equals(\"Invalid\"));\r\n\r\n                            if (continueDeleteMovie.equals(\"Y\")) {\r\n                                continues = true;\r\n                            } else {\r\n                                continues = false;\r\n                                back = false;\r\n                            }\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n            }\r\n        } while (back == false);\r\n    }\r\n\r\n    private static void manageGenre(Scanner sc) throws Exception {\r\n        boolean back = false;\r\n\r\n        do {\r\n            ArrayList<Genre> genres = new ArrayList<>();\r\n            int choice = displayMenu(\"Genre\", sc);\r\n            boolean error = true;\r\n            boolean continues = true;\r\n\r\n            switch (choice) {\r\n                case 0:\r\n                    back = true;\r\n                    break;\r\n                case 1:\r\n                    int genreSelected = 0;\r\n                    genres = Genre.viewGenreList(1);\r\n\r\n                    do {\r\n                        try {\r\n                            System.out.print(\"\\nEnter the genre no (0 - Back): \");\r\n                            genreSelected = sc.nextInt();\r\n                            sc.nextLine();\r\n\r\n                            if (genreSelected >= 0 && genreSelected <= genres.size()) {\r\n                                error = false;\r\n                            }\r\n                            else {\r\n                                System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                error = true;\r\n                            }\r\n                        }\r\n                        catch (InputMismatchException e) {\r\n                            System.out.println(\"Please enter a valid choice!\");\r\n                            sc.nextLine();\r\n                            error = true;\r\n                        }\r\n                    } while (error);\r\n\r\n                    if (genreSelected != 0) {\r\n                        Genre viewGenre = genres.get(genreSelected - 1);\r\n                        viewGenre.view();\r\n                    }\r\n                    back = false;\r\n                    break;\r\n                case 2:\r\n                    do {\r\n                        Genre newGenre = new Genre();\r\n\r\n                        // Genre Name\r\n                        Name name = null;\r\n                        do {\r\n                            System.out.print(\"\\nEnter genre name: \");\r\n                            String genreName = sc.nextLine();\r\n\r\n                            name = new Name(genreName);\r\n                            name.capitalizeWords();\r\n\r\n                            ResultSet result = null;\r\n                            try {\r\n                                result = DatabaseUtils.selectQueryById(\"genre_name\", \"genre\", null, null);\r\n                            } catch (SQLException e) {\r\n                                throw new RuntimeException(e);\r\n                            }\r\n\r\n                            String errorMessage = name.checkName(\"genre\", result, \"genre_name\");\r\n\r\n                            if (errorMessage == null) {\r\n                                newGenre.setGenreName(name);\r\n                                error = false;\r\n                            } else {\r\n                                System.out.println(errorMessage);\r\n                                error = true;\r\n                            }\r\n                        } while (error);\r\n\r\n                        String confirmation;\r\n                        do {\r\n                            System.out.println(\"\\nDo you want add this new genre? (Y / N)\");\r\n                            System.out.print(\"Answer: \");\r\n                            String answer = sc.next();\r\n                            sc.nextLine();\r\n\r\n                            confirmation = SystemClass.askForContinue(answer);\r\n                        } while (confirmation.equals(\"Invalid\"));\r\n\r\n                        // Confirm that the genre is successfully added\r\n                        boolean success = false;\r\n                        do {\r\n                            if (confirmation.equals(\"Y\")) {\r\n                                success = newGenre.add();\r\n                            } else {\r\n                                success = true;\r\n                                System.out.println(\"This genre will not be added.\");\r\n                            }\r\n\r\n                            if (success == false) {\r\n                                do {\r\n                                    System.out.println(\"\\nDo you want to retry to add the new genre? (Y / N)\");\r\n                                    System.out.print(\"Answer: \");\r\n                                    String answer = sc.next();\r\n                                    sc.nextLine();\r\n\r\n                                    confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                    if (confirmation.equals(\"Y\")) {\r\n                                        continues = true;\r\n                                    } else {\r\n                                        continues = false;\r\n                                    }\r\n                                } while (confirmation.equals(\"Invalid\"));\r\n                            }\r\n                            else {\r\n                                continues = false;\r\n                            }\r\n                        } while (continues);\r\n\r\n                        String continueAddGenre;\r\n                        do {\r\n                            System.out.println(\"\\nDo you want add another new genre? (Y / N)\");\r\n                            System.out.print(\"Answer: \");\r\n                            String answer = sc.next();\r\n                            sc.nextLine();\r\n\r\n                            continueAddGenre = SystemClass.askForContinue(answer);\r\n                        } while (continueAddGenre.equals(\"Invalid\"));\r\n\r\n                        if (continueAddGenre.equals(\"Y\")) {\r\n                            continues = true;\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 3:\r\n                    do {\r\n                        int genreModified = 0;\r\n                        do {\r\n                            try {\r\n                                System.out.println(\"\\nSelect the genre you want to modify: \");\r\n                                genres = Genre.viewGenreList(1);\r\n                                System.out.print(\"\\nEnter the genre no (0 - Back): \");\r\n                                genreModified = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (genreModified >= 0 && genreModified <= genres.size()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                    error = true;\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid choice!\");\r\n                                sc.nextLine();\r\n                                error = true;\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (genreModified != 0) {\r\n                            Genre orgGenre = genres.get(genreModified - 1);\r\n                            Genre genre = new Genre(orgGenre.getGenreID(), orgGenre.getGenreName(), orgGenre.getPost(), orgGenre.getStatus());\r\n                            Name name = null;\r\n\r\n                            do {\r\n                                System.out.print(\"\\nEnter the new genre name (0 - Back): \");\r\n                                String editGenreName = sc.nextLine();\r\n\r\n                                if (editGenreName.equals(\"0\")) {\r\n                                    error = false;\r\n                                } else {\r\n                                    name = new Name(editGenreName);\r\n                                    name.capitalizeWords();\r\n\r\n                                    ResultSet result = null;\r\n                                    try {\r\n                                        result = DatabaseUtils.selectQueryById(\"genre_name\", \"genre\", null, null);\r\n                                    } catch (SQLException e) {\r\n                                        throw new RuntimeException(e);\r\n                                    }\r\n\r\n                                    String errorMessage = name.checkEditName(\"genre\", result, \"genre_name\", genre.getGenreName().getName());\r\n\r\n                                    if (errorMessage == null) {\r\n                                        error = false;\r\n                                        genre.setGenreName(name);\r\n\r\n                                        String confirmation;\r\n                                        do {\r\n                                            System.out.println(\"\\nDo you want to save the changes? (Y / N)\");\r\n                                            System.out.print(\"Answer: \");\r\n                                            String answer = sc.next();\r\n                                            sc.nextLine();\r\n\r\n                                            confirmation = SystemClass.askForContinue(answer);\r\n                                        } while (confirmation.equals(\"Invalid\"));\r\n\r\n                                        // Confirm that the genre is successfully modified\r\n                                        boolean success = false;\r\n                                        do {\r\n                                            if (confirmation.equals(\"Y\")) {\r\n                                                success = genre.modify();\r\n                                            } else {\r\n                                                success = true;\r\n                                                genre.setGenreName(orgGenre.getGenreName());\r\n                                                System.out.println(\"\\nThe changes have not been saved.\");\r\n                                            }\r\n\r\n                                            if (success == false) {\r\n                                                do {\r\n                                                    System.out.println(\"\\nDo you want to retry to modify the genre? (Y / N)\");\r\n                                                    System.out.print(\"Answer: \");\r\n                                                    String answer = sc.next();\r\n                                                    sc.nextLine();\r\n\r\n                                                    confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                                    if (confirmation.equals(\"Y\")) {\r\n                                                        continues = true;\r\n                                                    } else {\r\n                                                        continues = false;\r\n                                                    }\r\n                                                } while (confirmation.equals(\"Invalid\"));\r\n                                            }\r\n                                            else {\r\n                                                continues = false;\r\n                                            }\r\n                                        } while (continues);\r\n                                    } else {\r\n                                        System.out.println(errorMessage);\r\n                                        error = true;\r\n                                    }\r\n                                }\r\n                            } while (error);\r\n\r\n                            String continueModifyGenre;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want to continue to modify another genre? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer2 = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                continueModifyGenre = SystemClass.askForContinue(answer2);\r\n                            } while (continueModifyGenre.equals(\"Invalid\"));\r\n\r\n                            if (continueModifyGenre.equals(\"Y\")) {\r\n                                continues = true;\r\n                            } else {\r\n                                back = false;\r\n                                continues = false;\r\n                            }\r\n                        } else {\r\n                            back = false;\r\n                            continues = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 4:\r\n                    // Delere genre\r\n                    do {\r\n                        int genreDeleted = 0;\r\n                        do {\r\n                            try {\r\n                                System.out.println(\"\\nSelect the genre you want to delete: \");\r\n                                genres = Genre.viewGenreList(1);\r\n                                System.out.print(\"\\nEnter the genre no (0 - Back): \");\r\n                                genreDeleted = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (genreDeleted >= 0 && genreDeleted <= genres.size()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                    error = true;\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid choice!\");\r\n                                sc.nextLine();\r\n                                error = true;\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (genreDeleted != 0) {\r\n                            int post = genres.get(genreDeleted - 1).getPost();\r\n\r\n                            if (post == 0) {\r\n                                Genre genre = genres.get(genreDeleted - 1);\r\n                                String confirmation;\r\n                                do {\r\n                                    System.out.println(\"\\nAre you sure you want to delete this genre? (Y / N)\");\r\n                                    System.out.print(\"Answer: \");\r\n                                    String answer = sc.next();\r\n                                    sc.nextLine();\r\n\r\n                                    confirmation = SystemClass.askForContinue(answer);\r\n                                } while (confirmation.equals(\"Invalid\"));\r\n\r\n                                // Confirm that the genre is successfully deleted\r\n                                boolean success = false;\r\n                                do {\r\n                                    if (confirmation.equals(\"Y\")) {\r\n                                        success = genre.delete();\r\n                                    } else {\r\n                                        success = true;\r\n                                        System.out.println(\"\\nThe genre is safe :)\");\r\n                                    }\r\n\r\n                                    if (success == false) {\r\n                                        do {\r\n                                            System.out.println(\"\\nDo you want to retry to delete this genre? (Y / N)\");\r\n                                            System.out.print(\"Answer: \");\r\n                                            String answer = sc.next();\r\n                                            sc.nextLine();\r\n\r\n                                            confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                            if (confirmation.equals(\"Y\")) {\r\n                                                continues = true;\r\n                                            } else {\r\n                                                continues = false;\r\n                                            }\r\n                                        } while (confirmation.equals(\"Invalid\"));\r\n                                    }\r\n                                    else {\r\n                                        continues = false;\r\n                                    }\r\n                                } while (continues);\r\n\r\n                                String continueDeleteGenre;\r\n                                do {\r\n                                    System.out.println(\"\\nDo you want to continue to delete another genre? (Y / N)\");\r\n                                    System.out.print(\"Answer: \");\r\n                                    String answer2 = sc.next();\r\n                                    sc.nextLine();\r\n\r\n                                    continueDeleteGenre = SystemClass.askForContinue(answer2);\r\n                                } while (continueDeleteGenre.equals(\"Invalid\"));\r\n\r\n                                if (continueDeleteGenre.equals(\"Y\")) {\r\n                                    continues = true;\r\n                                } else {\r\n                                    continues = false;\r\n                                    back = false;\r\n                                }\r\n                            } else {\r\n                                System.out.println(\"Sorry, you cannot delete this genre. Please make sure there are no movie posts in this genre!\");\r\n                                continues = true;\r\n                            }\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n            }\r\n        } while (back == false);\r\n    }\r\n\r\n    private static void manageSchedule(Scanner sc) throws Exception {\r\n        boolean back = false;\r\n\r\n        do {\r\n            int choice = displayMenu(\"Schedule\", sc);\r\n            boolean error = true;\r\n            boolean continues = true;\r\n\r\n            switch (choice) {\r\n                case 0:\r\n                    back = true;\r\n                    break;\r\n                case 1:\r\n                    do {\r\n                        // Cinema\r\n                        int cinemaNo = 0;\r\n                        error = true;\r\n                        ArrayList<Cinema> cinemas = new ArrayList<>();\r\n                        do {\r\n                            try {\r\n                                System.out.print(\"\\nSelect the cinema you want to view the schedule (0 - Back): \");\r\n                                cinemas = Cinema.viewCinemaList(1);\r\n                                System.out.print(\"\\nEnter the cinema no: \");\r\n                                cinemaNo = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (cinemaNo >= 0 && cinemaNo <= cinemas.size()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid cinema no!\");\r\n                                sc.nextLine();\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (cinemaNo != 0) {\r\n                            TimeTable timeTable = TimeTable.acceptViewScheduleListInput(sc, cinemas.get(cinemaNo - 1));\r\n\r\n                            ArrayList<TimeTable> schedules = timeTable.viewSchedule();\r\n\r\n                            TimeTable.printing(schedules);\r\n\r\n                            String continueViewSchedule;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want view another schedule? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                continueViewSchedule = SystemClass.askForContinue(answer);\r\n                            } while (continueViewSchedule.equals(\"Invalid\"));\r\n\r\n                            if (continueViewSchedule.equals(\"Y\")) {\r\n                                continues = true;\r\n                            } else {\r\n                                continues = false;\r\n                                back = false;\r\n                            }\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 2:\r\n                    TimeTable newSchedule = new TimeTable();\r\n\r\n                    ArrayList<Movie> moviesAfterFiltered;\r\n                    int movieID = 1, hallID = 1;\r\n                    error = true;\r\n\r\n                    do {\r\n                        moviesAfterFiltered = Movie.viewMovieListByFilter(sc);  // return null means user select 0 (back), return empty ArrayList means no movie was found\r\n\r\n                        if (moviesAfterFiltered != null) {\r\n                            do {\r\n                                try {\r\n                                    System.out.print(\"\\nEnter the movie id (0 - Back): \");\r\n                                    movieID = sc.nextInt();\r\n                                    sc.nextLine();\r\n\r\n                                    if (movieID >= 0 && movieID <= moviesAfterFiltered.size()) {\r\n                                        error = false;\r\n                                    } else {\r\n                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                        error = true;\r\n                                    }\r\n                                } catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid movie id!\");\r\n                                    sc.nextLine();\r\n                                    error = true;\r\n                                }\r\n                            } while (error);\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                            break;\r\n                        }\r\n                    } while (movieID == 0 && moviesAfterFiltered != null);\r\n\r\n                    if (movieID != 0 && moviesAfterFiltered != null) {\r\n                        do {\r\n                            newSchedule.setMovie(moviesAfterFiltered.get(movieID - 1));\r\n\r\n                            // Cinema\r\n                            int cinemaNo = 0;\r\n                            error = true;\r\n                            ArrayList<Cinema> cinemas = new ArrayList<>();\r\n\r\n                            do {\r\n                                try {\r\n                                    System.out.print(\"\\nSelect the cinema you want to view the schedule: \");\r\n                                    cinemas = Cinema.viewCinemaList(1);\r\n                                    System.out.print(\"\\nEnter the cinema no: \");\r\n                                    cinemaNo = sc.nextInt();\r\n                                    sc.nextLine();\r\n\r\n                                    if (cinemaNo > 0 && cinemaNo <= cinemas.size()) {\r\n                                        error = false;\r\n                                    } else {\r\n                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                    }\r\n                                } catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid cinema no!\");\r\n                                    sc.nextLine();\r\n                                }\r\n                            } while (error);\r\n\r\n                            // Hall\r\n                            int hallNo = 0;\r\n                            error = true;\r\n                            ArrayList<Hall> halls = new ArrayList<>();\r\n                            do {\r\n                                try {\r\n                                    System.out.println(\"\\nSelect the hall: \");\r\n                                    halls = cinemas.get(cinemaNo - 1).getHallList(1);\r\n\r\n                                    for (int i = 0; i < halls.size(); i++) {\r\n                                        System.out.println((i + 1) + \". \" + halls.get(i).getHallName().getName());\r\n                                    }\r\n\r\n                                    System.out.print(\"\\nEnter the hall no: \");\r\n                                    hallNo = sc.nextInt();\r\n                                    sc.nextLine();\r\n\r\n                                    if (hallNo > 0 && hallNo <= halls.size()) {\r\n                                        error = false;\r\n                                    } else {\r\n                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                    }\r\n                                } catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid hall no!\");\r\n                                    sc.nextLine();\r\n                                }\r\n                            } while (error);\r\n\r\n                            newSchedule.setHall(halls.get(hallNo - 1));\r\n\r\n                            // Show Date\r\n                            error = true;\r\n                            String date = null;\r\n                            DateTime addDate = null;\r\n                            boolean validDate = false;\r\n                            do {\r\n                                System.out.print(\"\\nEnter movie show date (YYYY-MM-DD): \");\r\n                                date = sc.nextLine();\r\n\r\n                                if (date.trim().isEmpty()) {\r\n                                    System.out.println(\"Please enter the show date.\");\r\n                                } else {\r\n                                    try {\r\n                                        String[] parts = date.split(\"-\");\r\n                                        int year = Integer.parseInt(parts[0]);  // Java's built-in method for converting strings to integers (int type)\r\n                                        int month = Integer.parseInt(parts[1]);\r\n                                        int day = Integer.parseInt(parts[2]);\r\n\r\n                                        // 验证日期是否 valid\r\n                                        addDate = new DateTime(year, month, day);\r\n                                        validDate = addDate.isValidDate();\r\n\r\n                                        if (validDate == true) {\r\n                                            String errorMessage = addDate.checkLocalDate();\r\n\r\n                                            if (errorMessage == null) {\r\n                                                newSchedule.setShowDate(addDate);\r\n\r\n                                                if (movieID == 1) {  // 1 mean add the schedule for the future movie, thus need to check whether the show date later than the movie release date\r\n                                                    errorMessage = newSchedule.checkShowDate();\r\n                                                    if (errorMessage == null) {\r\n                                                        error = false;\r\n                                                    } else {\r\n                                                        System.out.println(errorMessage);\r\n                                                    }\r\n                                                }\r\n                                            } else {\r\n                                                System.out.println(errorMessage);\r\n                                            }\r\n                                        } else {\r\n                                            System.out.println(\"Please enter a valid date!\");\r\n                                            error = true;\r\n                                        }\r\n                                    } catch (Exception e) {\r\n                                        System.out.println(\"The date format entered in wrong!\");\r\n                                    }\r\n                                }\r\n                            } while (error);\r\n\r\n                            LocalTime[] selectedTimeSlots = newSchedule.availableTimeSlots(sc);\r\n                            newSchedule.setStartTime(selectedTimeSlots[0]);\r\n                            newSchedule.setEndTime(selectedTimeSlots[1]);\r\n\r\n                            // Add schedule\r\n                            String confirmation;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want add the new schedule for this movie? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                confirmation = SystemClass.askForContinue(answer);\r\n                            } while (confirmation.equals(\"Invalid\"));\r\n\r\n                            // Confirm that the schedule is successfully added\r\n                            boolean success;\r\n                            do {\r\n                                if (confirmation.equals(\"Y\")) {\r\n                                    success = newSchedule.add();\r\n                                } else {\r\n                                    success = true;\r\n                                    System.out.println(\"This schedule will not be added for the movie.\");\r\n                                }\r\n\r\n                                if (success == false) {\r\n                                    do {\r\n                                        System.out.println(\"\\nDo you want to retry to add the new schedule for this movie? (Y / N)\");\r\n                                        System.out.print(\"Answer: \");\r\n                                        String answer = sc.next();\r\n                                        sc.nextLine();\r\n\r\n                                        confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                        if (confirmation.equals(\"Y\")) {\r\n                                            continues = true;\r\n                                        } else {\r\n                                            continues = false;\r\n                                        }\r\n                                    } while (confirmation.equals(\"Invalid\"));\r\n                                }\r\n                                else {\r\n                                    continues = false;\r\n                                }\r\n                            } while (continues);\r\n\r\n                            String continueAddSchedule;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want add another new schedule for this movie? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                continueAddSchedule = SystemClass.askForContinue(answer);\r\n                            } while (continueAddSchedule.equals(\"Invalid\"));\r\n\r\n                            if (continueAddSchedule.equals(\"Y\")) {\r\n                                newSchedule = new TimeTable();\r\n                                continues = true;\r\n                            } else {\r\n                                continues = false;\r\n                                back = false;\r\n                            }\r\n                        } while (continues);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    // Modify Schedule\r\n                    error = true;\r\n                    int scheduleNo = 0;\r\n\r\n                    // Cinema\r\n                    int cinemaNo = 0;\r\n                    error = true;\r\n                    ArrayList<Cinema> cinemas = new ArrayList<>();\r\n\r\n                    do {\r\n                        try {\r\n                            System.out.print(\"\\nSelect the cinema you want to view the schedule: \");\r\n                            cinemas = Cinema.viewCinemaList(1);\r\n                            System.out.print(\"\\nEnter the cinema no (0 - Back): \");\r\n                            cinemaNo = sc.nextInt();\r\n                            sc.nextLine();\r\n\r\n                            if (cinemaNo >= 0 && cinemaNo <= cinemas.size()) {\r\n                                error = false;\r\n                            } else {\r\n                                System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                            }\r\n                        } catch (InputMismatchException e) {\r\n                            System.out.println(\"Please enter a valid cinema no!\");\r\n                            sc.nextLine();\r\n                        }\r\n                    } while (error);\r\n\r\n                    error = true;\r\n                    if (cinemaNo != 0) {\r\n                        TimeTable timeTable = TimeTable.acceptViewScheduleListInput(sc, cinemas.get(cinemaNo - 1));\r\n\r\n                        ArrayList<TimeTable> schedules = timeTable.viewSchedule();\r\n\r\n                        TimeTable.printing(schedules);\r\n\r\n                        if (!schedules.isEmpty()) {\r\n                            do {\r\n                                try {\r\n                                    System.out.print(\"\\nEnter the schedule no. you want to modify: \");\r\n                                    scheduleNo = sc.nextInt();\r\n                                    sc.nextLine();\r\n\r\n                                    if (scheduleNo > 0 && scheduleNo <= schedules.size()) {\r\n                                        error = false;\r\n                                    } else {\r\n                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                    }\r\n                                } catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid schedule no.\");\r\n                                    sc.nextLine();\r\n                                }\r\n                            } while (error);\r\n\r\n                            TimeTable modifySchedule = new TimeTable(schedules.get(scheduleNo - 1).getTimetableID(), schedules.get(scheduleNo - 1).getMovie(), schedules.get(scheduleNo - 1).getHall(), schedules.get(scheduleNo - 1).getShowDate(), schedules.get(scheduleNo - 1).getStartTime());\r\n\r\n                            error = true;\r\n                            int choice2 = 0;\r\n                            do {\r\n                                try {\r\n                                    System.out.println(\"\\nSelect the operation:\");\r\n                                    System.out.println(\"1. Modify the movie show time\");\r\n                                    System.out.println(\"2. Modify the movie show date\");\r\n                                    System.out.println(\"3. Modify the movie to be played\");\r\n                                    System.out.println(\"4. Modify the location of the movie to be played\");\r\n                                    System.out.print(\"\\nEnter your selection: \");\r\n                                    choice2 = sc.nextInt();\r\n                                    sc.nextLine();\r\n\r\n                                    if (choice2 <= 0 || choice2 > 4) {\r\n                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                    } else {\r\n                                        error = false;\r\n                                    }\r\n                                } catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid operation no.\");\r\n                                    sc.nextLine();\r\n                                }\r\n                            } while (error);\r\n\r\n                            switch (choice2) {\r\n                                case 1:\r\n                                    // 时间调整\r\n                                    LocalTime[] selectedTimeSlots = modifySchedule.availableTimeSlots(sc);\r\n                                    modifySchedule.setStartTime(selectedTimeSlots[0]);\r\n                                    modifySchedule.setEndTime(selectedTimeSlots[1]);\r\n\r\n                                    break;\r\n                                case 2:\r\n                                    // 日期调整\r\n                                    error = true;\r\n                                    String date;\r\n                                    DateTime modifyDate = null;  // Store the old show date\r\n                                    boolean validDate;\r\n\r\n                                    do {\r\n                                        System.out.print(\"\\nEnter the new movie show date (YYYY-MM-DD): \");\r\n                                        date = sc.nextLine();\r\n\r\n                                        if (date.trim().isEmpty()) {\r\n                                            System.out.println(\"Please enter the show date.\");\r\n                                        } else {\r\n                                            try {\r\n                                                String[] parts = date.split(\"-\");\r\n                                                int year = Integer.parseInt(parts[0]);  // Java's built-in method for converting strings to integers (int type)\r\n                                                int month = Integer.parseInt(parts[1]);\r\n                                                int day = Integer.parseInt(parts[2]);\r\n\r\n                                                // 验证日期是否 valid\r\n                                                modifyDate = new DateTime(year, month, day);\r\n                                                validDate = modifyDate.isValidDate();\r\n\r\n                                                if (validDate == true) {\r\n                                                    String errorMessage = modifyDate.checkLocalDate();\r\n\r\n                                                    if (errorMessage == null) {\r\n                                                        modifySchedule.setShowDate(modifyDate);\r\n\r\n                                                        errorMessage = modifySchedule.checkShowDate();\r\n                                                        if (errorMessage == null) {\r\n                                                            error = false;\r\n                                                        } else {\r\n                                                            System.out.println(errorMessage);\r\n                                                        }\r\n                                                    } else {\r\n                                                        System.out.println(errorMessage);\r\n                                                        error = true;\r\n                                                    }\r\n                                                } else {\r\n                                                    System.out.println(\"Please enter a valid date!\");\r\n                                                    error = true;\r\n                                                }\r\n                                            } catch (Exception e) {\r\n                                                System.out.println(\"The date format entered in wrong!\");\r\n                                            }\r\n                                        }\r\n                                    } while (error);\r\n\r\n                                    // 时间调整\r\n                                    selectedTimeSlots = modifySchedule.availableTimeSlots(sc);\r\n                                    modifySchedule.setStartTime(selectedTimeSlots[0]);\r\n                                    modifySchedule.setEndTime(selectedTimeSlots[1]);\r\n\r\n                                    break;\r\n                                case 3:\r\n                                    // Modify the movie to be played\r\n                                    movieID = 1;\r\n\r\n                                    do {\r\n                                        moviesAfterFiltered = Movie.viewMovieListByFilter(sc);\r\n\r\n                                        if (moviesAfterFiltered != null) {\r\n                                            do {\r\n                                                try {\r\n                                                    System.out.print(\"\\nEnter the movie id: \");\r\n                                                    movieID = sc.nextInt();\r\n                                                    sc.nextLine();\r\n\r\n                                                    if (movieID > 0 && movieID <= moviesAfterFiltered.size()) {\r\n                                                        error = false;\r\n                                                    } else {\r\n                                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                                        error = true;\r\n                                                    }\r\n                                                } catch (InputMismatchException e) {\r\n                                                    System.out.println(\"Please enter a valid movie id!\");\r\n                                                    sc.nextLine();\r\n                                                    error = true;\r\n                                                }\r\n                                            } while (error);\r\n                                        }\r\n                                    } while (movieID == 0 && moviesAfterFiltered != null);\r\n\r\n                                    if (moviesAfterFiltered != null) {\r\n                                        modifySchedule.setMovie(moviesAfterFiltered.get(movieID - 1));\r\n\r\n                                        // 日期调整\r\n                                        error = true;\r\n                                        modifyDate = null;  // Store the old show date\r\n\r\n                                        do {\r\n                                            System.out.print(\"\\nEnter the new movie show date (YYYY-MM-DD): \");\r\n                                            date = sc.nextLine();\r\n\r\n                                            if (date.trim().isEmpty()) {\r\n                                                System.out.println(\"Please enter the show date.\");\r\n                                            } else {\r\n                                                try {\r\n                                                    String[] parts = date.split(\"-\");\r\n                                                    int year = Integer.parseInt(parts[0]);  // Java's built-in method for converting strings to integers (int type)\r\n                                                    int month = Integer.parseInt(parts[1]);\r\n                                                    int day = Integer.parseInt(parts[2]);\r\n\r\n                                                    // 验证日期是否 valid\r\n                                                    modifyDate = new DateTime(year, month, day);\r\n                                                    validDate = modifyDate.isValidDate();\r\n\r\n                                                    if (validDate == true) {\r\n                                                        String errorMessage = modifyDate.checkLocalDate();\r\n\r\n                                                        if (errorMessage == null) {\r\n                                                            modifySchedule.setShowDate(modifyDate);\r\n\r\n                                                            errorMessage = modifySchedule.checkShowDate();\r\n                                                            if (errorMessage == null) {\r\n                                                                error = false;\r\n                                                            } else {\r\n                                                                System.out.println(errorMessage);\r\n                                                            }\r\n                                                            error = false;\r\n                                                        } else {\r\n                                                            System.out.println(errorMessage);\r\n                                                            error = true;\r\n                                                        }\r\n                                                    } else {\r\n                                                        System.out.println(\"Please enter a valid date!\");\r\n                                                        error = true;\r\n                                                    }\r\n                                                } catch (Exception e) {\r\n                                                    System.out.println(\"The date format entered in wrong!\");\r\n                                                }\r\n                                            }\r\n                                        } while (error);\r\n\r\n                                        // 时间调整\r\n                                        selectedTimeSlots = modifySchedule.availableTimeSlots(sc);\r\n                                        modifySchedule.setStartTime(selectedTimeSlots[0]);\r\n                                        modifySchedule.setEndTime(selectedTimeSlots[1]);\r\n                                    }\r\n                                    break;\r\n                                case 4:\r\n                                    // Cinema\r\n                                    cinemaNo = 0;\r\n                                    error = true;\r\n                                    cinemas = new ArrayList<>();\r\n\r\n                                    do {\r\n                                        try {\r\n                                            System.out.print(\"\\nSelect the cinema you want to add the schedule: \");\r\n                                            cinemas = Cinema.viewCinemaList(1);\r\n                                            System.out.print(\"\\nEnter the cinema no: \");\r\n                                            cinemaNo = sc.nextInt();\r\n                                            sc.nextLine();\r\n\r\n                                            if (cinemaNo > 0 && cinemaNo <= cinemas.size()) {\r\n                                                error = false;\r\n                                            } else {\r\n                                                System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                            }\r\n                                        } catch (InputMismatchException e) {\r\n                                            System.out.println(\"Please enter a valid cinema no!\");\r\n                                            sc.nextLine();\r\n                                        }\r\n                                    } while (error);\r\n\r\n                                    // Receive the input of hall and show date\r\n                                    timeTable = TimeTable.acceptViewScheduleListInput(sc, cinemas.get(cinemaNo - 1));\r\n\r\n                                    modifySchedule.setHall(timeTable.getHall());\r\n                                    modifySchedule.setShowDate(timeTable.getShowDate());\r\n\r\n                                    selectedTimeSlots = modifySchedule.availableTimeSlots(sc);\r\n                                    modifySchedule.setStartTime(selectedTimeSlots[0]);\r\n                                    modifySchedule.setEndTime(selectedTimeSlots[1]);\r\n\r\n                                    break;\r\n                            }\r\n\r\n                            // Modify schedule\r\n                            String confirmation;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want to modify this schedule? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                confirmation = SystemClass.askForContinue(answer);\r\n                            } while (confirmation.equals(\"Invalid\"));\r\n\r\n                            // Confirm that the schedule is successfully modified\r\n                            boolean success = false;\r\n                            do {\r\n                                if (confirmation.equals(\"Y\")) {\r\n                                    success = modifySchedule.modify();\r\n                                } else {\r\n                                    success = true;\r\n                                    System.out.println(\"This schedule will not be modified.\");\r\n                                }\r\n\r\n                                if (success == false) {\r\n                                    do {\r\n                                        System.out.println(\"\\nDo you want to retry to modify the hall? (Y / N)\");\r\n                                        System.out.print(\"Answer: \");\r\n                                        String answer = sc.next();\r\n                                        sc.nextLine();\r\n\r\n                                        confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                        if (confirmation.equals(\"Y\")) {\r\n                                            continues = true;\r\n                                        } else {\r\n                                            continues = false;\r\n                                        }\r\n                                    } while (confirmation.equals(\"Invalid\"));\r\n                                }\r\n                                else {\r\n                                    continues = false;\r\n                                }\r\n                            } while (continues);\r\n                        }\r\n                    }\r\n                    back = false;\r\n                    break;\r\n                case 4:\r\n                    // Cinema\r\n                    cinemaNo = 0;\r\n                    error = true;\r\n                    cinemas = new ArrayList<>();\r\n\r\n                    do {\r\n                        try {\r\n                            System.out.print(\"\\nSelect the cinema you want to view the schedule: \");\r\n                            cinemas = Cinema.viewCinemaList(1);\r\n                            System.out.print(\"\\nEnter the cinema no (0 - Back): \");\r\n                            cinemaNo = sc.nextInt();\r\n                            sc.nextLine();\r\n\r\n                            if (cinemaNo >= 0 && cinemaNo <= cinemas.size()) {\r\n                                error = false;\r\n                            } else {\r\n                                System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                            }\r\n                        } catch (InputMismatchException e) {\r\n                            System.out.println(\"Please enter a valid cinema no!\");\r\n                            sc.nextLine();\r\n                        }\r\n                    } while (error);\r\n\r\n                    if (cinemaNo != 0) {\r\n                        TimeTable timeTable = TimeTable.acceptViewScheduleListInput(sc, cinemas.get(cinemaNo - 1));\r\n\r\n                        do {\r\n                            ArrayList<TimeTable> schedules = timeTable.viewSchedule();\r\n\r\n                            TimeTable.printing(schedules);\r\n\r\n                            if (!schedules.isEmpty()) {\r\n                                error = true;\r\n                                scheduleNo = 1;\r\n                                String confirmation;\r\n\r\n                                do {\r\n                                    try {\r\n                                        System.out.print(\"\\nEnter the schedule no. you want to delete: \");\r\n                                        scheduleNo = sc.nextInt();\r\n                                        sc.nextLine();\r\n\r\n                                        if (scheduleNo > 0 && scheduleNo <= schedules.size()) {\r\n                                            error = false;\r\n                                        } else {\r\n                                            System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                        }\r\n                                    } catch (InputMismatchException e) {\r\n                                        System.out.println(\"Please enter a valid schedule no.\");\r\n                                        sc.nextLine();\r\n                                    }\r\n                                } while (error);\r\n\r\n                                TimeTable deleteSchedule = new TimeTable(schedules.get(scheduleNo - 1).getTimetableID(), schedules.get(scheduleNo - 1).getMovie(), schedules.get(scheduleNo - 1).getHall(), schedules.get(scheduleNo - 1).getShowDate(), schedules.get(scheduleNo - 1).getStartTime());\r\n\r\n                                do {\r\n                                    System.out.println(\"\\nDo you want to delete this schedule? (Y / N)\");\r\n                                    System.out.print(\"Answer: \");\r\n                                    String answer = sc.next();\r\n                                    sc.nextLine();\r\n\r\n                                    confirmation = SystemClass.askForContinue(answer);\r\n                                } while (confirmation.equals(\"Invalid\"));\r\n\r\n                                // Confirm that the schedule is successfully deleted\r\n                                boolean success;\r\n                                do {\r\n                                    if (confirmation.equals(\"Y\")) {\r\n                                        success = deleteSchedule.delete();\r\n                                    } else {\r\n                                        success = true;\r\n                                        System.out.println(\"\\nThe schedule is saved.\");\r\n                                    }\r\n\r\n                                    if (success == false) {\r\n                                        do {\r\n                                            System.out.println(\"\\nDo you want to retry to delete this schedule? (Y / N)\");\r\n                                            System.out.print(\"Answer: \");\r\n                                            String answer = sc.next();\r\n                                            sc.nextLine();\r\n\r\n                                            confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                            if (confirmation.equals(\"Y\")) {\r\n                                                continues = true;\r\n                                            } else {\r\n                                                continues = false;\r\n                                            }\r\n                                        } while (confirmation.equals(\"Invalid\"));\r\n                                    }\r\n                                    else {\r\n                                        continues = false;\r\n                                    }\r\n                                } while (continues);\r\n\r\n                                String continueDeleteSchedule;\r\n                                do {\r\n                                    System.out.println(\"\\nDo you want delete another schedule? (Y / N)\");\r\n                                    System.out.print(\"Answer: \");\r\n                                    String answer = sc.next();\r\n                                    sc.nextLine();\r\n\r\n                                    continueDeleteSchedule = SystemClass.askForContinue(answer);\r\n                                } while (continueDeleteSchedule.equals(\"Invalid\"));\r\n\r\n                                if (continueDeleteSchedule.equals(\"Y\")) {\r\n                                    continues = true;\r\n                                } else {\r\n                                    continues = false;\r\n                                }\r\n                            } else {\r\n                                continues = false;\r\n                            }\r\n                        } while (continues);\r\n                    }\r\n                    back = false;\r\n                    break;\r\n            }\r\n        } while (back == false);\r\n    }\r\n\r\n    public void registration(Scanner sc) {\r\n\r\n    }\r\n\r\n    private static int displayMenu(String propertyName, Scanner sc){\r\n        boolean error = true;\r\n        int choice = 0;\r\n\r\n        do {\r\n            try {\r\n                System.out.println(\"\\nSelect the operation:\");\r\n                System.out.println(\"1. View \" + propertyName);\r\n                System.out.println(\"2. Add \" + propertyName);\r\n                System.out.println(\"3. Modify \" + propertyName);\r\n                System.out.println(\"4. Delete \" + propertyName);\r\n                System.out.print(\"\\nEnter your selection (0 - Back): \");\r\n                choice = sc.nextInt();\r\n                sc.nextLine();\r\n\r\n                if (choice >= 0 && choice <= 4) {\r\n                    error = false;\r\n                }\r\n                else {\r\n                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                }\r\n            }\r\n            catch (InputMismatchException e) {\r\n                System.out.println(\"Please enter a valid choice!\");\r\n                sc.nextLine();\r\n            }\r\n        } while (error);\r\n\r\n        return choice;\r\n    }\r\n\r\n    public static String askForContinue(String answer){\r\n        answer = answer.toUpperCase();\r\n\r\n        if (answer.equals(\"Y\") || answer.equals(\"YES\")) {\r\n            return \"Y\";\r\n        }\r\n        else if (answer.equals(\"N\") || answer.equals(\"NO\")) {\r\n            return \"N\";\r\n        }\r\n        else {\r\n            System.out.println(\"Please enter Y / N.\");\r\n            return \"Invalid\";\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Driver/SystemClass.java b/Driver/SystemClass.java
--- a/Driver/SystemClass.java	(revision b88829f35ac4a26db87027d0772291d3eec62cca)
+++ b/Driver/SystemClass.java	(date 1694857525289)
@@ -1,5 +1,6 @@
 package Driver;
 
+import Cinema_Management.AddressUtils;
 import Database.DatabaseUtils;
 import Cinema_Management.Address;
 import Cinema_Management.Cinema;
@@ -94,25 +95,25 @@
                                 LocalDate oneWeekAgo = currentDate.minusWeeks(1);
 
                                 System.out.println("\nOpening This Week");
-                                moviesAfterFiltered = Movie.showMovieListAfterFiltered(oneWeekAgo, currentDate, 1);
+                                moviesAfterFiltered = MovieUtils.showMovieListAfterFiltered(oneWeekAgo, currentDate, 1);
                                 break;
                             case 2:
                                 LocalDate oneMonthAgo = currentDate.minusMonths(1);
 
                                 System.out.println("\nOpening This Month");
-                                moviesAfterFiltered = Movie.showMovieListAfterFiltered(oneMonthAgo, currentDate, 1);
+                                moviesAfterFiltered = MovieUtils.showMovieListAfterFiltered(oneMonthAgo, currentDate, 1);
                                 break;
                             case 3:
                                 LocalDate threeMonthAgo = currentDate.minusMonths(3);
 
                                 System.out.println("\nRelease within 3 months");
-                                moviesAfterFiltered = Movie.showMovieListAfterFiltered(threeMonthAgo, currentDate, 1);
+                                moviesAfterFiltered = MovieUtils.showMovieListAfterFiltered(threeMonthAgo, currentDate, 1);
                                 break;
                             case 4:
                                 LocalDate comingSoon = currentDate.plusDays(1);
 
                                 System.out.println("\nComing Soon");
-                                moviesAfterFiltered = Movie.showMovieListAfterFiltered(comingSoon, null, 1);
+                                moviesAfterFiltered = MovieUtils.showMovieListAfterFiltered(comingSoon, null, 1);
                                 break;
                         }
 
@@ -506,7 +507,7 @@
                             do {
                                 try {
                                     System.out.println("\nSelect the state: ");
-                                    Address.viewStateList();
+                                    AddressUtils.viewStateList();
                                     System.out.print("\nEnter your selection: ");
                                     stateSelected = sc.nextInt();
                                     sc.nextLine();
@@ -523,13 +524,13 @@
                                 }
                             } while (error);
 
-                            String stateName = Address.getStateName(stateSelected - 1);
+                            String stateName = AddressUtils.getStateName(stateSelected - 1);
 
                             int citySelected = 0;
                             do {
                                 try {
                                     System.out.println("\nSelect the city: ");
-                                    int count = Address.viewCityList(stateSelected - 1);
+                                    int count = AddressUtils.viewCityList(stateSelected - 1);
                                     System.out.print("\nEnter your selection: ");
                                     citySelected = sc.nextInt();
                                     sc.nextLine();
@@ -546,13 +547,13 @@
                                 }
                             } while (error);
 
-                            String cityName = Address.getCityName(stateName, citySelected - 1);
+                            String cityName = AddressUtils.getCityName(stateName, citySelected - 1);
 
                             int postcodeSelected = 0;
                             do {
                                 try {
                                     System.out.println("\nSelect the city: ");
-                                    int count = Address.viewPostcodeList(cityName);
+                                    int count = AddressUtils.viewPostcodeList(cityName);
                                     System.out.print("\nEnter your selection: ");
                                     postcodeSelected = sc.nextInt();
                                     sc.nextLine();
@@ -569,7 +570,7 @@
                                 }
                             } while (error);
 
-                            String postcode = Address.getPostcodeSelected(cityName, postcodeSelected - 1);
+                            String postcode = AddressUtils.getPostcodeSelected(cityName, postcodeSelected - 1);
 
                             String streetName;
                             do {
@@ -815,7 +816,7 @@
                                             do {
                                                 try {
                                                     System.out.println("\nSelect the state: ");
-                                                    Address.viewStateList();
+                                                    AddressUtils.viewStateList();
                                                     System.out.print("\nEnter your selection: ");
                                                     stateSelected = sc.nextInt();
                                                     sc.nextLine();
@@ -832,13 +833,13 @@
                                                 }
                                             } while (error);
 
-                                            String stateName = Address.getStateName(stateSelected - 1);
+                                            String stateName = AddressUtils.getStateName(stateSelected - 1);
 
                                             int citySelected = 0;
                                             do {
                                                 try {
                                                     System.out.println("\nSelect the city: ");
-                                                    int count = Address.viewCityList(stateSelected - 1);
+                                                    int count = AddressUtils.viewCityList(stateSelected - 1);
                                                     System.out.print("\nEnter your selection: ");
                                                     citySelected = sc.nextInt();
                                                     sc.nextLine();
@@ -855,13 +856,13 @@
                                                 }
                                             } while (error);
 
-                                            String cityName = Address.getCityName(stateName, citySelected - 1);
+                                            String cityName = AddressUtils.getCityName(stateName, citySelected - 1);
 
                                             int postcodeSelected = 0;
                                             do {
                                                 try {
                                                     System.out.println("\nSelect the city: ");
-                                                    int count = Address.viewPostcodeList(cityName);
+                                                    int count = AddressUtils.viewPostcodeList(cityName);
                                                     System.out.print("\nEnter your selection: ");
                                                     postcodeSelected = sc.nextInt();
                                                     sc.nextLine();
@@ -878,7 +879,7 @@
                                                 }
                                             } while (error);
 
-                                            String postcode = Address.getPostcodeSelected(cityName, postcodeSelected - 1);
+                                            String postcode = AddressUtils.getPostcodeSelected(cityName, postcodeSelected - 1);
 
                                             String streetName;
                                             do {
@@ -1625,7 +1626,7 @@
                     // View Movie
                     do {
                         int choice1 = 0;
-                        ArrayList<Movie> moviesAfterFiltered = Movie.showMovieListAfterFiltered(null, null, 1);
+                        ArrayList<Movie> moviesAfterFiltered = MovieUtils.showMovieListAfterFiltered(null, null, 1);
 
                         do {
                             try {
@@ -1814,33 +1815,33 @@
                         // Movie Language
                         String[] languages = {"English", "Chinese", "Japanese", "Korean", "German", "Italian", "Spanish", "Cantonese", "French", "Russian", "Arabic", "Hindi", "Tamil"};
 
-                        String mvLanguage = Movie.getMultipleChosens(sc, languages, "languages");
+                        String mvLanguage = MovieUtils.getMultipleChosens(sc, languages, "languages");
                         newMovie.setLang(mvLanguage);
 
                         // Movie Director
-                        String mvDirector = Movie.getMultipleValues(sc, "director", "directors");
+                        String mvDirector = MovieUtils.getMultipleValues(sc, "director", "directors");
                         newMovie.setDirector(mvDirector);
 
                         // Movie Writter
-                        String mvWritter = Movie.getMultipleValues(sc, "writter", "writters");
+                        String mvWritter = MovieUtils.getMultipleValues(sc, "writter", "writters");
                         newMovie.setWritter(mvWritter);
 
                         // Movie Starring
-                        String mvStarring = Movie.getMultipleValues(sc, "starring", "starrings");
+                        String mvStarring = MovieUtils.getMultipleValues(sc, "starring", "starrings");
                         newMovie.setStarring(mvStarring);
 
                         // Movie Music Provider
-                        String mvMusicProvider = Movie.getMultipleValues(sc, "music provider", "music prodivers");
+                        String mvMusicProvider = MovieUtils.getMultipleValues(sc, "music provider", "music prodivers");
                         newMovie.setMusicProvider(mvMusicProvider);
 
                         // Movie Country
                         String[] countries = {"United States", "United Kingdom", "Canada", "China", "Taiwan", "Malaysia", "Singapore", "Japan", "North Korea", "Italy", "Hong Kong", "France", "Russia", "India"};
 
-                        String mvCountry = Movie.getMultipleChosens(sc, countries, "countries");
+                        String mvCountry = MovieUtils.getMultipleChosens(sc, countries, "countries");
                         newMovie.setCountry(mvCountry);
 
                         // Movie Basic Ticket Price
-                        double mvBasicTicketPrice = Movie.getTicketPrice(sc, "basic");
+                        double mvBasicTicketPrice = MovieUtils.getTicketPrice(sc, "basic");
                         newMovie.setBasicTicketPrice(mvBasicTicketPrice);
 
                         // Movie Meta Description
@@ -1925,7 +1926,7 @@
 
                     do {
                         System.out.println("\nSelect the movie you want to modify: ");
-                        moviesAfterFiltered = Movie.showMovieListAfterFiltered(null, null, 1);
+                        moviesAfterFiltered = MovieUtils.showMovieListAfterFiltered(null, null, 1);
 
                         do {
                             try {
@@ -2156,39 +2157,39 @@
                                         // Movie Language
                                         String[] languages = {"English", "Chinese", "Japanese", "Korean", "German", "Italian", "Spanish", "Cantonese", "French", "Russian", "Arabic", "Hindi", "Tamil"};
 
-                                        String editMvLanguage = movie.getMultipleChosens(sc, languages, "languages");
+                                        String editMvLanguage = MovieUtils.getMultipleChosens(sc, languages, "languages");
                                         movie.setLang(editMvLanguage);
                                         break;
                                     case 6:
                                         // Movie Director
-                                        String editMvDirector = movie.getMultipleValues(sc, "director", "directors");
+                                        String editMvDirector = MovieUtils.getMultipleValues(sc, "director", "directors");
                                         movie.setDirector(editMvDirector);
                                         break;
                                     case 7:
                                         // Movie Writter
-                                        String editMvWritter = movie.getMultipleValues(sc, "writter", "writters");
+                                        String editMvWritter = MovieUtils.getMultipleValues(sc, "writter", "writters");
                                         movie.setWritter(editMvWritter);
                                         break;
                                     case 8:
                                         // Movie Starring
-                                        String editMvStarring = movie.getMultipleValues(sc, "starring", "starrings");
+                                        String editMvStarring = MovieUtils.getMultipleValues(sc, "starring", "starrings");
                                         movie.setStarring(editMvStarring);
                                         break;
                                     case 9:
                                         // Movie Music Provider
-                                        String editMvMusicProvider = movie.getMultipleValues(sc, "music provider", "music prodivers");
+                                        String editMvMusicProvider = MovieUtils.getMultipleValues(sc, "music provider", "music prodivers");
                                         movie.setMusicProvider(editMvMusicProvider);
                                         break;
                                     case 10:
                                         // Movie Country
                                         String[] countries = {"United States", "United Kingdom", "Canada", "China", "Taiwan", "Malaysia", "Singapore", "Japan", "North Korea", "Italy", "Hong Kong", "France", "Russia", "India"};
 
-                                        String editMvCountry = movie.getMultipleChosens(sc, countries, "countries");
+                                        String editMvCountry = MovieUtils.getMultipleChosens(sc, countries, "countries");
                                         movie.setCountry(editMvCountry);
                                         break;
                                     case 11:
                                         // Movie Basic Ticket Price
-                                        double editMvBasicTicketPrice = Movie.getTicketPrice(sc, "basic");
+                                        double editMvBasicTicketPrice = MovieUtils.getTicketPrice(sc, "basic");
                                         movie.setBasicTicketPrice(editMvBasicTicketPrice);
                                         System.out.println(movie.getBasicTicketPrice());
                                         break;
@@ -2222,7 +2223,7 @@
                     movieID = 0;
                     do {
                         System.out.println("\nSelect the movie you want to delete: ");
-                        moviesAfterFiltered = Movie.showMovieListAfterFiltered(null, null, 1);
+                        moviesAfterFiltered = MovieUtils.showMovieListAfterFiltered(null, null, 1);
 
                         do {
                             try {
@@ -2353,7 +2354,7 @@
 
                     if (genreSelected != 0) {
                         Genre viewGenre = genres.get(genreSelected - 1);
-                        viewGenre.view();
+                        viewGenre.viewGenreDetails();
                     }
                     back = false;
                     break;
@@ -2744,7 +2745,7 @@
                     error = true;
 
                     do {
-                        moviesAfterFiltered = Movie.viewMovieListByFilter(sc);  // return null means user select 0 (back), return empty ArrayList means no movie was found
+                        moviesAfterFiltered = MovieUtils.viewMovieListByFilter(sc);  // return null means user select 0 (back), return empty ArrayList means no movie was found
 
                         if (moviesAfterFiltered != null) {
                             do {
@@ -3095,7 +3096,7 @@
                                     movieID = 1;
 
                                     do {
-                                        moviesAfterFiltered = Movie.viewMovieListByFilter(sc);
+                                        moviesAfterFiltered = MovieUtils.viewMovieListByFilter(sc);
 
                                         if (moviesAfterFiltered != null) {
                                             do {
Index: Genre_Management/GenreValidator.java
===================================================================
diff --git a/Genre_Management/GenreValidator.java b/Genre_Management/GenreValidator.java
deleted file mode 100644
--- a/Genre_Management/GenreValidator.java	(revision b88829f35ac4a26db87027d0772291d3eec62cca)
+++ /dev/null	(revision b88829f35ac4a26db87027d0772291d3eec62cca)
@@ -1,89 +0,0 @@
-package Genre_Management;
-
-import Database.DatabaseUtils;
-
-import java.sql.ResultSet;
-
-public class GenreValidator {
-    private GenreValidator(){
-    }
-
-    public static String checkGenreName(String genreName) throws Exception{
-        if (genreName.trim().isEmpty()) {
-            return "Please enter the genre name.";
-        }
-        else {
-            boolean duplicateName = checkDuplicateGenreName(genreName);
-            if(duplicateName == true) {
-                return "Same genre name detected.";
-            }
-            else{
-                return null;
-            }
-        }
-    }
-
-    public static boolean checkDuplicateGenreName(String mvName) throws Exception{
-        try {
-            ResultSet result = DatabaseUtils.selectQueryById("genre_name", "genre", null, null);
-
-            while (result.next()) {
-                String name = result.getString("genre_name");
-
-                if (mvName.equals(name)) {
-                    result.close();
-                    return true;
-                }
-            }
-            result.close();
-
-            return false;
-        }
-        catch (Exception e) {
-            throw new RuntimeException(e);
-        }
-    }
-
-    // For Edit Genre
-    public static String checkEditGenreName(String genreName, String orgGenreName) throws Exception{
-        if (genreName.trim().isEmpty()) {
-            return "Please enter the genre name.";
-        }
-        else {
-            boolean duplicateName = checkEditDuplicateName(genreName, orgGenreName);
-            if(duplicateName == true) {
-                return "Same genre name detected.";
-            }
-            else{
-                return null;
-            }
-        }
-    }
-
-    public static boolean checkEditDuplicateName(String genreName, String orgGenreName) throws Exception{
-        try {
-            ResultSet result = DatabaseUtils.selectQueryById("genre_name", "genre", null, null);
-
-            while (result.next()) {
-                String name = result.getString("genre_name");
-
-                if (genreName.equals(name)) {
-                    if (genreName.equals(orgGenreName)) {
-                        result.close();
-                        return false;
-                    }
-                    else {
-                        result.close();
-                        return true;
-                    }
-                }
-            }
-            result.close();
-
-            return false;
-        }
-        catch (Exception e) {
-            throw new RuntimeException(e);
-        }
-    }
-}
Index: Hall_Management/Hall.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Hall_Management;\r\n\r\nimport Database.DatabaseUtils;\r\nimport Driver.Name;\r\nimport Seat_Management.Seat;\r\n\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\nimport java.util.InputMismatchException;\r\nimport java.util.Scanner;\r\n\r\npublic class Hall {\r\n    private int hallID;\r\n    private Name hallName;\r\n    private String hallType;\r\n    private int hallCapacity;\r\n    private int status;\r\n    private ArrayList<Seat> seats;\r\n\r\n    // Constructor\r\n    public Hall(){\r\n    }\r\n\r\n    public Hall(Name hallName, String hallType){\r\n        this.hallName = hallName;\r\n        this.hallType = hallType;\r\n        calHallCapacity();\r\n    }\r\n\r\n    public Hall(int hallID, Name hallName, String hallType){\r\n        this.hallID = hallID;\r\n        this.hallName = hallName;\r\n        this.hallType = hallType;\r\n        calHallCapacity();\r\n    }\r\n\r\n    public void calHallCapacity() {\r\n        if (hallType.equals(\"STANDARD\")) {\r\n            hallCapacity = 64;\r\n        }\r\n        else if (hallType.equals(\"3D\")) {\r\n            hallCapacity = 32;\r\n        }\r\n    }\r\n\r\n    // Method\r\n    public void viewHallDetails(){\r\n        System.out.printf(\"\\nHall Detail:\\n\");\r\n        System.out.println(\"Hall Name: \" + getHallName().getName());\r\n        System.out.println(\"Hall Type: \" + getHallType() + \" HALL\");\r\n        System.out.println(\"Hall Capacity: \" + getHallCapacity());\r\n    }\r\n\r\n    public int modifyHallDetails(Scanner sc) {\r\n        boolean error = true;\r\n\r\n        do {\r\n            int count = 1;\r\n            try {\r\n                System.out.printf(\"\\nHall Detail:\\n\");\r\n                System.out.println(count + \". Hall Name: \" + getHallName().getName());\r\n                count++;\r\n                System.out.println(count + \". Hall Type: \" + getHallType() + \" HALL\");\r\n                count++;\r\n                System.out.println(count + \". Hall Capacity: \" + getHallCapacity() + \" (cannot be modified)\");\r\n                count++;\r\n                System.out.println(count + \". Manage Seats Status\");\r\n\r\n                System.out.print(\"\\nEnter the serial number of the hall information you want to change (0 - Stop): \");\r\n                int serialNum = sc.nextInt();\r\n                sc.nextLine();\r\n\r\n                if (serialNum < 0 || serialNum > count) {\r\n                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                    error = true;\r\n                } else {\r\n                    return serialNum;\r\n                }\r\n            }\r\n            catch (InputMismatchException e) {\r\n                System.out.println(\"Please enter a valid choice!\");\r\n                sc.nextLine();\r\n                error = true;\r\n            }\r\n        } while (error);\r\n\r\n        return 0;\r\n    }\r\n\r\n    public boolean modifyHall() throws SQLException {\r\n        int rowAffected = 0;\r\n\r\n        try {\r\n            String updateSql = \"UPDATE `hall` SET `hall_name`= ?, `hall_type`= ?, `hall_capacity`= ? WHERE hall_id = ?\";\r\n            Object[] params = {getHallName().getName(), getHallType(), getHallCapacity(), getHallID()};\r\n            rowAffected = DatabaseUtils.updateQuery(updateSql, params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (rowAffected > 0) {\r\n            System.out.println(\"\\nThe changes have been saved.\");\r\n            return true;\r\n        } else {\r\n            System.out.println(\"\\nSomething went wrong...\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean deleteHall() throws SQLException {\r\n        int rowAffected = 0;\r\n\r\n        try {\r\n            Object[] params = {getHallID()};\r\n            rowAffected = DatabaseUtils.deleteQueryById(\"hall\", \"hall_status\", \"hall_id\", params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (rowAffected > 0) {\r\n            System.out.println(\"\\nThe hall has been deleted.\");\r\n            return true;\r\n        } else {\r\n            System.out.println(\"\\nSomething went wrong...\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Setter\r\n    public void setHallID(int hallID) {\r\n        this.hallID = hallID;\r\n    }\r\n\r\n    public void setHallName(Name hallName) {\r\n        this.hallName = hallName;\r\n    }\r\n\r\n    public void setHallType(String hallType) {\r\n        this.hallType = hallType;\r\n        calHallCapacity();\r\n    }\r\n\r\n    public void setStatus(int status) {\r\n        this.status = status;\r\n    }\r\n\r\n    public void setSeats(ArrayList<Seat> seats) {\r\n        this.seats = seats;\r\n    }\r\n\r\n    // Getter\r\n    public int getHallID(){\r\n        return hallID;\r\n    }\r\n\r\n    public Name getHallName() {\r\n        return hallName;\r\n    }\r\n\r\n    public String getHallType() {\r\n        return hallType;\r\n    }\r\n\r\n    public int getHallCapacity() {\r\n        return hallCapacity;\r\n    }\r\n\r\n    public int getStatus() {\r\n        return status;\r\n    }\r\n\r\n    public ArrayList<Seat> getSeats() {\r\n        return seats;\r\n    }\r\n\r\n    //ChinYong Part\r\n    //init the hall's seat from database\r\n    public void initSeatList() throws SQLException {\r\n        ArrayList<Seat> seats = new ArrayList<>();\r\n\r\n        try {\r\n            Object[] params = {this.hallID};\r\n            ResultSet result = DatabaseUtils.selectQueryById(\"*\", \"seat\", \"hall_id = ?\", params);\r\n\r\n            while (result.next()) {\r\n                Seat seat = new Seat();\r\n\r\n                seat.setSeat_id(result.getString(\"seat_id\"));\r\n                //seat.hall.setHallID(hallId);\r\n                seat.setSeatRow(result.getInt(\"seatrow\"));\r\n                seat.setSeatCol(result.getInt(\"seatcol\"));\r\n                seat.setSeat_status(result.getInt(\"seat_status\"));\r\n\r\n                seats.add(seat);\r\n\r\n            }\r\n\r\n            result.close();\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        this.setSeats(seats);\r\n\r\n    }\r\n\r\n    public void viewSeat_status() {\r\n        boolean error = false;\r\n\r\n        int largestRow=0;\r\n        int largestCol=0;\r\n\r\n        for(Seat seats:this.getSeats()){\r\n            largestRow=seats.getSeatRow();\r\n            largestCol=seats.getSeatCol();\r\n        }\r\n\r\n\r\n        System.out.println(\"\\t\\t\\t1\\t\\t2\\t\\t3\\t\\t4\\t\\t5\\t\\t6\\t\\t7\\t\\t8\");\r\n        int j=0;\r\n        for(int i=1;i<=largestRow;i++) {\r\n            System.out.printf(\"\\t\\t\");\r\n            char letter = (char) ('A' + i - 1);\r\n            System.out.print(letter+\" \");\r\n            do {\r\n                char st;\r\n                if(seats.get(j).getSeat_status()==1) {\r\n                    st='O';\r\n                }else{\r\n                    st='X';\r\n                }\r\n\r\n                System.out.printf(\"[%s]:%c \",seats.get(j).getSeat_id(),st);\r\n                j++;\r\n            } while (seats.get(j).getSeatCol()+1 <= largestCol);\r\n            char st;\r\n            if(seats.get(j).getSeat_status()==1) {\r\n                st='O';\r\n            }else{\r\n                st='X';\r\n            }\r\n            System.out.printf(\"[%s]:%c \",seats.get(j).getSeat_id(),st);\r\n            System.out.printf(\"\\n\");\r\n            j += 1;\r\n        }\r\n        System.out.printf(\"\\nO = Available/intact and undamaged\\tX = Unavailable/damaged\");\r\n        //return 0;\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Hall_Management/Hall.java b/Hall_Management/Hall.java
--- a/Hall_Management/Hall.java	(revision b88829f35ac4a26db87027d0772291d3eec62cca)
+++ b/Hall_Management/Hall.java	(date 1694854205771)
@@ -195,7 +195,6 @@
                 seat.setSeat_status(result.getInt("seat_status"));
 
                 seats.add(seat);
-
             }
 
             result.close();
@@ -204,7 +203,6 @@
             e.printStackTrace();
         }
         this.setSeats(seats);
-
     }
 
     public void viewSeat_status() {
@@ -218,10 +216,10 @@
             largestCol=seats.getSeatCol();
         }
 
-
         System.out.println("\t\t\t1\t\t2\t\t3\t\t4\t\t5\t\t6\t\t7\t\t8");
         int j=0;
-        for(int i=1;i<=largestRow;i++) {
+
+        for(int i = 1 ; i <= largestRow ; i++) {
             System.out.printf("\t\t");
             char letter = (char) ('A' + i - 1);
             System.out.print(letter+" ");
@@ -236,20 +234,21 @@
                 System.out.printf("[%s]:%c ",seats.get(j).getSeat_id(),st);
                 j++;
             } while (seats.get(j).getSeatCol()+1 <= largestCol);
+
             char st;
+
             if(seats.get(j).getSeat_status()==1) {
                 st='O';
             }else{
                 st='X';
             }
+
             System.out.printf("[%s]:%c ",seats.get(j).getSeat_id(),st);
             System.out.printf("\n");
             j += 1;
         }
+
         System.out.printf("\nO = Available/intact and undamaged\tX = Unavailable/damaged");
         //return 0;
     }
-
-
-
-}
+}
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"5ecf6160-812f-4e7a-9181-2318ab0f4334\" name=\"Changes\" comment=\"change the view schedule\">\r\n      <change afterPath=\"$PROJECT_DIR$/lib/.idea/libraries/mysql_connector_java_8_0_28.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/lib/.idea/misc.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/lib/.idea/modules.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/lib/.idea/vcs.xml\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/lib/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Driver/Driver.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Driver/Driver.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Driver/SystemClass.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Driver/SystemClass.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Schedule_Management/TimeTable.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Schedule_Management/TimeTable.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Seat_Management/TestDriver.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Seat_Management/TestDriver.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2VScJffwsxrMXTAnbRaLkJefcbV\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"last_opened_file_path\": \"C:/Users/zheng/Downloads/Java/Practical 6/Q3\",\r\n    \"onboarding.tips.debug.path\": \"C:/Users/zheng/Downloads/Cinema Ticketing System/src/main/java/org/example/Main.java\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\zheng\\Downloads\\Java Assignment\\Cinema Ticketing System\\lib\" />\r\n    </key>\r\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\r\n      <recent name=\"Driver\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"5ecf6160-812f-4e7a-9181-2318ab0f4334\" name=\"Changes\" comment=\"\" />\r\n      <created>1694832853776</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1694832853776</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"first\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694833510798</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694833510798</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"first\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694833622697</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694833622697</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"first\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694833797116</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694833797116</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"first\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694834583500</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694834583500</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"first\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694835111036</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694835111036</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"first\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694835116057</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694835116057</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"first\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694835172254</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694835172254</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"first\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694835881955</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694835881955</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"first\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694835979146</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694835979146</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"add the package\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694837709370</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694837709370</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"add the sql\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694837926997</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694837926997</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"add the yong package\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694838189034</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694838189034</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"change the hall package\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694838504476</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694838504476</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"change the SystemClass.java\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694839223323</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694839223323</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"change the directory to package\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694839720991</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694839720991</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"change the directory to package\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694840088620</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694840088620</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"change the sql.txt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694840174911</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694840174911</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"change the package name\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694842307045</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694842307045</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"change the view schedule\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694845299906</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694845299907</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"20\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"RECENT_FILTERS\">\r\n      <map>\r\n        <entry key=\"User\">\r\n          <value>\r\n            <list>\r\n              <RecentGroup>\r\n                <option name=\"FILTER_VALUES\">\r\n                  <option value=\"*\" />\r\n                </option>\r\n              </RecentGroup>\r\n            </list>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"origin/master\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                  <entry key=\"user\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"*\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"first\" />\r\n    <MESSAGE value=\"add the package\" />\r\n    <MESSAGE value=\"add the sql\" />\r\n    <MESSAGE value=\"add the yong package\" />\r\n    <MESSAGE value=\"change the hall package\" />\r\n    <MESSAGE value=\"change the SystemClass.java\" />\r\n    <MESSAGE value=\"change the directory to package\" />\r\n    <MESSAGE value=\"change the sql.txt\" />\r\n    <MESSAGE value=\"change the package name\" />\r\n    <MESSAGE value=\"change the view schedule\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"change the view schedule\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/org/example/Main.java</url>\r\n          <line>15</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision b88829f35ac4a26db87027d0772291d3eec62cca)
+++ b/.idea/workspace.xml	(date 1694857525330)
@@ -4,17 +4,16 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="5ecf6160-812f-4e7a-9181-2318ab0f4334" name="Changes" comment="change the view schedule">
-      <change afterPath="$PROJECT_DIR$/lib/.idea/libraries/mysql_connector_java_8_0_28.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/lib/.idea/misc.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/lib/.idea/modules.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/lib/.idea/vcs.xml" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/lib/.idea/workspace.xml" afterDir="false" />
+    <list default="true" id="5ecf6160-812f-4e7a-9181-2318ab0f4334" name="Changes" comment="change the cinema class">
+      <change afterPath="$PROJECT_DIR$/Cinema_Management/AddressUtils.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Driver/Driver.java" beforeDir="false" afterPath="$PROJECT_DIR$/Driver/Driver.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Cinema_Management/Address.java" beforeDir="false" afterPath="$PROJECT_DIR$/Cinema_Management/Address.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Driver/SystemClass.java" beforeDir="false" afterPath="$PROJECT_DIR$/Driver/SystemClass.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Schedule_Management/TimeTable.java" beforeDir="false" afterPath="$PROJECT_DIR$/Schedule_Management/TimeTable.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Seat_Management/TestDriver.java" beforeDir="false" afterPath="$PROJECT_DIR$/Seat_Management/TestDriver.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Genre_Management/Genre.java" beforeDir="false" afterPath="$PROJECT_DIR$/Genre_Management/Genre.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Genre_Management/GenreValidator.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/Hall_Management/Hall.java" beforeDir="false" afterPath="$PROJECT_DIR$/Hall_Management/Hall.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Movie_Management/Movie.java" beforeDir="false" afterPath="$PROJECT_DIR$/Movie_Management/Movie.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Movie_Management/MovieUtils.java" beforeDir="false" afterPath="$PROJECT_DIR$/Movie_Management/MovieUtils.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -215,7 +214,31 @@
       <option name="project" value="LOCAL" />
       <updated>1694845299907</updated>
     </task>
-    <option name="localTasksCounter" value="20" />
+    <task id="LOCAL-00020" summary="change the manage schedule method">
+      <option name="closed" value="true" />
+      <created>1694852855929</created>
+      <option name="number" value="00020" />
+      <option name="presentableId" value="LOCAL-00020" />
+      <option name="project" value="LOCAL" />
+      <updated>1694852855929</updated>
+    </task>
+    <task id="LOCAL-00021" summary="fix the delete hall bug in manage hall method">
+      <option name="closed" value="true" />
+      <created>1694853138500</created>
+      <option name="number" value="00021" />
+      <option name="presentableId" value="LOCAL-00021" />
+      <option name="project" value="LOCAL" />
+      <updated>1694853138500</updated>
+    </task>
+    <task id="LOCAL-00022" summary="change the cinema class">
+      <option name="closed" value="true" />
+      <created>1694853437806</created>
+      <option name="number" value="00022" />
+      <option name="presentableId" value="LOCAL-00022" />
+      <option name="project" value="LOCAL" />
+      <updated>1694853437806</updated>
+    </task>
+    <option name="localTasksCounter" value="23" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -274,7 +297,10 @@
     <MESSAGE value="change the sql.txt" />
     <MESSAGE value="change the package name" />
     <MESSAGE value="change the view schedule" />
-    <option name="LAST_COMMIT_MESSAGE" value="change the view schedule" />
+    <MESSAGE value="change the manage schedule method" />
+    <MESSAGE value="fix the delete hall bug in manage hall method" />
+    <MESSAGE value="change the cinema class" />
+    <option name="LAST_COMMIT_MESSAGE" value="change the cinema class" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
Index: Movie_Management/MovieUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Movie_Management;\r\n\r\nimport Database.DatabaseUtils;\r\nimport Driver.DateTime;\r\nimport Driver.Name;\r\nimport Genre_Management.Genre;\r\n\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\n\r\npublic class MovieUtils {\r\n    private MovieUtils(){\r\n    }\r\n\r\n    public static ArrayList<Movie> queryMovieByName(String mvName) throws SQLException {\r\n        ArrayList<Movie> searchResults = new ArrayList<>();\r\n\r\n        ResultSet result = null;\r\n        try {\r\n            Object[] params = {\"%\" + mvName + \"%\"};\r\n            result = DatabaseUtils.selectQueryById(\"*\", \"movie\", \"mv_name LIKE ? AND release_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\", params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        while (result.next()) {\r\n            Movie movie = new Movie();\r\n\r\n            movie.setMovieID(result.getInt(\"movie_id\"));\r\n            movie.setGenre(new Genre(result.getInt(\"genre_id\")));\r\n            movie.setMvName(new Name(result.getString(\"mv_name\")));\r\n            movie.setReleaseDate(new DateTime(result.getDate(\"release_date\").toLocalDate()));\r\n            movie.setDuration(result.getInt(\"duration\"));\r\n            movie.setLang(result.getString(\"lang\"));\r\n            movie.setDirector(result.getString(\"director\"));\r\n            movie.setWritter(result.getString(\"writter\"));\r\n            movie.setStarring(result.getString(\"starring\"));\r\n            movie.setMusicProvider(result.getString(\"music\"));\r\n            movie.setCountry(result.getString(\"country\"));\r\n            movie.setMetaDescription(result.getString(\"meta_description\"));\r\n            movie.setBasicTicketPrice(result.getDouble(\"basic_TicketPrice\"));\r\n            movie.setStatus(result.getInt(\"movie_status\"));\r\n\r\n            searchResults.add(movie);\r\n        }\r\n\r\n        result.close();\r\n\r\n        return searchResults;\r\n    }\r\n\r\n    public static ArrayList<Movie> queryMovieByGenre(Genre genre) throws SQLException {\r\n        ArrayList<Movie> searchResults = new ArrayList<>();\r\n        ResultSet result = null;\r\n\r\n        try {\r\n            Object[] params = {genre.getGenreID(), 1};\r\n            result = DatabaseUtils.selectQueryById(\"*\", \"movie\", \"genre_id = ? AND release_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND movie_status = ?\", params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        while (result.next()) {\r\n            Movie movie = new Movie();\r\n\r\n            movie.setMovieID(result.getInt(\"movie_id\"));\r\n            movie.setGenre(new Genre(result.getInt(\"genre_id\")));\r\n            movie.setMvName(new Name(result.getString(\"mv_name\")));\r\n            movie.setReleaseDate(new DateTime(result.getDate(\"release_date\").toLocalDate()));\r\n            movie.setDuration(result.getInt(\"duration\"));\r\n            movie.setLang(result.getString(\"lang\"));\r\n            movie.setDirector(result.getString(\"director\"));\r\n            movie.setWritter(result.getString(\"writter\"));\r\n            movie.setStarring(result.getString(\"starring\"));\r\n            movie.setMusicProvider(result.getString(\"music\"));\r\n            movie.setCountry(result.getString(\"country\"));\r\n            movie.setMetaDescription(result.getString(\"meta_description\"));\r\n            movie.setBasicTicketPrice(result.getDouble(\"basic_TicketPrice\"));\r\n            movie.setStatus(result.getInt(\"movie_status\"));\r\n\r\n            searchResults.add(movie);\r\n        }\r\n\r\n        result.close();\r\n\r\n        return searchResults;\r\n    }\r\n\r\n    // Format double data type value to two decimal point\r\n    public static double formatDouble(double value){\r\n        return Math.round(value * 100.0) / 100.0;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Movie_Management/MovieUtils.java b/Movie_Management/MovieUtils.java
--- a/Movie_Management/MovieUtils.java	(revision b88829f35ac4a26db87027d0772291d3eec62cca)
+++ b/Movie_Management/MovieUtils.java	(date 1694855310168)
@@ -3,11 +3,15 @@
 import Database.DatabaseUtils;
 import Driver.DateTime;
 import Driver.Name;
+import Driver.SystemClass;
 import Genre_Management.Genre;
 
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.time.LocalDate;
 import java.util.ArrayList;
+import java.util.InputMismatchException;
+import java.util.Scanner;
 
 public class MovieUtils {
     private MovieUtils(){
@@ -89,8 +93,253 @@
         return searchResults;
     }
 
+    public static ArrayList<Movie> viewMovieListByFilter(Scanner sc) throws Exception {
+        LocalDate currentDate = LocalDate.now();
+        ArrayList<Movie> moviesAfterFiltered = new ArrayList<>();
+        boolean error = true;
+        int choice = 0;
+
+        do {
+            do {
+                try {
+                    System.out.println("\nPlease select a movie filtering from the list below: ");
+                    System.out.println("1. Future Movie");
+                    System.out.println("2. Movie within 1 week");
+                    System.out.println("3. Movie within 1 month");
+                    System.out.println("4. Movie within 3 months");
+                    System.out.println("5. Movie within 1 year");
+                    System.out.println("6. All movies");
+                    System.out.print("\nEnter your selection (0 - Back): ");
+                    choice = sc.nextInt();
+                    sc.nextLine();
+
+                    if (choice < 0 || choice > 6) {
+                        System.out.println("Your choice is not among the available options! PLease try again.");
+                    } else {
+                        error = false;
+                    }
+                } catch (InputMismatchException e) {
+                    System.out.println("Please enter a valid choice!");
+                    sc.nextLine();
+                }
+            } while (error);
+
+            switch (choice) {
+                case 0:
+                    return null;
+                case 1:
+                    // 1. future movie
+                    LocalDate futureMovie = currentDate.plusDays(1);
+                    moviesAfterFiltered = showMovieListAfterFiltered(futureMovie, null, 1);
+                    break;
+                case 2:
+                    // 2. within 1 week
+                    LocalDate oneWeekAgo = currentDate.minusWeeks(1);
+                    moviesAfterFiltered = showMovieListAfterFiltered(oneWeekAgo, currentDate, 1);
+                    break;
+                case 3:
+                    // 3. within 1 month
+                    LocalDate oneMonthAgo = currentDate.minusMonths(1);
+                    moviesAfterFiltered = showMovieListAfterFiltered(oneMonthAgo, currentDate, 1);
+                    break;
+                case 4:
+                    // 4. within 3 month
+                    LocalDate threeMonthAgo = currentDate.minusMonths(3);
+                    moviesAfterFiltered = showMovieListAfterFiltered(threeMonthAgo, currentDate, 1);
+                    break;
+                case 5:
+                    // 5. within 1 year
+                    LocalDate oneYearAgo = currentDate.minusYears(1);
+                    moviesAfterFiltered = showMovieListAfterFiltered(oneYearAgo, currentDate, 1);
+                    break;
+                case 6:
+                    // 6. all movie
+                    moviesAfterFiltered = showMovieListAfterFiltered(null, null, 1);
+                    break;
+            }
+        } while (moviesAfterFiltered.isEmpty() && choice != 0);
+
+        return moviesAfterFiltered;
+    }
+
+    public static ArrayList<Movie> showMovieListAfterFiltered(LocalDate expectedDate, LocalDate currentDate, int status){
+        ArrayList<Movie> movies = new ArrayList<>();
+
+        try {
+            Object[] params = {status};
+            ResultSet result = DatabaseUtils.selectQueryById("*", "movie", "movie_status = ?", params);
+
+            while (result.next()) {
+                Movie movie = new Movie();
+
+                movie.setMovieID(result.getInt("movie_id"));
+                movie.setGenre(new Genre(result.getInt("genre_id")));
+                movie.setMvName(new Name(result.getString("mv_name")));
+                movie.setReleaseDate(new DateTime(result.getDate("release_date").toLocalDate()));
+                movie.setDuration(result.getInt("duration"));
+                movie.setLang(result.getString("lang"));
+                movie.setDirector(result.getString("director"));
+                movie.setWritter(result.getString("writter"));
+                movie.setStarring(result.getString("starring"));
+                movie.setMusicProvider(result.getString("music"));
+                movie.setCountry(result.getString("country"));
+                movie.setMetaDescription(result.getString("meta_description"));
+                movie.setBasicTicketPrice(result.getDouble("basic_TicketPrice"));
+                movie.setStatus(result.getInt("movie_status"));
+
+                movies.add(movie);
+            }
+
+            result.close();
+        }
+        catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+        ArrayList<Movie> moviesAfterFiltered = new ArrayList<>();
+
+        System.out.printf("\n%-5s %s\n", "No", "Movie Name");
+
+        int countFuture = 1;
+        int countAll = 1;
+        int countOther = 1;
+
+        for (int i = 0; i < movies.size(); i++) {
+            LocalDate localReleaseDate = movies.get(i).getReleaseDate().getDate();
+
+            if (expectedDate != null && currentDate == null) {  // Future Movie(s)
+                if (localReleaseDate.equals(expectedDate) || localReleaseDate.isAfter(expectedDate)) {
+                    System.out.printf("%-5d %s\n", countFuture, movies.get(i).getMvName().getName());
+                    moviesAfterFiltered.add(movies.get(i));
+                    countFuture++;
+                }
+            } else if (expectedDate == null && currentDate == null) {  // All Movies
+                System.out.printf("%-5d %s\n", countAll, movies.get(i).getMvName().getName());
+                moviesAfterFiltered.add(movies.get(i));
+                countAll++;
+            }
+            else {
+                if (localReleaseDate.equals(expectedDate) || (localReleaseDate.isAfter(expectedDate) && localReleaseDate.isBefore(currentDate))) {
+                    System.out.printf("%-5d %s\n", countOther, movies.get(i).getMvName().getName());
+                    moviesAfterFiltered.add(movies.get(i));
+                    countOther++;
+                }
+            }
+        }
+
+        if (moviesAfterFiltered.isEmpty()) {
+            System.out.println("Sorry, no movie found!");
+        }
+
+        return moviesAfterFiltered;
+    }
+
     // Format double data type value to two decimal point
     public static double formatDouble(double value){
         return Math.round(value * 100.0) / 100.0;
     }
+
+    // Method for add movie
+    public static String getMultipleValues(Scanner sc, String propertyName, String propertyPluralName) throws Exception {
+        StringBuilder result = new StringBuilder();
+        String continues = "N";
+        boolean error = true;
+
+        do {
+            System.out.print("\nEnter the movie " + propertyName + ": ");
+            String value = sc.nextLine();
+
+            Name name = new Name(value);
+
+            String errorMessage = MovieValidator.checkValue(value, propertyName);
+
+            if (errorMessage == null) {
+                name.capitalizeWords();
+                error = false;
+
+                do {
+                    System.out.println("\nIs there another " + propertyPluralName + " for this movie? (Y / N)");
+                    System.out.print("Answer: ");
+                    String answer = sc.next();
+                    sc.nextLine();
+
+                    continues = SystemClass.askForContinue(answer);
+
+                } while (continues.equals("Invalid"));
+
+                if (continues.equals("Y")) {
+                    result.append(name.getName()).append(", ");
+                } else {
+                    result.append(name.getName());
+                }
+            } else {
+                System.out.println(errorMessage);
+                error = true;
+            }
+        } while (error || continues.equals("Y"));
+
+        return result.toString();
+    }
+
+    public static String getMultipleChosens(Scanner sc, String[] array, String propertyName){
+        boolean error;
+
+        do {
+            System.out.println("\nAvailable " + propertyName);
+            try {
+                for (int i = 0; i < array.length; i++) {
+                    System.out.println((i + 1) + ". " + array[i]);
+                }
+
+                System.out.print("\nEnter your selection: ");
+                int choice = sc.nextInt();
+                sc.nextLine();
+
+                String errorMessage = MovieValidator.checkRange(choice, array);
+
+                if (errorMessage == null) {
+                    return array[choice - 1];  // Array starts from index 0
+                } else {
+                    System.out.println(errorMessage);
+                    error = true;
+                }
+            } catch (InputMismatchException e) {
+                System.out.println("Please enter a valid number!");
+                sc.nextLine();
+                error = true;
+            }
+        } while (error);
+
+        return null;
+    }
+
+    public static double getTicketPrice(Scanner sc, String propertyName){
+        boolean error;
+
+        do {
+            try {
+                System.out.print("\nEnter movie " + propertyName + " ticket price (RM): ");
+                double mvTicketPrice = sc.nextDouble();
+                sc.nextLine();
+
+                String errorMessage = MovieValidator.checkTicketPrice(mvTicketPrice);
+
+                if (errorMessage == null) {
+                    mvTicketPrice = MovieUtils.formatDouble(mvTicketPrice);
+                    return mvTicketPrice;
+                }
+                else {
+                    System.out.println(errorMessage);
+                    error = true;
+                }
+            }
+            catch (InputMismatchException e) {
+                System.out.println("Please enter a valid " + propertyName + " ticket price!");
+                sc.nextLine();
+                error = true;
+            }
+        } while (error);
+
+        return 0;
+    }
 }
\ No newline at end of file
Index: Movie_Management/Movie.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Movie_Management;\r\n\r\nimport Database.DatabaseUtils;\r\nimport Driver.DatabaseOperations;\r\nimport Driver.DateTime;\r\nimport Driver.Name;\r\nimport Driver.SystemClass;\r\nimport Genre_Management.Genre;\r\n\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.time.LocalDate;\r\nimport java.util.ArrayList;\r\nimport java.util.InputMismatchException;\r\nimport java.util.Scanner;\r\n\r\npublic class Movie implements DatabaseOperations {\r\n    private int movieID;\r\n    private Genre genre;\r\n    private Name mvName;\r\n    private DateTime releaseDate;\r\n    private int duration;\r\n    private String lang;\r\n    private String director;\r\n    private String writter;\r\n    private String starring;\r\n    private String musicProvider;\r\n    private String country;\r\n    private String metaDescription;\r\n    private double basicTicketPrice;\r\n    private int status;\r\n\r\n    public Movie(){\r\n    }\r\n\r\n    public Movie(int movieID, Genre genre, Name mvName, DateTime releaseDate, int duration, String lang, String director, String writter, String starring, String musicProvider, String country, String metaDescription, double basicTicketPrice) {\r\n        this.movieID = movieID;\r\n        this.genre = genre;\r\n        this.mvName = mvName;\r\n        this.releaseDate = releaseDate;\r\n        this.duration = duration;\r\n        this.lang = lang;\r\n        this.director = director;\r\n        this.writter = writter;\r\n        this.starring = starring;\r\n        this.musicProvider = musicProvider;\r\n        this.country = country;\r\n        this.metaDescription = metaDescription;\r\n        this.basicTicketPrice = basicTicketPrice;\r\n    }\r\n\r\n    // Show movie details\r\n    public void viewMovieDetails() throws SQLException {\r\n        ResultSet result = null;\r\n\r\n        try {\r\n            Object[] params = {genre.getGenreID()};\r\n            result = DatabaseUtils.selectQueryById(\"genre_name\", \"genre\", \"genre_id = ?\", params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        System.out.printf(\"\\nMovie Detail:\\n\");\r\n        System.out.println(\"Movie Name: \" + mvName.getName());\r\n        if (result.next()) {\r\n            System.out.println(\"Genre: \" + result.getString(\"genre_name\"));\r\n        }\r\n        System.out.println(\"Release Date: \" + releaseDate.getDate());\r\n        System.out.println(\"Duration: \" + duration + \" minutes\");\r\n        System.out.println(\"Language: \" + lang);\r\n        System.out.println(\"Director: \" + director);\r\n        System.out.println(\"Writter: \" + writter);\r\n        System.out.println(\"Starring: \" + starring);\r\n        System.out.println(\"Music Producer: \" + musicProvider);\r\n        System.out.println(\"Country: \" + country);\r\n        System.out.printf(\"%s %.2f\\n\", \"Basic Ticket Price:\", basicTicketPrice);\r\n        System.out.println(\"\\nSynopsis:\\n\" + metaDescription);\r\n    }\r\n\r\n    public boolean add() throws SQLException {\r\n        int rowAffected = 0;\r\n\r\n        try {\r\n            String insertSql = \"INSERT INTO `movie`(`genre_id`, `mv_name`, `release_date`, `duration`, `lang`, `director`, `writter`, `starring`, `music`, `country`,`meta_description`, `basic_TicketPrice`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n            Object[] params = {genre.getGenreID(), mvName.getName(), String.valueOf(releaseDate.getDate()), duration, lang, director, writter, starring, musicProvider, country, metaDescription, basicTicketPrice};\r\n            rowAffected = DatabaseUtils.insertQuery(insertSql, params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (rowAffected > 0) {\r\n            System.out.println(\"\\nMovie successfully added...\");\r\n            return true;\r\n        }\r\n        else {\r\n            System.out.println(\"\\nSomething went wrong!\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean modify() throws SQLException {\r\n        int rowAffected = 0;\r\n\r\n        try {\r\n            String updateSql = \"UPDATE `movie` SET `genre_id`= ?, `mv_name`= ?,\" +\r\n                    \"`release_date`= ?,`duration`= ?,`lang`= ?,\" +\r\n                    \"`director`= ?,`writter`= ?,`starring`= ?,`music`= ?,\" +\r\n                    \"`country`= ?,`meta_description`= ?, `basic_TicketPrice`= ? WHERE `movie_id` = ?\";\r\n            Object[] params = {genre.getGenreID(), mvName.getName(), String.valueOf(releaseDate.getDate()), duration, lang, director, writter, starring, musicProvider, country, metaDescription, basicTicketPrice, movieID};\r\n            rowAffected = DatabaseUtils.updateQuery(updateSql, params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (rowAffected > 0) {\r\n            System.out.println(\"\\nThe changes have been saved.\");\r\n            return true;\r\n        }\r\n        else {\r\n            System.out.println(\"\\nSomething went wrong...\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean delete() throws SQLException {\r\n        int rowAffected = 0;\r\n\r\n        try {\r\n            Object[] params = {movieID};\r\n            rowAffected = DatabaseUtils.deleteQueryById(\"movie\", \"movie_status\", \"movie_id\", params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (rowAffected > 0) {\r\n            System.out.println(\"\\nThe movie has been deleted.\");\r\n            return true;\r\n        } else {\r\n            System.out.println(\"\\nSomething went wrong...\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static ArrayList<Movie> viewMovieListByFilter(Scanner sc) throws Exception {\r\n        LocalDate currentDate = LocalDate.now();\r\n        ArrayList<Movie> moviesAfterFiltered = new ArrayList<>();\r\n        boolean error = true;\r\n        int choice = 0;\r\n\r\n        do {\r\n            do {\r\n                try {\r\n                    System.out.println(\"\\nPlease select a movie filtering from the list below: \");\r\n                    System.out.println(\"1. Future Movie\");\r\n                    System.out.println(\"2. Movie within 1 week\");\r\n                    System.out.println(\"3. Movie within 1 month\");\r\n                    System.out.println(\"4. Movie within 3 months\");\r\n                    System.out.println(\"5. Movie within 1 year\");\r\n                    System.out.println(\"6. All movies\");\r\n                    System.out.print(\"\\nEnter your selection (0 - Back): \");\r\n                    choice = sc.nextInt();\r\n                    sc.nextLine();\r\n\r\n                    if (choice < 0 || choice > 6) {\r\n                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                    } else {\r\n                        error = false;\r\n                    }\r\n                } catch (InputMismatchException e) {\r\n                    System.out.println(\"Please enter a valid choice!\");\r\n                    sc.nextLine();\r\n                }\r\n            } while (error);\r\n\r\n            switch (choice) {\r\n                case 0:\r\n                    return null;\r\n                case 1:\r\n                    // 1. future movie\r\n                    LocalDate futureMovie = currentDate.plusDays(1);\r\n                    moviesAfterFiltered = showMovieListAfterFiltered(futureMovie, null, 1);\r\n                    break;\r\n                case 2:\r\n                    // 2. within 1 week\r\n                    LocalDate oneWeekAgo = currentDate.minusWeeks(1);\r\n                    moviesAfterFiltered = showMovieListAfterFiltered(oneWeekAgo, currentDate, 1);\r\n                    break;\r\n                case 3:\r\n                    // 3. within 1 month\r\n                    LocalDate oneMonthAgo = currentDate.minusMonths(1);\r\n                    moviesAfterFiltered = showMovieListAfterFiltered(oneMonthAgo, currentDate, 1);\r\n                    break;\r\n                case 4:\r\n                    // 4. within 3 month\r\n                    LocalDate threeMonthAgo = currentDate.minusMonths(3);\r\n                    moviesAfterFiltered = showMovieListAfterFiltered(threeMonthAgo, currentDate, 1);\r\n                    break;\r\n                case 5:\r\n                    // 5. within 1 year\r\n                    LocalDate oneYearAgo = currentDate.minusYears(1);\r\n                    moviesAfterFiltered = showMovieListAfterFiltered(oneYearAgo, currentDate, 1);\r\n                    break;\r\n                case 6:\r\n                    // 6. all movie\r\n                    moviesAfterFiltered = showMovieListAfterFiltered(null, null, 1);\r\n                    break;\r\n            }\r\n        } while (moviesAfterFiltered.isEmpty() && choice != 0);\r\n\r\n        return moviesAfterFiltered;\r\n    }\r\n\r\n    public static ArrayList<Movie> showMovieListAfterFiltered(LocalDate expectedDate, LocalDate currentDate, int status){\r\n        ArrayList<Movie> movies = new ArrayList<>();\r\n\r\n        try {\r\n            Object[] params = {status};\r\n            ResultSet result = DatabaseUtils.selectQueryById(\"*\", \"movie\", \"movie_status = ?\", params);\r\n\r\n            while (result.next()) {\r\n                Movie movie = new Movie();\r\n\r\n                movie.setMovieID(result.getInt(\"movie_id\"));\r\n                movie.setGenre(new Genre(result.getInt(\"genre_id\")));\r\n                movie.setMvName(new Name(result.getString(\"mv_name\")));\r\n                movie.setReleaseDate(new DateTime(result.getDate(\"release_date\").toLocalDate()));\r\n                movie.setDuration(result.getInt(\"duration\"));\r\n                movie.setLang(result.getString(\"lang\"));\r\n                movie.setDirector(result.getString(\"director\"));\r\n                movie.setWritter(result.getString(\"writter\"));\r\n                movie.setStarring(result.getString(\"starring\"));\r\n                movie.setMusicProvider(result.getString(\"music\"));\r\n                movie.setCountry(result.getString(\"country\"));\r\n                movie.setMetaDescription(result.getString(\"meta_description\"));\r\n                movie.setBasicTicketPrice(result.getDouble(\"basic_TicketPrice\"));\r\n                movie.setStatus(result.getInt(\"movie_status\"));\r\n\r\n                movies.add(movie);\r\n            }\r\n\r\n            result.close();\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        ArrayList<Movie> moviesAfterFiltered = new ArrayList<>();\r\n\r\n        System.out.printf(\"\\n%-5s %s\\n\", \"No\", \"Movie Name\");\r\n\r\n        int countFuture = 1;\r\n        int countAll = 1;\r\n        int countOther = 1;\r\n\r\n        for (int i = 0; i < movies.size(); i++) {\r\n            LocalDate localReleaseDate = movies.get(i).getReleaseDate().getDate();\r\n\r\n            if (expectedDate != null && currentDate == null) {  // Future Movie(s)\r\n                if (localReleaseDate.equals(expectedDate) || localReleaseDate.isAfter(expectedDate)) {\r\n                    System.out.printf(\"%-5d %s\\n\", countFuture, movies.get(i).getMvName().getName());\r\n                    moviesAfterFiltered.add(movies.get(i));\r\n                    countFuture++;\r\n                }\r\n            } else if (expectedDate == null && currentDate == null) {  // All Movies\r\n                System.out.printf(\"%-5d %s\\n\", countAll, movies.get(i).getMvName().getName());\r\n                moviesAfterFiltered.add(movies.get(i));\r\n                countAll++;\r\n            }\r\n            else {\r\n                if (localReleaseDate.equals(expectedDate) || (localReleaseDate.isAfter(expectedDate) && localReleaseDate.isBefore(currentDate))) {\r\n                    System.out.printf(\"%-5d %s\\n\", countOther, movies.get(i).getMvName().getName());\r\n                    moviesAfterFiltered.add(movies.get(i));\r\n                    countOther++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (moviesAfterFiltered.isEmpty()) {\r\n            System.out.println(\"Sorry, no movie found!\");\r\n        }\r\n\r\n        return moviesAfterFiltered;\r\n    }\r\n\r\n    // Method for add movie\r\n    public static String getMultipleValues(Scanner sc, String propertyName, String propertyPluralName) throws Exception {\r\n        StringBuilder result = new StringBuilder();\r\n        String continues = \"N\";\r\n        boolean error = true;\r\n\r\n        do {\r\n            System.out.print(\"\\nEnter the movie \" + propertyName + \": \");\r\n            String value = sc.nextLine();\r\n\r\n            Name name = new Name(value);\r\n\r\n            String errorMessage = MovieValidator.checkValue(value, propertyName);\r\n\r\n            if (errorMessage == null) {\r\n                name.capitalizeWords();\r\n                error = false;\r\n\r\n                do {\r\n                    System.out.println(\"\\nIs there another \" + propertyPluralName + \" for this movie? (Y / N)\");\r\n                    System.out.print(\"Answer: \");\r\n                    String answer = sc.next();\r\n                    sc.nextLine();\r\n\r\n                    continues = SystemClass.askForContinue(answer);\r\n\r\n                } while (continues.equals(\"Invalid\"));\r\n\r\n                if (continues.equals(\"Y\")) {\r\n                    result.append(name.getName()).append(\", \");\r\n                } else {\r\n                    result.append(name.getName());\r\n                }\r\n            } else {\r\n                System.out.println(errorMessage);\r\n                error = true;\r\n            }\r\n        } while (error || continues.equals(\"Y\"));\r\n\r\n        return result.toString();\r\n    }\r\n\r\n    public static String getMultipleChosens(Scanner sc, String[] array, String propertyName){\r\n        boolean error;\r\n\r\n        do {\r\n            System.out.println(\"\\nAvailable \" + propertyName);\r\n            try {\r\n                for (int i = 0; i < array.length; i++) {\r\n                    System.out.println((i + 1) + \". \" + array[i]);\r\n                }\r\n\r\n                System.out.print(\"\\nEnter your selection: \");\r\n                int choice = sc.nextInt();\r\n                sc.nextLine();\r\n\r\n                String errorMessage = MovieValidator.checkRange(choice, array);\r\n\r\n                if (errorMessage == null) {\r\n                    return array[choice - 1];  // Array starts from index 0\r\n                } else {\r\n                    System.out.println(errorMessage);\r\n                    error = true;\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Please enter a valid number!\");\r\n                sc.nextLine();\r\n                error = true;\r\n            }\r\n        } while (error);\r\n\r\n        return null;\r\n    }\r\n\r\n    public static double getTicketPrice(Scanner sc, String propertyName){\r\n        boolean error;\r\n\r\n        do {\r\n            try {\r\n                System.out.print(\"\\nEnter movie \" + propertyName + \" ticket price (RM): \");\r\n                double mvTicketPrice = sc.nextDouble();\r\n                sc.nextLine();\r\n\r\n                String errorMessage = MovieValidator.checkTicketPrice(mvTicketPrice);\r\n\r\n                if (errorMessage == null) {\r\n                    mvTicketPrice = MovieUtils.formatDouble(mvTicketPrice);\r\n                    return mvTicketPrice;\r\n                }\r\n                else {\r\n                    System.out.println(errorMessage);\r\n                    error = true;\r\n                }\r\n            }\r\n            catch (InputMismatchException e) {\r\n                System.out.println(\"Please enter a valid \" + propertyName + \" ticket price!\");\r\n                sc.nextLine();\r\n                error = true;\r\n            }\r\n        } while (error);\r\n\r\n        return 0;\r\n    }\r\n\r\n    // Method for modify movie\r\n    public int modifyMovieDetail(Scanner sc) throws SQLException {\r\n        boolean error = true;\r\n\r\n        do {\r\n            try {\r\n                Object[] params = {genre.getGenreID()};\r\n                ResultSet result = DatabaseUtils.selectQueryById(\"genre_name\", \"genre\", \"genre_id = ?\", params);\r\n\r\n                try {\r\n                    int count = 1;\r\n                    System.out.printf(\"\\nMovie Detail:\\n\");\r\n                    System.out.println(count + \". Movie Name: \" + mvName.getName());\r\n                    count++;\r\n                    if (result.next()) {\r\n                        System.out.println(count + \". Genre: \" + result.getString(\"genre_name\"));\r\n                        count++;\r\n                    }\r\n                    System.out.println(count + \". Release Date: \" + releaseDate.getDate());\r\n                    count++;\r\n                    System.out.println(count + \". Duration: \" + duration + \" minutes\");\r\n                    count++;\r\n                    System.out.println(count + \". Language: \" + lang);\r\n                    count++;\r\n                    System.out.println(count + \". Director: \" + director);\r\n                    count++;\r\n                    System.out.println(count + \". Writter: \" + writter);\r\n                    count++;\r\n                    System.out.println(count + \". Starring: \" + starring);\r\n                    count++;\r\n                    System.out.println(count + \". Music Producer: \" + musicProvider);\r\n                    count++;\r\n                    System.out.println(count + \". Country: \" + country);\r\n                    count++;\r\n                    System.out.printf(\"%d. %s: %.2f\\n\", count, \"Basic Ticket Price\", basicTicketPrice);\r\n                    count++;\r\n                    System.out.println(\"\\n\" + count + \". Synopsis:\\n\" + metaDescription + \"\\n\");\r\n\r\n                    System.out.print(\"\\nEnter the serial number of the movie information you want to change (0 - Stop): \");\r\n                    int serialNum = sc.nextInt();\r\n                    sc.nextLine();\r\n\r\n                    if (serialNum < 0 || serialNum > count) {\r\n                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                        error = true;\r\n                    } else {\r\n                        return serialNum;\r\n                    }\r\n                } catch (InputMismatchException e) {\r\n                    System.out.println(\"Please enter a valid choice!\");\r\n                    sc.nextLine();\r\n                    error = true;\r\n                }\r\n            }\r\n            catch (SQLException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } while (error);\r\n        return 0;\r\n    }\r\n\r\n    public void setMovieID(int movieID) {\r\n        this.movieID = movieID;\r\n    }\r\n\r\n    public void setGenre(Genre genre){\r\n        this.genre = genre;\r\n    }\r\n\r\n    public void setMvName(Name mvName) {\r\n        this.mvName = mvName;\r\n    }\r\n\r\n    public void setReleaseDate(DateTime releaseDate) {\r\n        this.releaseDate = releaseDate;\r\n    }\r\n\r\n    public void setDuration(int duration) {\r\n        this.duration = duration;\r\n    }\r\n\r\n    public void setLang(String lang) {\r\n        this.lang = lang;\r\n    }\r\n\r\n    public void setDirector(String director) {\r\n        this.director = director;\r\n    }\r\n\r\n    public void setWritter(String writter) {\r\n        this.writter = writter;\r\n    }\r\n\r\n    public void setStarring(String starring) {\r\n        this.starring = starring;\r\n    }\r\n\r\n    public void setMusicProvider(String musicProvider) {\r\n        this.musicProvider = musicProvider;\r\n    }\r\n\r\n    public void setCountry(String country) {\r\n        this.country = country;\r\n    }\r\n\r\n    public void setMetaDescription(String metaDescription) {\r\n        this.metaDescription = metaDescription;\r\n    }\r\n\r\n    public void setBasicTicketPrice(double basicTicketPrice) {\r\n        this.basicTicketPrice = basicTicketPrice;\r\n    }\r\n\r\n    public void setStatus(int status) {\r\n        this.status = status;\r\n    }\r\n\r\n    public int getMovieID() {\r\n        return movieID;\r\n    }\r\n\r\n    public Genre getGenre(){\r\n        return genre;\r\n    }\r\n\r\n    public Name getMvName() {\r\n        return mvName;\r\n    }\r\n\r\n    public DateTime getReleaseDate() {\r\n        return releaseDate;\r\n    }\r\n\r\n    public int getDuration() {\r\n        return duration;\r\n    }\r\n\r\n    public String getLang() {\r\n        return lang;\r\n    }\r\n\r\n    public String getDirector() {\r\n        return director;\r\n    }\r\n\r\n    public String getWritter() {\r\n        return writter;\r\n    }\r\n\r\n    public String getStarring() {\r\n        return starring;\r\n    }\r\n\r\n    public String getMusicProvider() {\r\n        return musicProvider;\r\n    }\r\n\r\n    public String getCountry() {\r\n        return country;\r\n    }\r\n\r\n    public String getMetaDescription() {\r\n        return metaDescription;\r\n    }\r\n\r\n    public double getBasicTicketPrice() {\r\n        return basicTicketPrice;\r\n    }\r\n\r\n    public int getStatus() {\r\n        return status;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Movie_Management/Movie.java b/Movie_Management/Movie.java
--- a/Movie_Management/Movie.java	(revision b88829f35ac4a26db87027d0772291d3eec62cca)
+++ b/Movie_Management/Movie.java	(date 1694855310160)
@@ -49,7 +49,7 @@
         this.basicTicketPrice = basicTicketPrice;
     }
 
-    // Show movie details
+    // Method
     public void viewMovieDetails() throws SQLException {
         ResultSet result = null;
 
@@ -100,297 +100,6 @@
         }
     }
 
-    public boolean modify() throws SQLException {
-        int rowAffected = 0;
-
-        try {
-            String updateSql = "UPDATE `movie` SET `genre_id`= ?, `mv_name`= ?," +
-                    "`release_date`= ?,`duration`= ?,`lang`= ?," +
-                    "`director`= ?,`writter`= ?,`starring`= ?,`music`= ?," +
-                    "`country`= ?,`meta_description`= ?, `basic_TicketPrice`= ? WHERE `movie_id` = ?";
-            Object[] params = {genre.getGenreID(), mvName.getName(), String.valueOf(releaseDate.getDate()), duration, lang, director, writter, starring, musicProvider, country, metaDescription, basicTicketPrice, movieID};
-            rowAffected = DatabaseUtils.updateQuery(updateSql, params);
-        }
-        catch (SQLException e) {
-            e.printStackTrace();
-        }
-
-        if (rowAffected > 0) {
-            System.out.println("\nThe changes have been saved.");
-            return true;
-        }
-        else {
-            System.out.println("\nSomething went wrong...");
-            return false;
-        }
-    }
-
-    public boolean delete() throws SQLException {
-        int rowAffected = 0;
-
-        try {
-            Object[] params = {movieID};
-            rowAffected = DatabaseUtils.deleteQueryById("movie", "movie_status", "movie_id", params);
-        }
-        catch (SQLException e) {
-            e.printStackTrace();
-        }
-
-        if (rowAffected > 0) {
-            System.out.println("\nThe movie has been deleted.");
-            return true;
-        } else {
-            System.out.println("\nSomething went wrong...");
-            return false;
-        }
-    }
-
-    public static ArrayList<Movie> viewMovieListByFilter(Scanner sc) throws Exception {
-        LocalDate currentDate = LocalDate.now();
-        ArrayList<Movie> moviesAfterFiltered = new ArrayList<>();
-        boolean error = true;
-        int choice = 0;
-
-        do {
-            do {
-                try {
-                    System.out.println("\nPlease select a movie filtering from the list below: ");
-                    System.out.println("1. Future Movie");
-                    System.out.println("2. Movie within 1 week");
-                    System.out.println("3. Movie within 1 month");
-                    System.out.println("4. Movie within 3 months");
-                    System.out.println("5. Movie within 1 year");
-                    System.out.println("6. All movies");
-                    System.out.print("\nEnter your selection (0 - Back): ");
-                    choice = sc.nextInt();
-                    sc.nextLine();
-
-                    if (choice < 0 || choice > 6) {
-                        System.out.println("Your choice is not among the available options! PLease try again.");
-                    } else {
-                        error = false;
-                    }
-                } catch (InputMismatchException e) {
-                    System.out.println("Please enter a valid choice!");
-                    sc.nextLine();
-                }
-            } while (error);
-
-            switch (choice) {
-                case 0:
-                    return null;
-                case 1:
-                    // 1. future movie
-                    LocalDate futureMovie = currentDate.plusDays(1);
-                    moviesAfterFiltered = showMovieListAfterFiltered(futureMovie, null, 1);
-                    break;
-                case 2:
-                    // 2. within 1 week
-                    LocalDate oneWeekAgo = currentDate.minusWeeks(1);
-                    moviesAfterFiltered = showMovieListAfterFiltered(oneWeekAgo, currentDate, 1);
-                    break;
-                case 3:
-                    // 3. within 1 month
-                    LocalDate oneMonthAgo = currentDate.minusMonths(1);
-                    moviesAfterFiltered = showMovieListAfterFiltered(oneMonthAgo, currentDate, 1);
-                    break;
-                case 4:
-                    // 4. within 3 month
-                    LocalDate threeMonthAgo = currentDate.minusMonths(3);
-                    moviesAfterFiltered = showMovieListAfterFiltered(threeMonthAgo, currentDate, 1);
-                    break;
-                case 5:
-                    // 5. within 1 year
-                    LocalDate oneYearAgo = currentDate.minusYears(1);
-                    moviesAfterFiltered = showMovieListAfterFiltered(oneYearAgo, currentDate, 1);
-                    break;
-                case 6:
-                    // 6. all movie
-                    moviesAfterFiltered = showMovieListAfterFiltered(null, null, 1);
-                    break;
-            }
-        } while (moviesAfterFiltered.isEmpty() && choice != 0);
-
-        return moviesAfterFiltered;
-    }
-
-    public static ArrayList<Movie> showMovieListAfterFiltered(LocalDate expectedDate, LocalDate currentDate, int status){
-        ArrayList<Movie> movies = new ArrayList<>();
-
-        try {
-            Object[] params = {status};
-            ResultSet result = DatabaseUtils.selectQueryById("*", "movie", "movie_status = ?", params);
-
-            while (result.next()) {
-                Movie movie = new Movie();
-
-                movie.setMovieID(result.getInt("movie_id"));
-                movie.setGenre(new Genre(result.getInt("genre_id")));
-                movie.setMvName(new Name(result.getString("mv_name")));
-                movie.setReleaseDate(new DateTime(result.getDate("release_date").toLocalDate()));
-                movie.setDuration(result.getInt("duration"));
-                movie.setLang(result.getString("lang"));
-                movie.setDirector(result.getString("director"));
-                movie.setWritter(result.getString("writter"));
-                movie.setStarring(result.getString("starring"));
-                movie.setMusicProvider(result.getString("music"));
-                movie.setCountry(result.getString("country"));
-                movie.setMetaDescription(result.getString("meta_description"));
-                movie.setBasicTicketPrice(result.getDouble("basic_TicketPrice"));
-                movie.setStatus(result.getInt("movie_status"));
-
-                movies.add(movie);
-            }
-
-            result.close();
-        }
-        catch (SQLException e) {
-            e.printStackTrace();
-        }
-
-        ArrayList<Movie> moviesAfterFiltered = new ArrayList<>();
-
-        System.out.printf("\n%-5s %s\n", "No", "Movie Name");
-
-        int countFuture = 1;
-        int countAll = 1;
-        int countOther = 1;
-
-        for (int i = 0; i < movies.size(); i++) {
-            LocalDate localReleaseDate = movies.get(i).getReleaseDate().getDate();
-
-            if (expectedDate != null && currentDate == null) {  // Future Movie(s)
-                if (localReleaseDate.equals(expectedDate) || localReleaseDate.isAfter(expectedDate)) {
-                    System.out.printf("%-5d %s\n", countFuture, movies.get(i).getMvName().getName());
-                    moviesAfterFiltered.add(movies.get(i));
-                    countFuture++;
-                }
-            } else if (expectedDate == null && currentDate == null) {  // All Movies
-                System.out.printf("%-5d %s\n", countAll, movies.get(i).getMvName().getName());
-                moviesAfterFiltered.add(movies.get(i));
-                countAll++;
-            }
-            else {
-                if (localReleaseDate.equals(expectedDate) || (localReleaseDate.isAfter(expectedDate) && localReleaseDate.isBefore(currentDate))) {
-                    System.out.printf("%-5d %s\n", countOther, movies.get(i).getMvName().getName());
-                    moviesAfterFiltered.add(movies.get(i));
-                    countOther++;
-                }
-            }
-        }
-
-        if (moviesAfterFiltered.isEmpty()) {
-            System.out.println("Sorry, no movie found!");
-        }
-
-        return moviesAfterFiltered;
-    }
-
-    // Method for add movie
-    public static String getMultipleValues(Scanner sc, String propertyName, String propertyPluralName) throws Exception {
-        StringBuilder result = new StringBuilder();
-        String continues = "N";
-        boolean error = true;
-
-        do {
-            System.out.print("\nEnter the movie " + propertyName + ": ");
-            String value = sc.nextLine();
-
-            Name name = new Name(value);
-
-            String errorMessage = MovieValidator.checkValue(value, propertyName);
-
-            if (errorMessage == null) {
-                name.capitalizeWords();
-                error = false;
-
-                do {
-                    System.out.println("\nIs there another " + propertyPluralName + " for this movie? (Y / N)");
-                    System.out.print("Answer: ");
-                    String answer = sc.next();
-                    sc.nextLine();
-
-                    continues = SystemClass.askForContinue(answer);
-
-                } while (continues.equals("Invalid"));
-
-                if (continues.equals("Y")) {
-                    result.append(name.getName()).append(", ");
-                } else {
-                    result.append(name.getName());
-                }
-            } else {
-                System.out.println(errorMessage);
-                error = true;
-            }
-        } while (error || continues.equals("Y"));
-
-        return result.toString();
-    }
-
-    public static String getMultipleChosens(Scanner sc, String[] array, String propertyName){
-        boolean error;
-
-        do {
-            System.out.println("\nAvailable " + propertyName);
-            try {
-                for (int i = 0; i < array.length; i++) {
-                    System.out.println((i + 1) + ". " + array[i]);
-                }
-
-                System.out.print("\nEnter your selection: ");
-                int choice = sc.nextInt();
-                sc.nextLine();
-
-                String errorMessage = MovieValidator.checkRange(choice, array);
-
-                if (errorMessage == null) {
-                    return array[choice - 1];  // Array starts from index 0
-                } else {
-                    System.out.println(errorMessage);
-                    error = true;
-                }
-            } catch (InputMismatchException e) {
-                System.out.println("Please enter a valid number!");
-                sc.nextLine();
-                error = true;
-            }
-        } while (error);
-
-        return null;
-    }
-
-    public static double getTicketPrice(Scanner sc, String propertyName){
-        boolean error;
-
-        do {
-            try {
-                System.out.print("\nEnter movie " + propertyName + " ticket price (RM): ");
-                double mvTicketPrice = sc.nextDouble();
-                sc.nextLine();
-
-                String errorMessage = MovieValidator.checkTicketPrice(mvTicketPrice);
-
-                if (errorMessage == null) {
-                    mvTicketPrice = MovieUtils.formatDouble(mvTicketPrice);
-                    return mvTicketPrice;
-                }
-                else {
-                    System.out.println(errorMessage);
-                    error = true;
-                }
-            }
-            catch (InputMismatchException e) {
-                System.out.println("Please enter a valid " + propertyName + " ticket price!");
-                sc.nextLine();
-                error = true;
-            }
-        } while (error);
-
-        return 0;
-    }
-
-    // Method for modify movie
     public int modifyMovieDetail(Scanner sc) throws SQLException {
         boolean error = true;
 
@@ -451,6 +160,51 @@
         return 0;
     }
 
+    public boolean modify() throws SQLException {
+        int rowAffected = 0;
+
+        try {
+            String updateSql = "UPDATE `movie` SET `genre_id`= ?, `mv_name`= ?," +
+                    "`release_date`= ?,`duration`= ?,`lang`= ?," +
+                    "`director`= ?,`writter`= ?,`starring`= ?,`music`= ?," +
+                    "`country`= ?,`meta_description`= ?, `basic_TicketPrice`= ? WHERE `movie_id` = ?";
+            Object[] params = {genre.getGenreID(), mvName.getName(), String.valueOf(releaseDate.getDate()), duration, lang, director, writter, starring, musicProvider, country, metaDescription, basicTicketPrice, movieID};
+            rowAffected = DatabaseUtils.updateQuery(updateSql, params);
+        }
+        catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+        if (rowAffected > 0) {
+            System.out.println("\nThe changes have been saved.");
+            return true;
+        }
+        else {
+            System.out.println("\nSomething went wrong...");
+            return false;
+        }
+    }
+
+    public boolean delete() throws SQLException {
+        int rowAffected = 0;
+
+        try {
+            Object[] params = {movieID};
+            rowAffected = DatabaseUtils.deleteQueryById("movie", "movie_status", "movie_id", params);
+        }
+        catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+        if (rowAffected > 0) {
+            System.out.println("\nThe movie has been deleted.");
+            return true;
+        } else {
+            System.out.println("\nSomething went wrong...");
+            return false;
+        }
+    }
+
     public void setMovieID(int movieID) {
         this.movieID = movieID;
     }
Index: Cinema_Management/Address.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Cinema_Management;\r\n\r\nimport java.sql.ResultSet;\r\nimport java.util.*;\r\n\r\npublic class Address {\r\n    private String street;\r\n    private String postcode;\r\n    private String city;\r\n    private String state;\r\n    private static Map<String, List<String>> stateToCities;\r\n    private static Map<String, List<String>> cityToPostcode;\r\n\r\n    // Constructor\r\n    public Address() {\r\n    }\r\n\r\n    public Address(String address) {\r\n        String[] parts = address.split(\", \");\r\n\r\n        street = parts[0].trim() + \", \" + parts[1].trim();  // 108, JALAN WONG FOOK\r\n        String[] cityPostcode = parts[2].split(\" \"); // 分割城市和邮编\r\n        if (cityPostcode.length == 3) {\r\n            postcode = cityPostcode[0].trim(); // 10050\r\n            city = cityPostcode[1].trim() + \" \" + cityPostcode[2].trim(); // GEORGE TOWN\r\n        }\r\n        else {\r\n            postcode = cityPostcode[0].trim();\r\n            city = cityPostcode[1].trim();\r\n        }\r\n        state = parts[3].trim(); // PENANG\r\n    }\r\n\r\n    public Address(String street, String postcode, String city, String state) {\r\n        this.street = street;\r\n        this.postcode = postcode;\r\n        this.city = city;\r\n        this.state = state;\r\n    }\r\n\r\n    // Method\r\n    static {\r\n        stateToCities = new LinkedHashMap<>();\r\n        stateToCities.put(\"PERLIS\", Arrays.asList(\"KANGAR\", \"ARAU\", \"PADANG BESAR\", \"KUALA PERLIS\", \"JEJAWI\", \"BESERI\"));\r\n        stateToCities.put(\"KEDAH\", Arrays.asList(\"ALOR SETAR\", \"KUAH\", \"KULIM\", \"YAN\", \"PADANG SERAI\", \"SUNGAI PETANI\"));\r\n        stateToCities.put(\"PENANG\", Arrays.asList(\"GEORGE TOWN\", \"JELUTONG\", \"BATU FERRINGHI\", \"BUTTERWORTH\", \"KEPALA BATAS\", \"TASEK GELUGOR\", \"BUKIT MERTAJAM\", \"BAYAN LEPAS\", \"BATU KAWAN\"));\r\n        stateToCities.put(\"PERAK\", Arrays.asList(\"IPOH\", \"BATU GAJAH\", \"TAIPING\", \"TELUK INTAN\", \"SITIAWAN\"));\r\n        stateToCities.put(\"SELANGOR\", Arrays.asList(\"KUALA LUMPUR\", \"SHAH ALAM\", \"PETALING JAYA\", \"SUBANG JAYA\", \"KLANG\", \"SELAYANG\"));\r\n        stateToCities.put(\"NEGERI SEMBILAN\", Arrays.asList(\"SEREMBAN\", \"PORT DICKSON\", \"REMBAU\", \"SRI JEMPOL\", \"TAMPIN\", \"JELEBU\"));\r\n        stateToCities.put(\"MALACCA\", Arrays.asList(\"MALACCA CITY\", \"AYER KEROH\", \"KUALA LINGGI\", \"ALOR GAJAH\", \"JASIN\"));\r\n        stateToCities.put(\"JOHOR\", Arrays.asList(\"JOHOR BAHRU\", \"ISKANDAR PUTERI\", \"MUAR\", \"BATU PAHAT\", \"SEGAMAT\", \"KOTA TINGGI\"));\r\n        stateToCities.put(\"KELANTAN\", Arrays.asList(\"KOTA BHARU\", \"PASIR MAS\", \"TUMPAT\", \"TANAH MERAH\"));\r\n        stateToCities.put(\"TERENGGANU\", Arrays.asList(\"KUALA TERENGGANU\", \"KUALA BESUT\", \"BUKIT BESI\", \"DUNGUN\"));\r\n        stateToCities.put(\"PAHANG\", Arrays.asList(\"KUANTAN\", \"CAMERON HIGHLANDS\", \"JERANTUT\", \"KEMAYAN\"));\r\n\r\n        cityToPostcode = new LinkedHashMap<>();\r\n        // Perlis\r\n        cityToPostcode.put(\"KANGAR\", Arrays.asList(\"01000\", \"02400\", \"02500\"));\r\n        cityToPostcode.put(\"ARAU\", Arrays.asList(\"02600\", \"02607\", \"02609\"));\r\n        cityToPostcode.put(\"PADANG BESAR\", Arrays.asList(\"02000\", \"02100\", \"02200\"));\r\n        cityToPostcode.put(\"PADANG SERAI\", Arrays.asList(\"09400\", \"09410\"));\r\n        cityToPostcode.put(\"JEJAWI\", Arrays.asList(\"01000\"));\r\n        cityToPostcode.put(\"BESERI\", Arrays.asList(\"02400\", \"02450\"));\r\n\r\n        // Kedah\r\n        cityToPostcode.put(\"ALOR SETAR\", Arrays.asList(\"05400\", \"05150\", \"05594\", \"05700\", \"05710\", \"05720\", \"06250\"));\r\n        cityToPostcode.put(\"KUAH\", Arrays.asList(\"07000\"));\r\n        cityToPostcode.put(\"KULIM\", Arrays.asList(\"09000\", \"09010\", \"09020\"));\r\n        cityToPostcode.put(\"YAN\", Arrays.asList(\"06900\"));\r\n        cityToPostcode.put(\"PADANG SERAI\", Arrays.asList(\"09400\", \"09410\"));\r\n        cityToPostcode.put(\"SUNGAI PETANI\", Arrays.asList(\"08000\", \"08010\"));\r\n\r\n        // Penang\r\n        cityToPostcode.put(\"GEORGE TOWN\", Arrays.asList(\"10000\", \"10050\", \"10100\", \"10150\", \"10200\"));\r\n        cityToPostcode.put(\"JELUTONG\", Arrays.asList(\"11600\"));\r\n        cityToPostcode.put(\"BATU FERRINGHI\", Arrays.asList(\"11100\"));\r\n        cityToPostcode.put(\"BUTTERWORTH\", Arrays.asList(\"12100\", \"12200\", \"13000\", \"13400\", \"13800\"));\r\n        cityToPostcode.put(\"KEPALA BATAS\", Arrays.asList(\"13200\", \"13210\"));\r\n        cityToPostcode.put(\"TASEK GELUGOR\", Arrays.asList(\"13300\", \"13310\"));\r\n        cityToPostcode.put(\"BUKIT MERTAJAM\", Arrays.asList(\"14000\", \"14007\", \"14009\", \"14020\"));\r\n        cityToPostcode.put(\"BAYAN LEPAS\", Arrays.asList(\"11900\", \"11920\", \"11950\"));\r\n        cityToPostcode.put(\"BATU KAWAN\", Arrays.asList(\"14100\", \"14110\"));\r\n\r\n        // Perak\r\n        cityToPostcode.put(\"IPOH\", Arrays.asList(\"30000\", \"30010\", \"31350\", \"31400\"));\r\n        cityToPostcode.put(\"BATU GAJAH\", Arrays.asList(\"31000\", \"31007\", \"31009\"));\r\n        cityToPostcode.put(\"TAIPING\", Arrays.asList(\"34000\", \"34020\", \"34030\", \"34300\", \"34600\", \"34700\"));\r\n        cityToPostcode.put(\"TELUK INTAN\", Arrays.asList(\"36000\", \"36008\", \"36030\", \"36400\"));\r\n        cityToPostcode.put(\"SITIAWAN\", Arrays.asList(\"32000\", \"32400\", \"32700\"));\r\n\r\n        // Selangor\r\n        cityToPostcode.put(\"KUALA LUMPUR\", Arrays.asList(\"64000\", \"68100\"));\r\n        cityToPostcode.put(\"SHAH ALAM\", Arrays.asList(\"40150\", \"40160\", \"40170\", \"40470\", \"40610\", \"40800\"));\r\n        cityToPostcode.put(\"PETALING JAYA\", Arrays.asList(\"46050\", \"47301\", \"47400\", \"47410\", \"47800\"));\r\n        cityToPostcode.put(\"SUBANG JAYA\", Arrays.asList(\"46150\", \"47300\", \"47301\", \"47410\", \"47500\", \"47650\"));\r\n        cityToPostcode.put(\"KLANG\", Arrays.asList(\"41100\", \"41150\", \"41200\", \"41300\", \"42100\", \"42600\", \"68000\"));\r\n        cityToPostcode.put(\"SELAYANG\", Arrays.asList(\"68100\"));\r\n\r\n        // Negeri Sembilan\r\n        cityToPostcode.put(\"SEREMBAN\", Arrays.asList(\"70000\", \"70100\", \"70200\", \"70300\", \"70400\", \"70450\", \"71000\"));\r\n        cityToPostcode.put(\"PORT DICKSON\", Arrays.asList(\"71000\", \"71010\", \"71960\"));\r\n        cityToPostcode.put(\"REMBAU\", Arrays.asList(\"71300\", \"71400\"));\r\n        cityToPostcode.put(\"SRI JEMPOL\", Arrays.asList(\"72100\", \"72120\", \"72127\", \"72129\"));\r\n        cityToPostcode.put(\"TAMPIN\", Arrays.asList(\"70450\", \"71150\", \"71200\", \"71300\", \"71450\", \"72100\", \"72200\", \"73000\", \"73300\"));\r\n        cityToPostcode.put(\"JELEBU\", Arrays.asList(\"70100\", \"70400\", \"71500\", \"71600\", \"71650\", \"71750\", \"71770\"));\r\n\r\n        // Malacca\r\n        cityToPostcode.put(\"MALACCA CITY\", Arrays.asList(\"75000\", \"75200\", \"75250\", \"75300\", \"75460\"));\r\n        cityToPostcode.put(\"AYER KEROH\", Arrays.asList(\"75450\"));\r\n        cityToPostcode.put(\"KUALA LINGGI\", Arrays.asList(\"78200\"));\r\n        cityToPostcode.put(\"ALOR GAJAH\", Arrays.asList(\"78000\", \"78009\"));\r\n        cityToPostcode.put(\"JASIN\", Arrays.asList(\"77000\", \"77007\", \"77008\", \"77009\"));\r\n\r\n        // Johor\r\n        cityToPostcode.put(\"JOHOR BAHRU\", Arrays.asList(\"80100\", \"80150\", \"80200\", \"80250\", \"80300\", \"81200\", \"81300\"));\r\n        cityToPostcode.put(\"ISKANDAR PUTERI\", Arrays.asList(\"79000\", \"79100\", \"79250\", \"79504\", \"79505\", \"79511\", \"79570\"));\r\n        cityToPostcode.put(\"MUAR\", Arrays.asList(\"81850\", \"84000\", \"84200\"));\r\n        cityToPostcode.put(\"BATU PAHAT\", Arrays.asList(\"83000\"));\r\n        cityToPostcode.put(\"SEGAMAT\", Arrays.asList(\"85000\"));\r\n        cityToPostcode.put(\"KOTA TINGGI\", Arrays.asList(\"81900\"));\r\n\r\n        // Kelantan\r\n        cityToPostcode.put(\"KOTA BHARU\", Arrays.asList(\"15000\", \"15050\", \"15200\", \"15300\", \"15350\", \"16100\"));\r\n        cityToPostcode.put(\"PASIR MAS\", Arrays.asList(\"17000\", \"17010\"));\r\n        cityToPostcode.put(\"TUMPAT\", Arrays.asList(\"16080\", \"16200\", \"16210\"));\r\n        cityToPostcode.put(\"TANAH MERAH\", Arrays.asList(\"17500\"));\r\n\r\n        // Terengganu\r\n        cityToPostcode.put(\"KUALA TERENGGANU\", Arrays.asList(\"20500\", \"21000\", \"21080\", \"21100\", \"21200\", \"21300\"));\r\n        cityToPostcode.put(\"KUALA BESUT\", Arrays.asList(\"22300\"));\r\n        cityToPostcode.put(\"BUKIT BESI\", Arrays.asList(\"23200\"));\r\n        cityToPostcode.put(\"DUNGUN\", Arrays.asList(\"23000\", \"23007\", \"23009\", \"23050\"));\r\n\r\n        // Pahang\r\n        cityToPostcode.put(\"KUANTAN\", Arrays.asList(\"25000\", \"25150\", \"25200\", \"25250\", \"25300\", \"26060\", \"26080\", \"26100\"));\r\n        cityToPostcode.put(\"CAMERON HIGHLANDS\", Arrays.asList(\"69000\"));\r\n        cityToPostcode.put(\"JERANTUT\", Arrays.asList(\"27000\", \"27040\", \"27050\", \"27070\", \"27090\"));\r\n        cityToPostcode.put(\"KEMAYAN\", Arrays.asList(\"28340\", \"28380\"));\r\n    }\r\n\r\n    public String getAddress() {\r\n        return street.toUpperCase() + \", \" + postcode + \" \" + city.toUpperCase() + \", \" + state.toUpperCase();\r\n    }\r\n\r\n    public static void viewStateList() {\r\n        int count = 0;\r\n\r\n        for (String state : stateToCities.keySet()) {\r\n            System.out.println((count + 1) + \". \" + state);\r\n            count++;\r\n        }\r\n    }\r\n\r\n    public static String getStateName(int stateIndex) {\r\n        List<String> states = new ArrayList<>(stateToCities.keySet());\r\n\r\n        return states.get(stateIndex);\r\n    }\r\n\r\n    public static int viewCityList(int stateSelected) {\r\n        List<String> states = new ArrayList<>(stateToCities.keySet());  // 使 stateToCities 里面的 state 可以被索引\r\n\r\n        String selectedState = states.get(stateSelected);\r\n        int count = 0;\r\n\r\n        for (String city : stateToCities.get(selectedState)) {\r\n            System.out.println((count + 1) + \". \" + city);\r\n            count++;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    public static String getCityName(String stateName, int cityIndex) {\r\n        List<String> cities = stateToCities.get(stateName);  // 根据州名来获取 city 列表\r\n\r\n        return cities.get(cityIndex);  // 返回所选的 city 名字\r\n    }\r\n\r\n    public static int viewPostcodeList(String citySelected) {\r\n        int count = 0;\r\n\r\n        for (String postcode : cityToPostcode.get(citySelected)) {\r\n            System.out.println((count + 1) + \". \" + postcode);\r\n            count++;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    public static String getPostcodeSelected(String cityName, int postcodeIndex) {\r\n        List<String> postcodes = cityToPostcode.get(cityName);  // 根据 city 名来获取 postcode 列表\r\n\r\n        return postcodes.get(postcodeIndex);  // 返回所选的 postcode\r\n    }\r\n\r\n    public boolean checkAddressDuplicate(ResultSet result, String searchThing) {\r\n        try {\r\n            while (result.next()) {\r\n                String address = result.getString(searchThing);\r\n\r\n                if (getAddress().equals(address)) {\r\n                    result.close();\r\n                    return true;\r\n                }\r\n            }\r\n            result.close();\r\n\r\n            return false;\r\n        }\r\n        catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    public boolean checkEditAddressDuplicate(ResultSet result, String searchThing, String orgAddress) {\r\n        try {\r\n            while (result.next()) {\r\n                String address = result.getString(searchThing);\r\n\r\n                if (getAddress().equals(address)) {\r\n                    if (getAddress().equals(orgAddress)) {\r\n                        result.close();\r\n                        return false;\r\n                    }\r\n                    else {\r\n                        result.close();\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            result.close();\r\n\r\n            return false;\r\n        }\r\n        catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    // Setter\r\n    public void setStreet(String street) {\r\n        this.street = street;\r\n    }\r\n\r\n    public void setPostcode(String postcode) {\r\n        this.postcode = postcode;\r\n    }\r\n\r\n    public void setCity(String city) {\r\n        this.city = city;\r\n    }\r\n\r\n    public void setState(String state) {\r\n        this.state = state;\r\n    }\r\n\r\n    // Getter\r\n    public String getStreet() {\r\n        return street;\r\n    }\r\n\r\n    public String getPostcode() {\r\n        return postcode;\r\n    }\r\n\r\n    public String getCity() {\r\n        return city;\r\n    }\r\n\r\n    public String getState() {\r\n        return state;\r\n    }\r\n\r\n    public static Map<String, List<String>> getStateToCities() {\r\n        return stateToCities;\r\n    }\r\n\r\n    public static Map<String, List<String>> getCityToPostcode() {\r\n        return cityToPostcode;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Cinema_Management/Address.java b/Cinema_Management/Address.java
--- a/Cinema_Management/Address.java	(revision b88829f35ac4a26db87027d0772291d3eec62cca)
+++ b/Cinema_Management/Address.java	(date 1694857525295)
@@ -142,56 +142,6 @@
         return street.toUpperCase() + ", " + postcode + " " + city.toUpperCase() + ", " + state.toUpperCase();
     }
 
-    public static void viewStateList() {
-        int count = 0;
-
-        for (String state : stateToCities.keySet()) {
-            System.out.println((count + 1) + ". " + state);
-            count++;
-        }
-    }
-
-    public static String getStateName(int stateIndex) {
-        List<String> states = new ArrayList<>(stateToCities.keySet());
-
-        return states.get(stateIndex);
-    }
-
-    public static int viewCityList(int stateSelected) {
-        List<String> states = new ArrayList<>(stateToCities.keySet());  // 使 stateToCities 里面的 state 可以被索引
-
-        String selectedState = states.get(stateSelected);
-        int count = 0;
-
-        for (String city : stateToCities.get(selectedState)) {
-            System.out.println((count + 1) + ". " + city);
-            count++;
-        }
-        return count;
-    }
-
-    public static String getCityName(String stateName, int cityIndex) {
-        List<String> cities = stateToCities.get(stateName);  // 根据州名来获取 city 列表
-
-        return cities.get(cityIndex);  // 返回所选的 city 名字
-    }
-
-    public static int viewPostcodeList(String citySelected) {
-        int count = 0;
-
-        for (String postcode : cityToPostcode.get(citySelected)) {
-            System.out.println((count + 1) + ". " + postcode);
-            count++;
-        }
-        return count;
-    }
-
-    public static String getPostcodeSelected(String cityName, int postcodeIndex) {
-        List<String> postcodes = cityToPostcode.get(cityName);  // 根据 city 名来获取 postcode 列表
-
-        return postcodes.get(postcodeIndex);  // 返回所选的 postcode
-    }
-
     public boolean checkAddressDuplicate(ResultSet result, String searchThing) {
         try {
             while (result.next()) {
Index: Cinema_Management/AddressUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Cinema_Management/AddressUtils.java b/Cinema_Management/AddressUtils.java
new file mode 100644
--- /dev/null	(date 1694857525299)
+++ b/Cinema_Management/AddressUtils.java	(date 1694857525299)
@@ -0,0 +1,58 @@
+package Cinema_Management;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class AddressUtils {
+    private AddressUtils(){};
+
+    public static void viewStateList() {
+        int count = 0;
+
+        for (String state : Address.getStateToCities().keySet()) {
+            System.out.println((count + 1) + ". " + state);
+            count++;
+        }
+    }
+
+    public static String getStateName(int stateIndex) {
+        List<String> states = new ArrayList<>(Address.getStateToCities().keySet());
+
+        return states.get(stateIndex);
+    }
+
+    public static int viewCityList(int stateSelected) {
+        List<String> states = new ArrayList<>(Address.getStateToCities().keySet());  // 使 stateToCities 里面的 state 可以被索引
+
+        String selectedState = states.get(stateSelected);
+        int count = 0;
+
+        for (String city : Address.getStateToCities().get(selectedState)) {
+            System.out.println((count + 1) + ". " + city);
+            count++;
+        }
+        return count;
+    }
+
+    public static String getCityName(String stateName, int cityIndex) {
+        List<String> cities = Address.getStateToCities().get(stateName);  // 根据州名来获取 city 列表
+
+        return cities.get(cityIndex);  // 返回所选的 city 名字
+    }
+
+    public static int viewPostcodeList(String citySelected) {
+        int count = 0;
+
+        for (String postcode : Address.getCityToPostcode().get(citySelected)) {
+            System.out.println((count + 1) + ". " + postcode);
+            count++;
+        }
+        return count;
+    }
+
+    public static String getPostcodeSelected(String cityName, int postcodeIndex) {
+        List<String> postcodes = Address.getCityToPostcode().get(cityName);  // 根据 city 名来获取 postcode 列表
+
+        return postcodes.get(postcodeIndex);  // 返回所选的 postcode
+    }
+}
