Index: Movie_Management/MovieUtils.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Movie_Management;\r\n\r\nimport Database.DatabaseUtils;\r\nimport Driver.DateTime;\r\nimport Driver.Name;\r\nimport Driver.SystemClass;\r\nimport Genre_Management.Genre;\r\n\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.time.LocalDate;\r\nimport java.util.ArrayList;\r\nimport java.util.InputMismatchException;\r\nimport java.util.Scanner;\r\n\r\npublic class MovieUtils {\r\n    private MovieUtils(){\r\n    }\r\n\r\n    public static ArrayList<Movie> queryMovieByName(String mvName) throws SQLException {\r\n        ArrayList<Movie> searchResults = new ArrayList<>();\r\n\r\n        ResultSet result = null;\r\n        try {\r\n            Object[] params = {\"%\" + mvName + \"%\"};\r\n            result = DatabaseUtils.selectQueryById(\"*\", \"movie\", \"mv_name LIKE ? AND release_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\", params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        while (result.next()) {\r\n            Movie movie = new Movie();\r\n\r\n            movie.setMovieID(result.getInt(\"movie_id\"));\r\n            movie.setGenre(new Genre(result.getInt(\"genre_id\")));\r\n            movie.setMvName(new Name(result.getString(\"mv_name\")));\r\n            movie.setReleaseDate(new DateTime(result.getDate(\"release_date\").toLocalDate()));\r\n            movie.setDuration(result.getInt(\"duration\"));\r\n            movie.setLang(result.getString(\"lang\"));\r\n            movie.setDirector(result.getString(\"director\"));\r\n            movie.setWritter(result.getString(\"writter\"));\r\n            movie.setStarring(result.getString(\"starring\"));\r\n            movie.setMusicProvider(result.getString(\"music\"));\r\n            movie.setCountry(result.getString(\"country\"));\r\n            movie.setMetaDescription(result.getString(\"meta_description\"));\r\n            movie.setBasicTicketPrice(result.getDouble(\"basic_TicketPrice\"));\r\n            movie.setStatus(result.getInt(\"movie_status\"));\r\n\r\n            searchResults.add(movie);\r\n        }\r\n\r\n        result.close();\r\n\r\n        return searchResults;\r\n    }\r\n\r\n    public static ArrayList<Movie> queryMovieByGenre(Genre genre) throws SQLException {\r\n        ArrayList<Movie> searchResults = new ArrayList<>();\r\n        ResultSet result = null;\r\n\r\n        try {\r\n            Object[] params = {genre.getGenreID(), 1};\r\n            result = DatabaseUtils.selectQueryById(\"*\", \"movie\", \"genre_id = ? AND release_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND movie_status = ?\", params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        while (result.next()) {\r\n            Movie movie = new Movie();\r\n\r\n            movie.setMovieID(result.getInt(\"movie_id\"));\r\n            movie.setGenre(new Genre(result.getInt(\"genre_id\")));\r\n            movie.setMvName(new Name(result.getString(\"mv_name\")));\r\n            movie.setReleaseDate(new DateTime(result.getDate(\"release_date\").toLocalDate()));\r\n            movie.setDuration(result.getInt(\"duration\"));\r\n            movie.setLang(result.getString(\"lang\"));\r\n            movie.setDirector(result.getString(\"director\"));\r\n            movie.setWritter(result.getString(\"writter\"));\r\n            movie.setStarring(result.getString(\"starring\"));\r\n            movie.setMusicProvider(result.getString(\"music\"));\r\n            movie.setCountry(result.getString(\"country\"));\r\n            movie.setMetaDescription(result.getString(\"meta_description\"));\r\n            movie.setBasicTicketPrice(result.getDouble(\"basic_TicketPrice\"));\r\n            movie.setStatus(result.getInt(\"movie_status\"));\r\n\r\n            searchResults.add(movie);\r\n        }\r\n\r\n        result.close();\r\n\r\n        return searchResults;\r\n    }\r\n\r\n    public static ArrayList<Movie> viewMovieListByFilter(Scanner sc) throws Exception {\r\n        LocalDate currentDate = LocalDate.now();\r\n        ArrayList<Movie> moviesAfterFiltered = new ArrayList<>();\r\n        boolean error = true;\r\n        int choice = 0;\r\n\r\n        do {\r\n            do {\r\n                try {\r\n                    System.out.println(\"\\nPlease select a movie filtering from the list below: \");\r\n                    System.out.println(\"1. Future Movie\");\r\n                    System.out.println(\"2. Movie within 1 week\");\r\n                    System.out.println(\"3. Movie within 1 month\");\r\n                    System.out.println(\"4. Movie within 3 months\");\r\n                    System.out.println(\"5. Movie within 1 year\");\r\n                    System.out.println(\"6. All movies\");\r\n                    System.out.print(\"\\nEnter your selection (0 - Back): \");\r\n                    choice = sc.nextInt();\r\n                    sc.nextLine();\r\n\r\n                    if (choice < 0 || choice > 6) {\r\n                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                    } else {\r\n                        error = false;\r\n                    }\r\n                } catch (InputMismatchException e) {\r\n                    System.out.println(\"Please enter a valid choice!\");\r\n                    sc.nextLine();\r\n                }\r\n            } while (error);\r\n\r\n            switch (choice) {\r\n                case 0:\r\n                    return null;\r\n                case 1:\r\n                    // 1. future movie\r\n                    LocalDate futureMovie = currentDate.plusDays(1);\r\n                    moviesAfterFiltered = showMovieListAfterFiltered(futureMovie, null, 1);\r\n                    break;\r\n                case 2:\r\n                    // 2. within 1 week\r\n                    LocalDate oneWeekAgo = currentDate.minusWeeks(1);\r\n                    moviesAfterFiltered = showMovieListAfterFiltered(oneWeekAgo, currentDate, 1);\r\n                    break;\r\n                case 3:\r\n                    // 3. within 1 month\r\n                    LocalDate oneMonthAgo = currentDate.minusMonths(1);\r\n                    moviesAfterFiltered = showMovieListAfterFiltered(oneMonthAgo, currentDate, 1);\r\n                    break;\r\n                case 4:\r\n                    // 4. within 3 month\r\n                    LocalDate threeMonthAgo = currentDate.minusMonths(3);\r\n                    moviesAfterFiltered = showMovieListAfterFiltered(threeMonthAgo, currentDate, 1);\r\n                    break;\r\n                case 5:\r\n                    // 5. within 1 year\r\n                    LocalDate oneYearAgo = currentDate.minusYears(1);\r\n                    moviesAfterFiltered = showMovieListAfterFiltered(oneYearAgo, currentDate, 1);\r\n                    break;\r\n                case 6:\r\n                    // 6. all movie\r\n                    moviesAfterFiltered = showMovieListAfterFiltered(null, null, 1);\r\n                    break;\r\n            }\r\n        } while (moviesAfterFiltered.isEmpty() && choice != 0);\r\n\r\n        return moviesAfterFiltered;\r\n    }\r\n\r\n    public static ArrayList<Movie> showMovieListAfterFiltered(LocalDate expectedDate, LocalDate currentDate, int status){\r\n        ArrayList<Movie> movies = new ArrayList<>();\r\n\r\n        try {\r\n            Object[] params = {status};\r\n            ResultSet result = DatabaseUtils.selectQueryById(\"*\", \"movie\", \"movie_status = ?\", params);\r\n\r\n            while (result.next()) {\r\n                Movie movie = new Movie();\r\n\r\n                movie.setMovieID(result.getInt(\"movie_id\"));\r\n                movie.setGenre(new Genre(result.getInt(\"genre_id\")));\r\n                movie.setMvName(new Name(result.getString(\"mv_name\")));\r\n                movie.setReleaseDate(new DateTime(result.getDate(\"release_date\").toLocalDate()));\r\n                movie.setDuration(result.getInt(\"duration\"));\r\n                movie.setLang(result.getString(\"lang\"));\r\n                movie.setDirector(result.getString(\"director\"));\r\n                movie.setWritter(result.getString(\"writter\"));\r\n                movie.setStarring(result.getString(\"starring\"));\r\n                movie.setMusicProvider(result.getString(\"music\"));\r\n                movie.setCountry(result.getString(\"country\"));\r\n                movie.setMetaDescription(result.getString(\"meta_description\"));\r\n                movie.setBasicTicketPrice(result.getDouble(\"basic_TicketPrice\"));\r\n                movie.setStatus(result.getInt(\"movie_status\"));\r\n\r\n                movies.add(movie);\r\n            }\r\n\r\n            result.close();\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        ArrayList<Movie> moviesAfterFiltered = new ArrayList<>();\r\n\r\n        System.out.printf(\"\\n%-5s %s\\n\", \"No\", \"Movie Name\");\r\n\r\n        int countFuture = 1;\r\n        int countAll = 1;\r\n        int countOther = 1;\r\n\r\n        for (int i = 0; i < movies.size(); i++) {\r\n            LocalDate localReleaseDate = movies.get(i).getReleaseDate().getDate();\r\n\r\n            if (expectedDate != null && currentDate == null) {  // Future Movie(s)\r\n                if (localReleaseDate.equals(expectedDate) || localReleaseDate.isAfter(expectedDate)) {\r\n                    System.out.printf(\"%-5d %s\\n\", countFuture, movies.get(i).getMvName().getName());\r\n                    moviesAfterFiltered.add(movies.get(i));\r\n                    countFuture++;\r\n                }\r\n            } else if (expectedDate == null && currentDate == null) {  // All Movies\r\n                System.out.printf(\"%-5d %s\\n\", countAll, movies.get(i).getMvName().getName());\r\n                moviesAfterFiltered.add(movies.get(i));\r\n                countAll++;\r\n            }\r\n            else {\r\n                if (localReleaseDate.equals(expectedDate) || (localReleaseDate.isAfter(expectedDate) && localReleaseDate.isBefore(currentDate))) {\r\n                    System.out.printf(\"%-5d %s\\n\", countOther, movies.get(i).getMvName().getName());\r\n                    moviesAfterFiltered.add(movies.get(i));\r\n                    countOther++;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (moviesAfterFiltered.isEmpty()) {\r\n            System.out.println(\"Sorry, no movie found!\");\r\n        }\r\n\r\n        return moviesAfterFiltered;\r\n    }\r\n\r\n    // Format double data type value to two decimal point\r\n    public static double formatDouble(double value){\r\n        return Math.round(value * 100.0) / 100.0;\r\n    }\r\n\r\n    // Method for add movie\r\n    public static String getMultipleValues(Scanner sc, String propertyName, String propertyPluralName) throws Exception {\r\n        StringBuilder result = new StringBuilder();\r\n        String continues = \"N\";\r\n        boolean error = true;\r\n\r\n        do {\r\n            System.out.print(\"\\nEnter the movie \" + propertyName + \": \");\r\n            String value = sc.nextLine();\r\n\r\n            Name name = new Name(value);\r\n\r\n            String errorMessage = MovieValidator.checkValue(value, propertyName);\r\n\r\n            if (errorMessage == null) {\r\n                name.capitalizeWords();\r\n                error = false;\r\n\r\n                do {\r\n                    System.out.println(\"\\nIs there another \" + propertyPluralName + \" for this movie? (Y / N)\");\r\n                    System.out.print(\"Answer: \");\r\n                    String answer = sc.next();\r\n                    sc.nextLine();\r\n\r\n                    continues = SystemClass.askForContinue(answer);\r\n\r\n                } while (continues.equals(\"Invalid\"));\r\n\r\n                if (continues.equals(\"Y\")) {\r\n                    result.append(name.getName()).append(\", \");\r\n                } else {\r\n                    result.append(name.getName());\r\n                }\r\n            } else {\r\n                System.out.println(errorMessage);\r\n                error = true;\r\n            }\r\n        } while (error || continues.equals(\"Y\"));\r\n\r\n        return result.toString();\r\n    }\r\n\r\n    public static String getMultipleChosens(Scanner sc, String[] array, String propertyName){\r\n        boolean error;\r\n\r\n        do {\r\n            System.out.println(\"\\nAvailable \" + propertyName);\r\n            try {\r\n                for (int i = 0; i < array.length; i++) {\r\n                    System.out.println((i + 1) + \". \" + array[i]);\r\n                }\r\n\r\n                System.out.print(\"\\nEnter your selection: \");\r\n                int choice = sc.nextInt();\r\n                sc.nextLine();\r\n\r\n                String errorMessage = MovieValidator.checkRange(choice, array);\r\n\r\n                if (errorMessage == null) {\r\n                    return array[choice - 1];  // Array starts from index 0\r\n                } else {\r\n                    System.out.println(errorMessage);\r\n                    error = true;\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Please enter a valid number!\");\r\n                sc.nextLine();\r\n                error = true;\r\n            }\r\n        } while (error);\r\n\r\n        return null;\r\n    }\r\n\r\n    public static double getTicketPrice(Scanner sc, String propertyName){\r\n        boolean error;\r\n\r\n        do {\r\n            try {\r\n                System.out.print(\"\\nEnter movie \" + propertyName + \" ticket price (RM): \");\r\n                double mvTicketPrice = sc.nextDouble();\r\n                sc.nextLine();\r\n\r\n                String errorMessage = MovieValidator.checkTicketPrice(mvTicketPrice);\r\n\r\n                if (errorMessage == null) {\r\n                    mvTicketPrice = MovieUtils.formatDouble(mvTicketPrice);\r\n                    return mvTicketPrice;\r\n                }\r\n                else {\r\n                    System.out.println(errorMessage);\r\n                    error = true;\r\n                }\r\n            }\r\n            catch (InputMismatchException e) {\r\n                System.out.println(\"Please enter a valid \" + propertyName + \" ticket price!\");\r\n                sc.nextLine();\r\n                error = true;\r\n            }\r\n        } while (error);\r\n\r\n        return 0;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Movie_Management/MovieUtils.java b/Movie_Management/MovieUtils.java
--- a/Movie_Management/MovieUtils.java	(revision fdc08511edf28627fe2a32c5ef49e4018f777694)
+++ b/Movie_Management/MovieUtils.java	(date 1694918032725)
@@ -37,7 +37,7 @@
             movie.setMvName(new Name(result.getString("mv_name")));
             movie.setReleaseDate(new DateTime(result.getDate("release_date").toLocalDate()));
             movie.setDuration(result.getInt("duration"));
-            movie.setLang(result.getString("lang"));
+            movie.setLanguage(result.getString("lang"));
             movie.setDirector(result.getString("director"));
             movie.setWritter(result.getString("writter"));
             movie.setStarring(result.getString("starring"));
@@ -75,7 +75,7 @@
             movie.setMvName(new Name(result.getString("mv_name")));
             movie.setReleaseDate(new DateTime(result.getDate("release_date").toLocalDate()));
             movie.setDuration(result.getInt("duration"));
-            movie.setLang(result.getString("lang"));
+            movie.setLanguage(result.getString("lang"));
             movie.setDirector(result.getString("director"));
             movie.setWritter(result.getString("writter"));
             movie.setStarring(result.getString("starring"));
@@ -177,7 +177,7 @@
                 movie.setMvName(new Name(result.getString("mv_name")));
                 movie.setReleaseDate(new DateTime(result.getDate("release_date").toLocalDate()));
                 movie.setDuration(result.getInt("duration"));
-                movie.setLang(result.getString("lang"));
+                movie.setLanguage(result.getString("lang"));
                 movie.setDirector(result.getString("director"));
                 movie.setWritter(result.getString("writter"));
                 movie.setStarring(result.getString("starring"));
Index: Schedule_Management/TimeTable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Schedule_Management;\r\n\r\nimport Database.DatabaseUtils;\r\nimport Driver.DatabaseOperations;\r\nimport Driver.Name;\r\nimport Cinema_Management.Cinema;\r\nimport Genre_Management.Genre;\r\nimport Hall_Management.Hall;\r\nimport Driver.DateTime;\r\nimport Movie_Management.Movie;\r\n\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.time.Duration;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalTime;\r\nimport java.util.ArrayList;\r\nimport java.util.InputMismatchException;\r\nimport java.util.Scanner;\r\n\r\npublic class TimeTable implements DatabaseOperations {\r\n    private int timetableID;\r\n    private Movie movie;\r\n    private Hall hall;\r\n    private DateTime showDate;\r\n    private LocalTime startTime;\r\n    private LocalTime endTime;\r\n\r\n    // Constructor\r\n    public TimeTable() {\r\n    }\r\n\r\n    public TimeTable(int timetableID, Movie movie, Hall hall, DateTime showDate, LocalTime startTime) {\r\n        this.timetableID = timetableID;\r\n        this.movie = movie;\r\n        this.hall = hall;\r\n        this.showDate = showDate;\r\n        this.startTime = startTime;\r\n        calculateEndTime(movie, startTime);\r\n    }\r\n\r\n    public TimeTable(Hall hall, DateTime showDate){\r\n        this.hall = hall;\r\n        this.showDate= showDate;\r\n    }\r\n\r\n    // Method\r\n    public ArrayList<TimeTable> viewSchedule() throws Exception {\r\n        ResultSet result = null;\r\n        try {\r\n            Object[] params = {hall.getHallID(), String.valueOf(showDate.getDate()), 1};\r\n            result = DatabaseUtils.selectQueryById(\"*\", \"timeTable\", \"hall_id = ? AND movie_showDate = ? AND timeTable_status = ?\", params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        ArrayList<TimeTable> schedules = new ArrayList<>();\r\n\r\n        while (result.next()) {\r\n            int timetableID = result.getInt(\"schedule_id\");\r\n            int movieID = result.getInt(\"movie_id\");\r\n            LocalTime startTime = result.getTime(\"movie_startTime\").toLocalTime();\r\n\r\n            // Movie\r\n            ResultSet result2 = null;\r\n            Movie movie = new Movie();\r\n\r\n            try {\r\n                Object[] params = {movieID};\r\n                result2 = DatabaseUtils.selectQueryById(\"*\", \"movie\", \"movie_id = ? LIMIT 1\", params);\r\n            } catch (SQLException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            while (result2.next()) {\r\n                movie.setMovieID(result2.getInt(\"movie_id\"));\r\n                movie.setGenre(new Genre(result2.getInt(\"genre_id\")));\r\n                movie.setMvName(new Name(result2.getString(\"mv_name\")));\r\n                movie.setReleaseDate(new DateTime(result2.getDate(\"release_date\").toLocalDate()));\r\n                movie.setDuration(result2.getInt(\"duration\"));\r\n                movie.setLang(result2.getString(\"lang\"));\r\n                movie.setDirector(result2.getString(\"director\"));\r\n                movie.setWritter(result2.getString(\"writter\"));\r\n                movie.setStarring(result2.getString(\"starring\"));\r\n                movie.setMusicProvider(result2.getString(\"music\"));\r\n                movie.setCountry(result2.getString(\"country\"));\r\n                movie.setMetaDescription(result2.getString(\"meta_description\"));\r\n                movie.setBasicTicketPrice(result2.getDouble(\"basic_TicketPrice\"));\r\n            }\r\n\r\n            TimeTable schedule = new TimeTable(timetableID, movie, hall, showDate, startTime);\r\n            schedules.add(schedule);\r\n        }\r\n\r\n        return schedules;\r\n    }\r\n\r\n    public static void printing(ArrayList<TimeTable> schedules) {\r\n        if (!schedules.isEmpty()) {\r\n            System.out.println(\"\\nMovie Schedule List for \" + schedules.get(0).showDate.getDate() + \" at Hall \" + schedules.get(0).hall.getHallID() + \":\\n\");\r\n            System.out.printf(\"%-30s %15s %15s\\n\", \"Movie Name\", \"Start Time\", \"End Time\");\r\n            for (int i = 0; i < schedules.size(); i++) {\r\n                System.out.printf((i + 1) + \". %-20s %17s %17s\\n\", schedules.get(i).movie.getMvName().getName(), schedules.get(i).startTime, schedules.get(i).endTime);\r\n            }\r\n        }\r\n        else {\r\n            System.out.println(\"\\nNo schedules available for the selected date and hall!\");\r\n        }\r\n    }\r\n\r\n    public static TimeTable acceptViewScheduleListInput(Scanner sc, Cinema cinemaSelected) {\r\n        // Hall\r\n        int hallNo = 0;\r\n        boolean error = true;\r\n        ArrayList<Hall> halls = new ArrayList<>();\r\n        do {\r\n            try {\r\n                System.out.println(\"\\nSelect the hall: \");\r\n                halls = cinemaSelected.getHallList(1);\r\n\r\n                for (int i = 0; i < halls.size(); i++) {\r\n                    System.out.println((i + 1) + \". \" + halls.get(i).getHallName().getName());\r\n                }\r\n\r\n                System.out.print(\"\\nEnter the hall no: \");\r\n                hallNo = sc.nextInt();\r\n                sc.nextLine();\r\n\r\n                if (hallNo > 0 && hallNo <= halls.size() && halls.get(hallNo - 1).getStatus() == 1) {\r\n                    error = false;\r\n                }\r\n                else {\r\n                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                }\r\n            }\r\n            catch (InputMismatchException e) {\r\n                System.out.println(\"Please enter a valid hall no!\");\r\n                sc.nextLine();\r\n            } catch (SQLException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        } while (error);\r\n\r\n        // Show Date\r\n        error = true;\r\n        String date = null;\r\n        DateTime viewDate = null;\r\n        boolean validDate = false;\r\n        do {\r\n            System.out.print(\"\\nEnter movie show date (YYYY-MM-DD): \");\r\n            date = sc.nextLine();\r\n\r\n            if (date.trim().isEmpty()) {\r\n                System.out.println(\"Please enter the show date.\");\r\n            } else {\r\n                try {\r\n                    String[] parts = date.split(\"-\");\r\n                    int year = Integer.parseInt(parts[0]);  // Java's built-in method for converting strings to integers (int type)\r\n                    int month = Integer.parseInt(parts[1]);\r\n                    int day = Integer.parseInt(parts[2]);\r\n\r\n                    // 验证日期是否 valid\r\n                    viewDate = new DateTime(year, month, day);\r\n                    validDate = viewDate.isValidDate();\r\n\r\n                    if (validDate == true) {\r\n                        error = false;\r\n                    } else {\r\n                        System.out.println(\"Please enter a valid date!\");\r\n                        error = true;\r\n                    }\r\n                } catch (Exception e) {\r\n                    System.out.println(\"The date format entered in wrong!\");\r\n                }\r\n            }\r\n        } while (error);\r\n\r\n        TimeTable timeTable = new TimeTable(halls.get(hallNo - 1), viewDate);\r\n        return timeTable;\r\n    }\r\n\r\n    public boolean add() throws SQLException {\r\n        int rowAffected = 0;\r\n        try {\r\n            Object[] params = {hall.getHallID(), movie.getMovieID(), showDate.getDate(), startTime, endTime};\r\n            String sql = \"INSERT INTO `timeTable` (`hall_id`, `movie_id`, `movie_showDate`, `movie_startTime`, `movie_endTime`) VALUES (?, ?, ?, ?, ?)\";\r\n            rowAffected = DatabaseUtils.insertQuery(sql, params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (rowAffected > 0) {\r\n            System.out.println(\"\\nSchedule successfully added...\");\r\n            return true;\r\n        }\r\n        else {\r\n            System.out.println(\"\\nSomething went wrong...\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean modify() throws SQLException {\r\n        int rowAffected = 0;\r\n\r\n        try {\r\n            Object[] params = {hall.getHallID(), movie.getMovieID(), String.valueOf(showDate.getDate()), startTime, endTime, timetableID};\r\n            String sql = \"UPDATE `timeTable` SET `hall_id` = ?, `movie_id` = ?, `movie_showDate` = ?, `movie_startTime` = ?, `movie_endTime` = ? WHERE `schedule_id` = ?\";\r\n            rowAffected = DatabaseUtils.updateQuery(sql, params);\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (rowAffected > 0) {\r\n            System.out.println(\"\\nSchedule successfully updated...\");\r\n            return true;\r\n        } else {\r\n            System.out.println(\"\\nSomething went wrong...\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean delete() throws SQLException {\r\n        int rowAffected = 0;\r\n\r\n        try {\r\n            Object[] params = {timetableID};\r\n            rowAffected = DatabaseUtils.deleteQueryById(\"timeTable\", \"timeTable_status\", \"schedule_id\", params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (rowAffected > 0) {\r\n            System.out.println(\"\\nThe schedule has been deleted.\");\r\n            return true;\r\n        } else {\r\n            System.out.println(\"\\nSomething went wrong...\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static ArrayList<LocalDate> generateOneWeekDateList() {\r\n        ArrayList<LocalDate> dateList = new ArrayList<>();\r\n        LocalDate currentDate = LocalDate.now(); // 获取当前日期\r\n\r\n        // 生成一周内的日期\r\n        for (int i = 0; i <= 6; i++) { // 一周有7天\r\n            dateList.add(currentDate);  // 将日期添加到列表中\r\n            System.out.println((i + 1) + \". \" + dateList.get(i));\r\n            currentDate = currentDate.plusDays(1); // 增加一天\r\n        }\r\n\r\n        return dateList;\r\n    }\r\n\r\n    public int showHallAndTime(int count, ArrayList<TimeTable> timeTables) throws SQLException {\r\n        ResultSet result = null;\r\n        try {\r\n            Object[] params = {hall.getHallID(), String.valueOf(showDate.getDate()), 1};\r\n            result = DatabaseUtils.selectQueryById(\"schedule_id, movie_startTime, movie_endTime\", \"timeTable\", \"hall_id = ? AND movie_showDate = ? AND timeTable_status = ?\", params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        while (result.next()) {\r\n            TimeTable timeTable = new TimeTable();\r\n\r\n            timeTable.timetableID = result.getInt(\"schedule_id\");\r\n            timeTable.startTime = result.getTime(\"movie_startTime\").toLocalTime();\r\n            timeTable.endTime = result.getTime(\"movie_endTime\").toLocalTime();\r\n            timeTable.setHall(hall);\r\n\r\n            timeTables.add(timeTable);\r\n\r\n            System.out.printf(count + \". %-20s %17s %17s\\n\", hall.getHallName().getName(), timeTable.startTime, timeTable.endTime);\r\n            count++;\r\n        }\r\n\r\n        return count;\r\n    }\r\n\r\n    public void calculateEndTime(Movie movie, LocalTime startTime){\r\n        // Change the duration's data type from int to Duration (in minutes)\r\n        Duration duration = Duration.ofMinutes(movie.getDuration());\r\n\r\n        endTime = startTime.plusMinutes(duration.toMinutes());\r\n    }\r\n\r\n    public static Duration roundUpToNearestFiveMinutes(int duration) {\r\n        int hours = duration / 60;\r\n        int minutes = duration % 60;\r\n        LocalTime time = LocalTime.of(hours, minutes);\r\n\r\n        int minute = time.getMinute();\r\n        int roundUpMinute = ((int) Math.ceil(minute / 5.0)) * 5;\r\n\r\n        if (roundUpMinute == 60) {\r\n            hours++;\r\n            roundUpMinute = 0;\r\n        }\r\n\r\n        return Duration.ofMinutes((hours * 60) + roundUpMinute);\r\n    }\r\n\r\n    public LocalTime[] availableTimeSlots(Scanner sc) throws SQLException {\r\n        ResultSet result = null;\r\n        String showDate = String.valueOf(getShowDate().getDate());\r\n\r\n        try {\r\n            Object[] params2 = {getHall().getHallID(), showDate};\r\n            result = DatabaseUtils.selectQueryById(\"movie_startTime, movie_endTime\", \"timeTable\", \"hall_id = ? AND movie_showDate = ?\", params2);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        ArrayList<LocalTime[]> timeSlots = new ArrayList<>();\r\n        while (result.next()) {\r\n            LocalTime startTime = result.getTime(\"movie_startTime\").toLocalTime();\r\n            LocalTime endTime = result.getTime(\"movie_endTime\").toLocalTime();\r\n\r\n            LocalTime[] timeSlot = {startTime, endTime};\r\n            timeSlots.add(timeSlot);\r\n        }\r\n\r\n        // 把 duration round up to 5 minutes\r\n        Duration duration = roundUpToNearestFiveMinutes(getMovie().getDuration());\r\n\r\n        // 间隔时间 15分钟\r\n        int interval = 5;\r\n\r\n        // 营业时间 11:00:00 - 23:00:00\r\n        LocalTime openingTime = LocalTime.of(11, 0, 0);\r\n        LocalTime closingTime = LocalTime.of(23, 0, 0);\r\n\r\n        ArrayList<LocalTime[]> availableTimeSlots = new ArrayList<>();\r\n        LocalTime startTime = openingTime;\r\n\r\n        while (startTime.plus(duration).isBefore(closingTime)) {\r\n            boolean conflict = false;\r\n\r\n            for (LocalTime[] timeSlot : timeSlots) {\r\n                LocalTime scheduledStartTime = timeSlot[0]; // 13:00:00\r\n                LocalTime scheduledEndTime = timeSlot[1]; // 15:10:00\r\n\r\n                // 电影开始时间 小过 已经被安排时间表的结束时间 和 电影结束时间 大过 已经被安排时间表的开始时间 => 在它们之间\r\n                if (startTime.isBefore(scheduledEndTime.plusMinutes(15)) && startTime.plus(duration).isAfter(scheduledStartTime.minusMinutes(15))) {\r\n                    conflict = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (!conflict) {\r\n                availableTimeSlots.add(new LocalTime[]{startTime, startTime.plus(duration)});\r\n                startTime = startTime.plusMinutes(10);\r\n            }\r\n\r\n            startTime = startTime.plusMinutes(interval);\r\n        }\r\n\r\n        boolean error = true;\r\n        int choice = 0;\r\n        do {\r\n            try {\r\n                System.out.println(\"\\nSelect the available time slot: \");\r\n                for (int i = 0; i < availableTimeSlots.size(); i++) {\r\n                    LocalTime[] availableTimeSlot = availableTimeSlots.get(i);\r\n                    System.out.println((i + 1) + \". Start Time: \" + availableTimeSlot[0] + \" | End Time: \" + availableTimeSlot[1]);\r\n                }\r\n\r\n                System.out.print(\"\\nEnter your selection: \");\r\n                choice = sc.nextInt();\r\n                sc.nextLine();\r\n\r\n                if (choice > 0 && choice <= availableTimeSlots.size()) {\r\n                    error = false;\r\n                } else {\r\n                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Please enter a valid choice!\");\r\n                sc.nextLine();\r\n            }\r\n        } while (error);\r\n\r\n        return availableTimeSlots.get(choice - 1);\r\n    }\r\n\r\n    public String checkShowDate(){\r\n        int comparison = showDate.getDate().compareTo(movie.getReleaseDate().getDate()); // Compare dates\r\n\r\n        if (comparison <= 0) {\r\n            return \"The show date cannot be earlier than or equal to release date.\";\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Setter\r\n    public void setTimetableID(int timetableID) {\r\n        this.timetableID = timetableID;\r\n    }\r\n\r\n    public void setMovie(Movie movie) {\r\n        this.movie = movie;\r\n    }\r\n\r\n    public void setHall(Hall hall) {\r\n        this.hall = hall;\r\n    }\r\n\r\n    public void setShowDate (DateTime showDate) {\r\n        this.showDate = showDate;\r\n    }\r\n\r\n    public void setStartTime(LocalTime startTime) {\r\n        this.startTime = startTime;\r\n    }\r\n\r\n    public void setEndTime(LocalTime endTime) {\r\n        this.endTime = endTime;\r\n    }\r\n\r\n    // Getter\r\n    public int getTimetableID() {\r\n        return timetableID;\r\n    }\r\n\r\n    public Movie getMovie() {\r\n        return movie;\r\n    }\r\n\r\n    public Hall getHall() {\r\n        return hall;\r\n    }\r\n\r\n    public DateTime getShowDate() {\r\n        return showDate;\r\n    }\r\n\r\n    public LocalTime getStartTime() {\r\n        return startTime;\r\n    }\r\n\r\n    public LocalTime getEndTime() {\r\n        return endTime;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Schedule_Management/TimeTable.java b/Schedule_Management/TimeTable.java
--- a/Schedule_Management/TimeTable.java	(revision fdc08511edf28627fe2a32c5ef49e4018f777694)
+++ b/Schedule_Management/TimeTable.java	(date 1694918032758)
@@ -79,7 +79,7 @@
                 movie.setMvName(new Name(result2.getString("mv_name")));
                 movie.setReleaseDate(new DateTime(result2.getDate("release_date").toLocalDate()));
                 movie.setDuration(result2.getInt("duration"));
-                movie.setLang(result2.getString("lang"));
+                movie.setLanguage(result2.getString("lang"));
                 movie.setDirector(result2.getString("director"));
                 movie.setWritter(result2.getString("writter"));
                 movie.setStarring(result2.getString("starring"));
Index: Movie_Management/Movie.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Movie_Management;\r\n\r\nimport Database.DatabaseUtils;\r\nimport Driver.DatabaseOperations;\r\nimport Driver.DateTime;\r\nimport Driver.Name;\r\nimport Driver.SystemClass;\r\nimport Genre_Management.Genre;\r\n\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.time.LocalDate;\r\nimport java.util.ArrayList;\r\nimport java.util.InputMismatchException;\r\nimport java.util.Scanner;\r\n\r\npublic class Movie implements DatabaseOperations {\r\n    private int movieID;\r\n    private Genre genre;\r\n    private Name mvName;\r\n    private DateTime releaseDate;\r\n    private int duration;\r\n    private String lang;\r\n    private String director;\r\n    private String writter;\r\n    private String starring;\r\n    private String musicProvider;\r\n    private String country;\r\n    private String metaDescription;\r\n    private double basicTicketPrice;\r\n    private int status;\r\n\r\n    public Movie(){\r\n    }\r\n\r\n    public Movie(int movieID, Genre genre, Name mvName, DateTime releaseDate, int duration, String lang, String director, String writter, String starring, String musicProvider, String country, String metaDescription, double basicTicketPrice) {\r\n        this.movieID = movieID;\r\n        this.genre = genre;\r\n        this.mvName = mvName;\r\n        this.releaseDate = releaseDate;\r\n        this.duration = duration;\r\n        this.lang = lang;\r\n        this.director = director;\r\n        this.writter = writter;\r\n        this.starring = starring;\r\n        this.musicProvider = musicProvider;\r\n        this.country = country;\r\n        this.metaDescription = metaDescription;\r\n        this.basicTicketPrice = basicTicketPrice;\r\n    }\r\n\r\n    // Method\r\n    public void viewMovieDetails() throws SQLException {\r\n        ResultSet result = null;\r\n\r\n        try {\r\n            Object[] params = {genre.getGenreID()};\r\n            result = DatabaseUtils.selectQueryById(\"genre_name\", \"genre\", \"genre_id = ?\", params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        System.out.printf(\"\\nMovie Detail:\\n\");\r\n        System.out.println(\"Movie Name: \" + mvName.getName());\r\n        if (result.next()) {\r\n            System.out.println(\"Genre: \" + result.getString(\"genre_name\"));\r\n        }\r\n        System.out.println(\"Release Date: \" + releaseDate.getDate());\r\n        System.out.println(\"Duration: \" + duration + \" minutes\");\r\n        System.out.println(\"Language: \" + lang);\r\n        System.out.println(\"Director: \" + director);\r\n        System.out.println(\"Writter: \" + writter);\r\n        System.out.println(\"Starring: \" + starring);\r\n        System.out.println(\"Music Producer: \" + musicProvider);\r\n        System.out.println(\"Country: \" + country);\r\n        System.out.printf(\"%s %.2f\\n\", \"Basic Ticket Price:\", basicTicketPrice);\r\n        System.out.println(\"\\nSynopsis:\\n\" + metaDescription);\r\n    }\r\n\r\n    public boolean add() throws SQLException {\r\n        int rowAffected = 0;\r\n\r\n        try {\r\n            String insertSql = \"INSERT INTO `movie`(`genre_id`, `mv_name`, `release_date`, `duration`, `lang`, `director`, `writter`, `starring`, `music`, `country`,`meta_description`, `basic_TicketPrice`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\";\r\n            Object[] params = {genre.getGenreID(), mvName.getName(), String.valueOf(releaseDate.getDate()), duration, lang, director, writter, starring, musicProvider, country, metaDescription, basicTicketPrice};\r\n            rowAffected = DatabaseUtils.insertQuery(insertSql, params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (rowAffected > 0) {\r\n            System.out.println(\"\\nMovie successfully added...\");\r\n            return true;\r\n        }\r\n        else {\r\n            System.out.println(\"\\nSomething went wrong!\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public int modifyMovieDetail(Scanner sc) throws SQLException {\r\n        boolean error = true;\r\n\r\n        do {\r\n            try {\r\n                Object[] params = {genre.getGenreID()};\r\n                ResultSet result = DatabaseUtils.selectQueryById(\"genre_name\", \"genre\", \"genre_id = ?\", params);\r\n\r\n                try {\r\n                    int count = 1;\r\n                    System.out.printf(\"\\nMovie Detail:\\n\");\r\n                    System.out.println(count + \". Movie Name: \" + mvName.getName());\r\n                    count++;\r\n                    if (result.next()) {\r\n                        System.out.println(count + \". Genre: \" + result.getString(\"genre_name\"));\r\n                        count++;\r\n                    }\r\n                    System.out.println(count + \". Release Date: \" + releaseDate.getDate());\r\n                    count++;\r\n                    System.out.println(count + \". Duration: \" + duration + \" minutes\");\r\n                    count++;\r\n                    System.out.println(count + \". Language: \" + lang);\r\n                    count++;\r\n                    System.out.println(count + \". Director: \" + director);\r\n                    count++;\r\n                    System.out.println(count + \". Writter: \" + writter);\r\n                    count++;\r\n                    System.out.println(count + \". Starring: \" + starring);\r\n                    count++;\r\n                    System.out.println(count + \". Music Producer: \" + musicProvider);\r\n                    count++;\r\n                    System.out.println(count + \". Country: \" + country);\r\n                    count++;\r\n                    System.out.printf(\"%d. %s: %.2f\\n\", count, \"Basic Ticket Price\", basicTicketPrice);\r\n                    count++;\r\n                    System.out.println(\"\\n\" + count + \". Synopsis:\\n\" + metaDescription + \"\\n\");\r\n\r\n                    System.out.print(\"\\nEnter the serial number of the movie information you want to change (0 - Stop): \");\r\n                    int serialNum = sc.nextInt();\r\n                    sc.nextLine();\r\n\r\n                    if (serialNum < 0 || serialNum > count) {\r\n                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                        error = true;\r\n                    } else {\r\n                        return serialNum;\r\n                    }\r\n                } catch (InputMismatchException e) {\r\n                    System.out.println(\"Please enter a valid choice!\");\r\n                    sc.nextLine();\r\n                    error = true;\r\n                }\r\n            }\r\n            catch (SQLException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } while (error);\r\n        return 0;\r\n    }\r\n\r\n    public boolean modify() throws SQLException {\r\n        int rowAffected = 0;\r\n\r\n        try {\r\n            String updateSql = \"UPDATE `movie` SET `genre_id`= ?, `mv_name`= ?,\" +\r\n                    \"`release_date`= ?,`duration`= ?,`lang`= ?,\" +\r\n                    \"`director`= ?,`writter`= ?,`starring`= ?,`music`= ?,\" +\r\n                    \"`country`= ?,`meta_description`= ?, `basic_TicketPrice`= ? WHERE `movie_id` = ?\";\r\n            Object[] params = {genre.getGenreID(), mvName.getName(), String.valueOf(releaseDate.getDate()), duration, lang, director, writter, starring, musicProvider, country, metaDescription, basicTicketPrice, movieID};\r\n            rowAffected = DatabaseUtils.updateQuery(updateSql, params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (rowAffected > 0) {\r\n            System.out.println(\"\\nThe changes have been saved.\");\r\n            return true;\r\n        }\r\n        else {\r\n            System.out.println(\"\\nSomething went wrong...\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean delete() throws SQLException {\r\n        int rowAffected = 0;\r\n\r\n        try {\r\n            Object[] params = {movieID};\r\n            rowAffected = DatabaseUtils.deleteQueryById(\"movie\", \"movie_status\", \"movie_id\", params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (rowAffected > 0) {\r\n            System.out.println(\"\\nThe movie has been deleted.\");\r\n            return true;\r\n        } else {\r\n            System.out.println(\"\\nSomething went wrong...\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public void setMovieID(int movieID) {\r\n        this.movieID = movieID;\r\n    }\r\n\r\n    public void setGenre(Genre genre){\r\n        this.genre = genre;\r\n    }\r\n\r\n    public void setMvName(Name mvName) {\r\n        this.mvName = mvName;\r\n    }\r\n\r\n    public void setReleaseDate(DateTime releaseDate) {\r\n        this.releaseDate = releaseDate;\r\n    }\r\n\r\n    public void setDuration(int duration) {\r\n        this.duration = duration;\r\n    }\r\n\r\n    public void setLang(String lang) {\r\n        this.lang = lang;\r\n    }\r\n\r\n    public void setDirector(String director) {\r\n        this.director = director;\r\n    }\r\n\r\n    public void setWritter(String writter) {\r\n        this.writter = writter;\r\n    }\r\n\r\n    public void setStarring(String starring) {\r\n        this.starring = starring;\r\n    }\r\n\r\n    public void setMusicProvider(String musicProvider) {\r\n        this.musicProvider = musicProvider;\r\n    }\r\n\r\n    public void setCountry(String country) {\r\n        this.country = country;\r\n    }\r\n\r\n    public void setMetaDescription(String metaDescription) {\r\n        this.metaDescription = metaDescription;\r\n    }\r\n\r\n    public void setBasicTicketPrice(double basicTicketPrice) {\r\n        this.basicTicketPrice = basicTicketPrice;\r\n    }\r\n\r\n    public void setStatus(int status) {\r\n        this.status = status;\r\n    }\r\n\r\n    public int getMovieID() {\r\n        return movieID;\r\n    }\r\n\r\n    public Genre getGenre(){\r\n        return genre;\r\n    }\r\n\r\n    public Name getMvName() {\r\n        return mvName;\r\n    }\r\n\r\n    public DateTime getReleaseDate() {\r\n        return releaseDate;\r\n    }\r\n\r\n    public int getDuration() {\r\n        return duration;\r\n    }\r\n\r\n    public String getLang() {\r\n        return lang;\r\n    }\r\n\r\n    public String getDirector() {\r\n        return director;\r\n    }\r\n\r\n    public String getWritter() {\r\n        return writter;\r\n    }\r\n\r\n    public String getStarring() {\r\n        return starring;\r\n    }\r\n\r\n    public String getMusicProvider() {\r\n        return musicProvider;\r\n    }\r\n\r\n    public String getCountry() {\r\n        return country;\r\n    }\r\n\r\n    public String getMetaDescription() {\r\n        return metaDescription;\r\n    }\r\n\r\n    public double getBasicTicketPrice() {\r\n        return basicTicketPrice;\r\n    }\r\n\r\n    public int getStatus() {\r\n        return status;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Movie_Management/Movie.java b/Movie_Management/Movie.java
--- a/Movie_Management/Movie.java	(revision fdc08511edf28627fe2a32c5ef49e4018f777694)
+++ b/Movie_Management/Movie.java	(date 1694918032718)
@@ -20,7 +20,7 @@
     private Name mvName;
     private DateTime releaseDate;
     private int duration;
-    private String lang;
+    private String language;
     private String director;
     private String writter;
     private String starring;
@@ -33,13 +33,13 @@
     public Movie(){
     }
 
-    public Movie(int movieID, Genre genre, Name mvName, DateTime releaseDate, int duration, String lang, String director, String writter, String starring, String musicProvider, String country, String metaDescription, double basicTicketPrice) {
+    public Movie(int movieID, Genre genre, Name mvName, DateTime releaseDate, int duration, String language, String director, String writter, String starring, String musicProvider, String country, String metaDescription, double basicTicketPrice) {
         this.movieID = movieID;
         this.genre = genre;
         this.mvName = mvName;
         this.releaseDate = releaseDate;
         this.duration = duration;
-        this.lang = lang;
+        this.language = language;
         this.director = director;
         this.writter = writter;
         this.starring = starring;
@@ -68,7 +68,7 @@
         }
         System.out.println("Release Date: " + releaseDate.getDate());
         System.out.println("Duration: " + duration + " minutes");
-        System.out.println("Language: " + lang);
+        System.out.println("Language: " + language);
         System.out.println("Director: " + director);
         System.out.println("Writter: " + writter);
         System.out.println("Starring: " + starring);
@@ -83,7 +83,7 @@
 
         try {
             String insertSql = "INSERT INTO `movie`(`genre_id`, `mv_name`, `release_date`, `duration`, `lang`, `director`, `writter`, `starring`, `music`, `country`,`meta_description`, `basic_TicketPrice`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
-            Object[] params = {genre.getGenreID(), mvName.getName(), String.valueOf(releaseDate.getDate()), duration, lang, director, writter, starring, musicProvider, country, metaDescription, basicTicketPrice};
+            Object[] params = {genre.getGenreID(), mvName.getName(), String.valueOf(releaseDate.getDate()), duration, language, director, writter, starring, musicProvider, country, metaDescription, basicTicketPrice};
             rowAffected = DatabaseUtils.insertQuery(insertSql, params);
         }
         catch (SQLException e) {
@@ -121,7 +121,7 @@
                     count++;
                     System.out.println(count + ". Duration: " + duration + " minutes");
                     count++;
-                    System.out.println(count + ". Language: " + lang);
+                    System.out.println(count + ". Language: " + language);
                     count++;
                     System.out.println(count + ". Director: " + director);
                     count++;
@@ -168,7 +168,7 @@
                     "`release_date`= ?,`duration`= ?,`lang`= ?," +
                     "`director`= ?,`writter`= ?,`starring`= ?,`music`= ?," +
                     "`country`= ?,`meta_description`= ?, `basic_TicketPrice`= ? WHERE `movie_id` = ?";
-            Object[] params = {genre.getGenreID(), mvName.getName(), String.valueOf(releaseDate.getDate()), duration, lang, director, writter, starring, musicProvider, country, metaDescription, basicTicketPrice, movieID};
+            Object[] params = {genre.getGenreID(), mvName.getName(), String.valueOf(releaseDate.getDate()), duration, language, director, writter, starring, musicProvider, country, metaDescription, basicTicketPrice, movieID};
             rowAffected = DatabaseUtils.updateQuery(updateSql, params);
         }
         catch (SQLException e) {
@@ -225,8 +225,8 @@
         this.duration = duration;
     }
 
-    public void setLang(String lang) {
-        this.lang = lang;
+    public void setLanguage(String language) {
+        this.language = language;
     }
 
     public void setDirector(String director) {
@@ -281,8 +281,8 @@
         return duration;
     }
 
-    public String getLang() {
-        return lang;
+    public String getLanguage() {
+        return language;
     }
 
     public String getDirector() {
Index: Driver/SystemClass.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Driver;\r\n\r\nimport Cinema_Management.AddressUtils;\r\nimport Database.DatabaseUtils;\r\nimport Cinema_Management.Address;\r\nimport Cinema_Management.Cinema;\r\nimport Genre_Management.Genre;\r\nimport Hall_Management.Hall;\r\nimport Movie_Management.Movie;\r\nimport Movie_Management.MovieUtils;\r\nimport Movie_Management.MovieValidator;\r\nimport Schedule_Management.TimeTable;\r\nimport Booking_Management.Booking;\r\nimport Seat_Management.Seat;\r\n\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalTime;\r\nimport java.util.ArrayList;\r\nimport java.util.InputMismatchException;\r\nimport java.util.Scanner;\r\n\r\npublic class SystemClass {\r\n    private SystemClass(){\r\n    }\r\n\r\n    public static void run(Scanner sc) throws Exception {\r\n        int choice = 0;\r\n        boolean error = true, back = false;\r\n\r\n        do {\r\n            do {\r\n                try {\r\n                    System.out.println(\"\\nSelect the operation: \");\r\n                    System.out.println(\"1. View Profile\");\r\n                    System.out.println(\"2. View Movie\");\r\n                    System.out.println(\"3. Search Movie\");\r\n                    System.out.println(\"4. Log out\");\r\n                    System.out.print(\"\\nEnter your selection: \");\r\n\r\n                    choice = sc.nextInt();\r\n                    sc.nextLine();\r\n\r\n                    if (choice > 0 && choice <= 4) {\r\n                        error = false;\r\n                    } else {\r\n                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                    }\r\n                } catch (InputMismatchException e) {\r\n                    System.out.println(\"Please enter a valid choice!\");\r\n                    sc.nextLine();\r\n                }\r\n            } while (error);\r\n\r\n            switch (choice) {\r\n                case 1:\r\n                    break;\r\n                case 2:\r\n                    do {\r\n                        int periodSelected = 0;\r\n                        error = true;\r\n                        ArrayList<Movie> moviesAfterFiltered = new ArrayList<>();\r\n                        int movieSelected = 0;\r\n                        LocalDate currentDate = LocalDate.now();\r\n\r\n                        do {\r\n                            try {\r\n                                System.out.println(\"\\nSelect the time period: \");\r\n                                System.out.println(\"1. Opening This Week\");\r\n                                System.out.println(\"2. Opening This Month\");\r\n                                System.out.println(\"3. Release Within 3 Months\");\r\n                                System.out.println(\"4. Coming Soon\");\r\n                                System.out.print(\"\\nEnter your selection (0 - Back): \");\r\n\r\n                                periodSelected = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (periodSelected >= 0 && periodSelected <= 4) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid choice!\");\r\n                                sc.nextLine();\r\n                            }\r\n                        } while (error);\r\n\r\n                        switch (periodSelected) {\r\n                            case 0:\r\n                                back = false;\r\n                                break;\r\n                            case 1:\r\n                                LocalDate oneWeekAgo = currentDate.minusWeeks(1);\r\n\r\n                                System.out.println(\"\\nOpening This Week\");\r\n                                moviesAfterFiltered = MovieUtils.showMovieListAfterFiltered(oneWeekAgo, currentDate, 1);\r\n                                break;\r\n                            case 2:\r\n                                LocalDate oneMonthAgo = currentDate.minusMonths(1);\r\n\r\n                                System.out.println(\"\\nOpening This Month\");\r\n                                moviesAfterFiltered = MovieUtils.showMovieListAfterFiltered(oneMonthAgo, currentDate, 1);\r\n                                break;\r\n                            case 3:\r\n                                LocalDate threeMonthAgo = currentDate.minusMonths(3);\r\n\r\n                                System.out.println(\"\\nRelease within 3 months\");\r\n                                moviesAfterFiltered = MovieUtils.showMovieListAfterFiltered(threeMonthAgo, currentDate, 1);\r\n                                break;\r\n                            case 4:\r\n                                LocalDate comingSoon = currentDate.plusDays(1);\r\n\r\n                                System.out.println(\"\\nComing Soon\");\r\n                                moviesAfterFiltered = MovieUtils.showMovieListAfterFiltered(comingSoon, null, 1);\r\n                                break;\r\n                        }\r\n\r\n                        if (periodSelected != 0) {\r\n                            do {\r\n                                try {\r\n                                    System.out.print(\"\\nEnter the movie no (0 - Back): \");\r\n                                    movieSelected = sc.nextInt();\r\n                                    sc.nextLine();\r\n\r\n                                    if (movieSelected >= 0 && movieSelected <= moviesAfterFiltered.size()) {\r\n                                        error = false;\r\n                                    } else {\r\n                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                        error = true;\r\n                                    }\r\n                                } catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid choice!\");\r\n                                    sc.nextLine();\r\n                                    error = true;\r\n                                }\r\n                            } while (error);\r\n\r\n                            if (movieSelected != 0) {\r\n                                Movie movie = moviesAfterFiltered.get(movieSelected - 1);\r\n                                movie.viewMovieDetails();\r\n\r\n                                if (periodSelected != 4) {  // Coming Soon movie cannot be booked\r\n                                    String bookNow;\r\n\r\n                                    do {\r\n                                        System.out.println(\"\\nDo you want to book now? (Y / N)\");\r\n                                        System.out.print(\"Answer: \");\r\n                                        String answer = sc.next();\r\n                                        sc.nextLine();\r\n\r\n                                        bookNow = SystemClass.askForContinue(answer);\r\n                                    } while (bookNow.equals(\"Invalid\"));\r\n\r\n                                    if (bookNow.equals(\"Y\")) {\r\n                                        TimeTable timeTable = new TimeTable();\r\n                                        timeTable.setMovie(movie);\r\n\r\n                                        // 1. Select the cinema\r\n                                        int cinemaNo = 0;\r\n                                        error = true;\r\n                                        ArrayList<Cinema> cinemas = new ArrayList<>();\r\n                                        do {\r\n                                            try {\r\n                                                System.out.print(\"\\nSelect the cinema you want to view the schedule: \");\r\n                                                cinemas = Cinema.viewCinemaList(1);\r\n                                                System.out.print(\"\\nEnter the cinema no: \");\r\n                                                cinemaNo = sc.nextInt();\r\n                                                sc.nextLine();\r\n\r\n                                                if (cinemaNo > 0 && cinemaNo <= cinemas.size()) {\r\n                                                    error = false;\r\n                                                } else {\r\n                                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                                }\r\n                                            } catch (InputMismatchException e) {\r\n                                                System.out.println(\"Please enter a valid cinema no!\");\r\n                                                sc.nextLine();\r\n                                            }\r\n                                        } while (error);\r\n\r\n                                        // 2. Select the show date\r\n                                        int dateNo = 0;\r\n                                        error = true;\r\n                                        ArrayList<LocalDate> dateList;\r\n                                        do {\r\n                                            try {\r\n                                                System.out.println(\"\\nSelect the date you want to view the schedule: \");\r\n                                                dateList = TimeTable.generateOneWeekDateList();\r\n                                                System.out.print(\"\\nEnter the date no: \");\r\n                                                dateNo = sc.nextInt();\r\n                                                sc.nextLine();\r\n\r\n                                                if (dateNo > 0 && dateNo <= dateList.size()) {\r\n                                                    DateTime date = new DateTime(dateList.get(dateNo - 1));\r\n                                                    timeTable.setShowDate(date);\r\n                                                    error = false;\r\n                                                } else {\r\n                                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                                }\r\n                                            } catch (InputMismatchException e) {\r\n                                                System.out.println(\"Please enter a valid date no!\");\r\n                                                sc.nextLine();\r\n                                            }\r\n                                        } while (error);\r\n\r\n                                        // 3. Select the time\r\n                                        error = true;\r\n                                        int scheduleSelected = 0;\r\n                                        do {\r\n                                            ArrayList<Hall> halls = cinemas.get(cinemaNo - 1).getHallList(1);\r\n                                            ArrayList<TimeTable> timeTables = new ArrayList<>();\r\n\r\n                                            int count = 1;\r\n                                            System.out.printf(\"\\n%-30s %15s %15s\\n\", \"Hall Name\", \"Start Time\", \"End Time\");\r\n                                            for (int i = 0; i < halls.size(); i++) {\r\n                                                timeTable.setHall(halls.get(i));\r\n                                                count = timeTable.showHallAndTime(count, timeTables);\r\n                                            }\r\n\r\n                                            try {\r\n                                                System.out.print(\"\\nEnter the schedule no: \");\r\n                                                scheduleSelected = sc.nextInt();\r\n                                                sc.nextLine();\r\n\r\n                                                if (scheduleSelected > 0 && scheduleSelected <= timeTables.size()) {\r\n                                                    timeTable.setTimetableID(timeTables.get(scheduleSelected - 1).getTimetableID());\r\n                                                    timeTable.setHall(timeTables.get(scheduleSelected - 1).getHall());\r\n                                                    timeTable.setStartTime(timeTables.get(scheduleSelected - 1).getStartTime());\r\n                                                    timeTable.setEndTime(timeTables.get(scheduleSelected - 1).getEndTime());\r\n                                                    error = false;\r\n                                                } else {\r\n                                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                                }\r\n                                            } catch (InputMismatchException e) {\r\n                                                System.out.println(\"Please enter a valid schedule no!\");\r\n                                                sc.nextLine();\r\n                                            }\r\n                                        } while (error);\r\n\r\n                                        // 4. Select the seat chin yong part\r\n                                        Booking booking = new Booking();\r\n                                        booking.executeBooking(timeTable);\r\n\r\n                                    } else {\r\n                                        back = false;\r\n                                    }\r\n                                } else {\r\n                                    back = false;\r\n                                }\r\n                            } else {\r\n                                back = false;\r\n                            }\r\n                        } else {\r\n                            break;\r\n                        }\r\n                    } while (back == false);\r\n                    break;\r\n                case 3:\r\n                    do {\r\n                        error = true;\r\n                        int searchingMethod = 0;\r\n                        boolean continues = true;\r\n                        ArrayList<Movie> searchResults;\r\n                        String confirmation;\r\n\r\n                        do {\r\n                            try {\r\n                                System.out.println(\"\\nSelect the searching method:\");\r\n                                System.out.println(\"1. Search by movie name\");\r\n                                System.out.println(\"2. Search by genre\");\r\n                                System.out.print(\"\\nEnter your selection (0 - Back): \");\r\n                                searchingMethod = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (searchingMethod >= 0 && searchingMethod <= 2) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid choice!\");\r\n                                sc.nextLine();\r\n                            }\r\n                        } while (error);\r\n\r\n                        switch (searchingMethod) {\r\n                            case 0:\r\n                                back = true;\r\n                                break;\r\n                            case 1:\r\n                                // Search by movie name\r\n                                do {\r\n                                    error = true;\r\n                                    String searchedMvName;\r\n                                    int movieNum = 0;\r\n\r\n                                    do {\r\n                                        System.out.print(\"\\nEnter the movie name you want to search for (0 - Back): \");\r\n                                        searchedMvName = sc.nextLine();\r\n\r\n                                        if (searchedMvName.trim().isEmpty()) {\r\n                                            System.out.println(\"Please enter the movie name!\");\r\n                                        } else {\r\n                                            error = false;\r\n                                        }\r\n                                    } while (error);\r\n\r\n                                    if (!searchedMvName.equals(\"0\")) {\r\n                                        searchResults = MovieUtils.queryMovieByName(searchedMvName);\r\n\r\n                                        error = true;\r\n                                        System.out.println(\"\\nSearch Results: \");\r\n\r\n                                        if (!searchResults.isEmpty()) {\r\n                                            for (int i = 0; i < searchResults.size(); i++) {\r\n                                                System.out.println((i + 1) + \". \" + searchResults.get(i).getMvName().getName());\r\n                                            }\r\n\r\n                                            do {\r\n                                                try {\r\n                                                    System.out.print(\"\\nEnter your selection (0 - Back): \");\r\n                                                    movieNum = sc.nextInt();\r\n                                                    sc.nextLine();\r\n\r\n                                                    if (movieNum >= 0 && movieNum <= searchResults.size()) {\r\n                                                        error = false;\r\n                                                    } else {\r\n                                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                                    }\r\n                                                } catch (InputMismatchException e) {\r\n                                                    System.out.println(\"Please enter a valid choice!\");\r\n                                                    sc.nextLine();\r\n                                                }\r\n                                            } while (error);\r\n\r\n                                            if (movieNum != 0) {\r\n                                                Movie searchedMovie = searchResults.get(movieNum - 1);\r\n                                                searchedMovie.viewMovieDetails();\r\n                                            }\r\n                                        } else {\r\n                                            System.out.println(\"Sorry, no movie was found!\");\r\n                                        }\r\n\r\n                                        do {\r\n                                            System.out.println(\"\\nDo you want to search another movie(s)? (Y / N)\");\r\n                                            System.out.print(\"Answer: \");\r\n                                            String answer = sc.nextLine();\r\n\r\n                                            confirmation = SystemClass.askForContinue(answer);\r\n                                        } while (confirmation.equals(\"Invalid\"));\r\n\r\n                                        if (confirmation.equals(\"Y\")) {\r\n                                            continues = true;\r\n                                        } else {\r\n                                            back = false;\r\n                                            continues = false;\r\n                                        }\r\n                                    } else {\r\n                                        back = false;\r\n                                        continues = false;\r\n                                    }\r\n                                } while (continues);\r\n                                break;\r\n                            case 2:\r\n                                // Search by genre\r\n                                do {\r\n                                    int genreSelected = 0;\r\n                                    int movieNum = 0;\r\n\r\n                                    System.out.println(\"Select the genre you want to view the movie:\");\r\n                                    ArrayList<Genre> genres = Genre.viewGenreList(1);\r\n\r\n                                    do {\r\n                                        try {\r\n                                            System.out.print(\"\\nEnter the genre no (0 - Back): \");\r\n                                            genreSelected = sc.nextInt();\r\n                                            sc.nextLine();\r\n\r\n                                            if (genreSelected >= 0 && genreSelected <= genres.size()) {\r\n                                                error = false;\r\n                                            } else {\r\n                                                System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                                error = true;\r\n                                            }\r\n                                        } catch (InputMismatchException e) {\r\n                                            System.out.println(\"Please enter a valid choice!\");\r\n                                            sc.nextLine();\r\n                                            error = true;\r\n                                        }\r\n                                    } while (error);\r\n\r\n                                    if (genreSelected != 0) {\r\n                                        Genre viewGenre = genres.get(genreSelected - 1);\r\n                                        searchResults = MovieUtils.queryMovieByGenre(viewGenre);\r\n\r\n                                        if (!searchResults.isEmpty()) {\r\n                                            System.out.println(\"\\nSearch Results: \");\r\n                                            for (int i = 0; i < searchResults.size(); i++) {\r\n                                                System.out.println((i + 1) + \". \" + searchResults.get(i).getMvName().getName());\r\n                                            }\r\n\r\n                                            error = true;\r\n                                            do {\r\n                                                try {\r\n                                                    System.out.print(\"\\nEnter your selection (0 - Back): \");\r\n                                                    movieNum = sc.nextInt();\r\n                                                    sc.nextLine();\r\n\r\n                                                    if (movieNum >= 0 && movieNum <= searchResults.size()) {\r\n                                                        error = false;\r\n                                                    } else {\r\n                                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                                    }\r\n                                                } catch (InputMismatchException e) {\r\n                                                    System.out.println(\"Please enter a valid choice!\");\r\n                                                    sc.nextLine();\r\n                                                }\r\n                                            } while (error);\r\n\r\n                                            if (movieNum != 0) {\r\n                                                Movie searchedMovie = searchResults.get(movieNum - 1);\r\n                                                searchedMovie.viewMovieDetails();\r\n                                            }\r\n                                        } else {\r\n                                            System.out.println(\"Sorry, no movie was found!\");\r\n                                        }\r\n\r\n                                        do {\r\n                                            System.out.println(\"\\nDo you want to search another movie(s) by genre? (Y / N)\");\r\n                                            System.out.print(\"Answer: \");\r\n                                            String answer = sc.nextLine();\r\n\r\n                                            confirmation = SystemClass.askForContinue(answer);\r\n                                        } while (confirmation.equals(\"Invalid\"));\r\n\r\n                                        if (confirmation.equals(\"Y\")) {\r\n                                            continues = true;\r\n                                        } else {\r\n                                            back = false;\r\n                                            continues = false;\r\n                                        }\r\n                                    } else {\r\n                                        back = false;\r\n                                        continues = false;\r\n                                    }\r\n                                } while (continues);\r\n                                break;\r\n                        }\r\n                    } while (back == false);\r\n                    back = false;\r\n                    break;\r\n                case 4:\r\n                    back = true;\r\n                    break;\r\n            }\r\n        } while (back == false);\r\n\r\n        // Admin\r\n        back = false;\r\n        error = true;\r\n\r\n        do {\r\n            do {\r\n                try {\r\n                    System.out.println(\"\\nSelect the operation:\");\r\n                    System.out.println(\"1. Manage Cinema\");\r\n                    System.out.println(\"2. Manage Hall\");\r\n                    System.out.println(\"3. Manage Movie\");\r\n                    System.out.println(\"4. Manage Genre\");\r\n                    System.out.println(\"5. Manage Schedule\");\r\n                    System.out.println(\"6. Log out\");\r\n                    System.out.print(\"\\nEnter your selection: \");\r\n\r\n                    choice = sc.nextInt();\r\n                    sc.nextLine();\r\n\r\n                    error = false;\r\n                } catch (InputMismatchException e) {\r\n                    System.out.println(\"Please enter a valid choice!\");\r\n                    sc.nextLine();\r\n                }\r\n            } while (error);\r\n\r\n            switch (choice) {\r\n                case 1:\r\n                    manageCinema(sc);\r\n                    break;\r\n                case 2:\r\n                    manageHall(sc);\r\n                    break;\r\n                case 3:\r\n                    manageMovie(sc);\r\n                    break;\r\n                case 4:\r\n                    manageGenre(sc);\r\n                    break;\r\n                case 5:\r\n                    manageSchedule(sc);\r\n                    break;\r\n                case 6:\r\n                    back = true;\r\n                    break;\r\n                default:\r\n                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n            }\r\n        } while (back == false);\r\n    }\r\n\r\n    private static void manageCinema(Scanner sc) throws Exception {\r\n        boolean back = false;\r\n\r\n        do {\r\n            int choice = displayMenu(\"Cinema\", sc);\r\n            boolean error = true;\r\n            boolean continues = true;\r\n\r\n            switch (choice) {\r\n                case 0:\r\n                    back = true;\r\n                    break;\r\n                case 1:\r\n                    // View Cinema\r\n                    do {\r\n                        int cinemaNo = 0;\r\n                        error = true;\r\n                        ArrayList<Cinema> cinemas = new ArrayList<>();\r\n                        do {\r\n                            try {\r\n                                System.out.println(\"\\nSelect the cinema: \");\r\n                                cinemas = Cinema.viewCinemaList(1);\r\n                                System.out.print(\"\\nEnter the cinema no (0 - Back): \");\r\n                                cinemaNo = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (cinemaNo >= 0 && cinemaNo <= cinemas.size()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid hall no!\");\r\n                                sc.nextLine();\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (cinemaNo != 0) {\r\n                            cinemas.get(cinemaNo - 1).viewCinemaDetails();\r\n\r\n                            String continueViewCinema;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want view another cinema? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                continueViewCinema = SystemClass.askForContinue(answer);\r\n                            } while (continueViewCinema.equals(\"Invalid\"));\r\n\r\n                            if (continueViewCinema.equals(\"Y\")) {\r\n                                continues = true;\r\n                            } else {\r\n                                continues = false;\r\n                                back = false;\r\n                            }\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 2:\r\n                    // Add Cinema\r\n                    do {\r\n                        Cinema newCinema = new Cinema();\r\n                        // Cinema Name\r\n                        Name name = null;\r\n                        do {\r\n                            System.out.print(\"\\nEnter cinema name (0 - Back): \");\r\n                            String cinemaName = sc.nextLine();\r\n\r\n                            name = new Name(cinemaName);\r\n                            name.capitalizeWords();\r\n\r\n                            ResultSet result = null;\r\n                            try {\r\n                                result = DatabaseUtils.selectQueryById(\"cinema_name\", \"cinema\", null, null);\r\n                            } catch (SQLException e) {\r\n                                throw new RuntimeException(e);\r\n                            }\r\n\r\n                            String errorMessage = name.checkName(\"cinema\", result, \"cinema_name\");\r\n\r\n                            if (errorMessage == null) {\r\n                                newCinema.setCinemaName(name);\r\n                                error = false;\r\n                            } else {\r\n                                System.out.println(errorMessage);\r\n                                error = true;\r\n                            }\r\n                        } while (error);\r\n\r\n                        boolean duplicatedAddress = false;\r\n                        do {\r\n                            // Cinema Address\r\n                            int stateSelected = 0;\r\n                            do {\r\n                                try {\r\n                                    System.out.println(\"\\nSelect the state: \");\r\n                                    AddressUtils.viewStateList();\r\n                                    System.out.print(\"\\nEnter your selection: \");\r\n                                    stateSelected = sc.nextInt();\r\n                                    sc.nextLine();\r\n\r\n                                    if (stateSelected > 0 && stateSelected <= Address.getStateToCities().size()) {\r\n                                        error = false;\r\n                                    } else {\r\n                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                        error = true;\r\n                                    }\r\n                                } catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid state no!\");\r\n                                    sc.nextLine();\r\n                                }\r\n                            } while (error);\r\n\r\n                            String stateName = AddressUtils.getStateName(stateSelected - 1);\r\n\r\n                            int citySelected = 0;\r\n                            do {\r\n                                try {\r\n                                    System.out.println(\"\\nSelect the city: \");\r\n                                    int count = AddressUtils.viewCityList(stateSelected - 1);\r\n                                    System.out.print(\"\\nEnter your selection: \");\r\n                                    citySelected = sc.nextInt();\r\n                                    sc.nextLine();\r\n\r\n                                    if (citySelected > 0 && citySelected <= count) {\r\n                                        error = false;\r\n                                    } else {\r\n                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                        error = true;\r\n                                    }\r\n                                } catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid city no!\");\r\n                                    sc.nextLine();\r\n                                }\r\n                            } while (error);\r\n\r\n                            String cityName = AddressUtils.getCityName(stateName, citySelected - 1);\r\n\r\n                            int postcodeSelected = 0;\r\n                            do {\r\n                                try {\r\n                                    System.out.println(\"\\nSelect the city: \");\r\n                                    int count = AddressUtils.viewPostcodeList(cityName);\r\n                                    System.out.print(\"\\nEnter your selection: \");\r\n                                    postcodeSelected = sc.nextInt();\r\n                                    sc.nextLine();\r\n\r\n                                    if (postcodeSelected > 0 && postcodeSelected <= count) {\r\n                                        error = false;\r\n                                    } else {\r\n                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                        error = true;\r\n                                    }\r\n                                } catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid postcode no!\");\r\n                                    sc.nextLine();\r\n                                }\r\n                            } while (error);\r\n\r\n                            String postcode = AddressUtils.getPostcodeSelected(cityName, postcodeSelected - 1);\r\n\r\n                            String streetName;\r\n                            do {\r\n                                System.out.print(\"\\nEnter the street name: \");\r\n                                streetName = sc.nextLine();\r\n\r\n                                if (streetName.trim().isEmpty()) {\r\n                                    System.out.println(\"Please enter the street name.\");\r\n                                    error = true;\r\n                                } else {\r\n                                    streetName = streetName.toUpperCase();\r\n                                    error = false;\r\n                                }\r\n                            } while (error);\r\n\r\n                            Address cinemaAddress = new Address(streetName.trim(), postcode, cityName, stateName);\r\n                            newCinema.setCinemaAddress(cinemaAddress);\r\n\r\n                            ResultSet result = null;\r\n                            try {\r\n                                result = DatabaseUtils.selectQueryById(\"cinema_address\", \"cinema\", null, null);\r\n                            } catch (SQLException e) {\r\n                                throw new RuntimeException(e);\r\n                            }\r\n\r\n                            duplicatedAddress = cinemaAddress.checkAddressDuplicate(result, \"cinema_address\");\r\n\r\n                            if (duplicatedAddress == true) {\r\n                                System.out.println(\"Same cinema address detected.\");\r\n                            }\r\n                        } while (duplicatedAddress);\r\n\r\n                        // Cinema Phone\r\n                        do {\r\n                            System.out.print(\"\\nEnter the cinema phone number: \");\r\n                            String phoneNumber = sc.nextLine();\r\n\r\n                            if (phoneNumber.trim().isEmpty()) {\r\n                                System.out.println(\"Please enter the phone number.\");\r\n                                error = true;\r\n                            } else {\r\n                                newCinema.setCinemaPhone(phoneNumber.trim());\r\n\r\n                                if (newCinema.isValidOfficePhoneNumber()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"The phone number is invalid.\");\r\n                                    error = true;\r\n                                }\r\n                            }\r\n                        } while (error);\r\n\r\n                        // Add Cinema\r\n                        String confirmation;\r\n                        do {\r\n                            System.out.println(\"\\nDo you want add the new cinema? (Y / N)\");\r\n                            System.out.print(\"Answer: \");\r\n                            String answer = sc.next();\r\n                            sc.nextLine();\r\n\r\n                            confirmation = SystemClass.askForContinue(answer);\r\n                        } while (confirmation.equals(\"Invalid\"));\r\n\r\n                        // Confirm that the cinema is successfully added\r\n                        boolean success = false;\r\n                        do {\r\n                            if (confirmation.equals(\"Y\")) {\r\n                                success = newCinema.add();\r\n                            } else {\r\n                                success = true;\r\n                                System.out.println(\"This cinema will not be added.\");\r\n                            }\r\n\r\n                            if (success == false) {\r\n                                do {\r\n                                    System.out.println(\"\\nDo you want to retry to add the new cinema? (Y / N)\");\r\n                                    System.out.print(\"Answer: \");\r\n                                    String answer = sc.next();\r\n                                    sc.nextLine();\r\n\r\n                                    confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                    if (confirmation.equals(\"Y\")) {\r\n                                        continues = true;\r\n                                    } else {\r\n                                        continues = false;\r\n                                    }\r\n                                } while (confirmation.equals(\"Invalid\"));\r\n                            }\r\n                            else {\r\n                                continues = false;\r\n                            }\r\n                        } while (continues);\r\n\r\n                        String continueAddCinema;\r\n                        do {\r\n                            System.out.println(\"\\nDo you want add another new cinema? (Y / N)\");\r\n                            System.out.print(\"Answer: \");\r\n                            String answer = sc.next();\r\n                            sc.nextLine();\r\n\r\n                            continueAddCinema = SystemClass.askForContinue(answer);\r\n                        } while (continueAddCinema.equals(\"Invalid\"));\r\n\r\n                        if (continueAddCinema.equals(\"Y\")) {\r\n                            continues = true;\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 3:\r\n                    // Modify Cinema\r\n                    do {\r\n                        error = true;\r\n                        ArrayList<Cinema> cinemasModified = new ArrayList<>();\r\n                        int cinemaModified = 0;\r\n\r\n                        do {\r\n                            try {\r\n                                System.out.println(\"\\nSelect the cinema you want to modify: \");\r\n                                cinemasModified = Cinema.viewCinemaList(1);\r\n                                System.out.print(\"\\nEnter the cinema no (0 - Back): \");\r\n                                cinemaModified = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (cinemaModified >= 0 && cinemaModified <= cinemasModified.size()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    error = true;\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid cinema no!\");\r\n                                sc.nextLine();\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (cinemaModified != 0) {\r\n                            Cinema orgCinema = cinemasModified.get(cinemaModified - 1);\r\n                            Cinema cinema = new Cinema(orgCinema.getCinemaID(), orgCinema.getCinemaName(), orgCinema.getCinemaAddress(), orgCinema.getCinemaPhone());\r\n                            boolean stop = false;\r\n\r\n                            do {\r\n                                int serialNum = cinema.modifyCinemaDetails(sc);\r\n                                switch (serialNum) {\r\n                                    case 0:\r\n                                        String confirmation;\r\n                                        do {\r\n                                            System.out.println(\"\\nDo you want to save the changes? (Y / N)\");\r\n                                            System.out.print(\"Answer: \");\r\n                                            String answer = sc.next();\r\n                                            sc.nextLine();\r\n\r\n                                            confirmation = SystemClass.askForContinue(answer);\r\n                                        } while (confirmation.equals(\"Invalid\"));\r\n\r\n                                        stop = true;\r\n\r\n                                        // Confirm that the cinema is successfully modified\r\n                                        boolean success = false;\r\n                                        do {\r\n                                            if (confirmation.equals(\"Y\")) {\r\n                                                success = cinema.modify();\r\n                                            } else {\r\n                                                success = true;\r\n                                                cinema = orgCinema;\r\n                                                System.out.println(\"\\nThe changes have not been saved.\");\r\n                                            }\r\n\r\n                                            if (success == false) {\r\n                                                do {\r\n                                                    System.out.println(\"\\nDo you want to retry to modify the cinema? (Y / N)\");\r\n                                                    System.out.print(\"Answer: \");\r\n                                                    String answer = sc.next();\r\n                                                    sc.nextLine();\r\n\r\n                                                    confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                                    if (confirmation.equals(\"Y\")) {\r\n                                                        continues = true;\r\n                                                    } else {\r\n                                                        continues = false;\r\n                                                    }\r\n                                                } while (confirmation.equals(\"Invalid\"));\r\n                                            }\r\n                                            else {\r\n                                                continues = false;\r\n                                            }\r\n                                        } while (continues);\r\n\r\n                                        String continueModifyCinema;\r\n                                        do {\r\n                                            System.out.println(\"\\nDo you want modify another cinema? (Y / N)\");\r\n                                            System.out.print(\"Answer: \");\r\n                                            String answer = sc.next();\r\n                                            sc.nextLine();\r\n\r\n                                            continueModifyCinema = SystemClass.askForContinue(answer);\r\n                                        } while (continueModifyCinema.equals(\"Invalid\"));\r\n\r\n                                        if (continueModifyCinema.equals(\"Y\")) {\r\n                                            continues = true;\r\n                                        } else {\r\n                                            continues = false;\r\n                                            back = false;\r\n                                        }\r\n                                        break;\r\n                                    case 1:\r\n                                        // Cinema Name\r\n                                        Name name = null;\r\n                                        do {\r\n                                            System.out.print(\"\\nEnter the new cinema name: \");\r\n                                            String newCinemaName = sc.nextLine();\r\n\r\n                                            name = new Name(newCinemaName);\r\n                                            name.capitalizeWords();\r\n\r\n                                            ResultSet result = null;\r\n                                            try {\r\n                                                result = DatabaseUtils.selectQueryById(\"cinema_name\", \"cinema\", null, null);\r\n                                            } catch (SQLException e) {\r\n                                                throw new RuntimeException(e);\r\n                                            }\r\n\r\n                                            String errorMessage = name.checkEditName(\"cinema\", result, \"cinema_name\", cinema.getCinemaName().getName());\r\n\r\n                                            if (errorMessage == null) {\r\n                                                cinema.setCinemaName(name);\r\n                                                error = false;\r\n                                            } else {\r\n                                                System.out.println(errorMessage);\r\n                                                error = true;\r\n                                            }\r\n                                        } while (error);\r\n                                        break;\r\n                                    case 2:\r\n                                        // Cinema Address\r\n                                        boolean duplicatedAddress;\r\n                                        do {\r\n                                            int stateSelected = 0;\r\n                                            do {\r\n                                                try {\r\n                                                    System.out.println(\"\\nSelect the state: \");\r\n                                                    AddressUtils.viewStateList();\r\n                                                    System.out.print(\"\\nEnter your selection: \");\r\n                                                    stateSelected = sc.nextInt();\r\n                                                    sc.nextLine();\r\n\r\n                                                    if (stateSelected > 0 && stateSelected <= Address.getStateToCities().size()) {\r\n                                                        error = false;\r\n                                                    } else {\r\n                                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                                        error = true;\r\n                                                    }\r\n                                                } catch (InputMismatchException e) {\r\n                                                    System.out.println(\"Please enter a valid state no!\");\r\n                                                    sc.nextLine();\r\n                                                }\r\n                                            } while (error);\r\n\r\n                                            String stateName = AddressUtils.getStateName(stateSelected - 1);\r\n\r\n                                            int citySelected = 0;\r\n                                            do {\r\n                                                try {\r\n                                                    System.out.println(\"\\nSelect the city: \");\r\n                                                    int count = AddressUtils.viewCityList(stateSelected - 1);\r\n                                                    System.out.print(\"\\nEnter your selection: \");\r\n                                                    citySelected = sc.nextInt();\r\n                                                    sc.nextLine();\r\n\r\n                                                    if (citySelected > 0 && citySelected <= count) {\r\n                                                        error = false;\r\n                                                    } else {\r\n                                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                                        error = true;\r\n                                                    }\r\n                                                } catch (InputMismatchException e) {\r\n                                                    System.out.println(\"Please enter a valid city no!\");\r\n                                                    sc.nextLine();\r\n                                                }\r\n                                            } while (error);\r\n\r\n                                            String cityName = AddressUtils.getCityName(stateName, citySelected - 1);\r\n\r\n                                            int postcodeSelected = 0;\r\n                                            do {\r\n                                                try {\r\n                                                    System.out.println(\"\\nSelect the city: \");\r\n                                                    int count = AddressUtils.viewPostcodeList(cityName);\r\n                                                    System.out.print(\"\\nEnter your selection: \");\r\n                                                    postcodeSelected = sc.nextInt();\r\n                                                    sc.nextLine();\r\n\r\n                                                    if (postcodeSelected > 0 && postcodeSelected <= count) {\r\n                                                        error = false;\r\n                                                    } else {\r\n                                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                                        error = true;\r\n                                                    }\r\n                                                } catch (InputMismatchException e) {\r\n                                                    System.out.println(\"Please enter a valid postcode no!\");\r\n                                                    sc.nextLine();\r\n                                                }\r\n                                            } while (error);\r\n\r\n                                            String postcode = AddressUtils.getPostcodeSelected(cityName, postcodeSelected - 1);\r\n\r\n                                            String streetName;\r\n                                            do {\r\n                                                System.out.print(\"\\nEnter the street name: \");\r\n                                                streetName = sc.nextLine();\r\n\r\n                                                if (streetName.trim().isEmpty()) {\r\n                                                    System.out.println(\"Please enter the street name.\");\r\n                                                    error = true;\r\n                                                } else {\r\n                                                    streetName = streetName.toUpperCase();\r\n                                                    error = false;\r\n                                                }\r\n                                            } while (error);\r\n\r\n                                            Address cinemaAddress = new Address(streetName.trim(), postcode, cityName, stateName);\r\n                                            cinema.setCinemaAddress(cinemaAddress);\r\n\r\n                                            ResultSet result = null;\r\n                                            try {\r\n                                                result = DatabaseUtils.selectQueryById(\"cinema_address\", \"cinema\", null, null);\r\n                                            } catch (SQLException e) {\r\n                                                throw new RuntimeException(e);\r\n                                            }\r\n\r\n                                            duplicatedAddress = cinemaAddress.checkEditAddressDuplicate(result, \"cinema_address\", orgCinema.getCinemaAddress().getAddress());\r\n\r\n                                            if (duplicatedAddress == true) {\r\n                                                System.out.println(\"Same cinema address detected.\");\r\n                                            }\r\n                                        } while (duplicatedAddress);\r\n                                        break;\r\n                                    case 3:\r\n                                        // Cinema phone\r\n                                        do {\r\n                                            System.out.print(\"\\nEnter the new cinema phone number: \");\r\n                                            String phoneNumber = sc.nextLine();\r\n\r\n                                            if (phoneNumber.trim().isEmpty()) {\r\n                                                System.out.println(\"Please enter the phone number.\");\r\n                                                error = true;\r\n                                            } else {\r\n                                                cinema.setCinemaPhone(phoneNumber.trim());\r\n\r\n                                                if (cinema.isValidOfficePhoneNumber()) {\r\n                                                    error = false;\r\n                                                } else {\r\n                                                    System.out.println(\"The phone number is invalid.\");\r\n                                                    error = true;\r\n                                                }\r\n                                            }\r\n                                        } while (error);\r\n                                        break;\r\n                                }\r\n                            } while (stop == false);\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 4:\r\n                    // Delete Cinema\r\n                    do {\r\n                        error = true;\r\n                        int cinemaDeleted = 0;\r\n                        ArrayList<Cinema> cinemasDeleted = new ArrayList<>();\r\n                        do {\r\n                            try {\r\n                                System.out.println(\"\\nSelect the cinema you want to delete: \");\r\n                                cinemasDeleted = Cinema.viewCinemaList(1);\r\n                                System.out.print(\"\\nEnter the cinema no (0 - Back): \");\r\n                                cinemaDeleted = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (cinemaDeleted >= 0 && cinemaDeleted <= cinemasDeleted.size()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                    error = true;\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid choice!\");\r\n                                sc.nextLine();\r\n                                error = true;\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (cinemaDeleted != 0) {\r\n                            Cinema cinema = cinemasDeleted.get(cinemaDeleted - 1);\r\n\r\n                            String confirmation;\r\n                            do {\r\n                                System.out.println(\"\\nAre you sure you want to delete this cinema? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                confirmation = SystemClass.askForContinue(answer);\r\n                            } while (confirmation.equals(\"Invalid\"));\r\n\r\n                            // Confirm that the cinema is successfully deleted\r\n                            boolean success = false;\r\n                            do {\r\n                                if (confirmation.equals(\"Y\")) {\r\n                                    success = cinema.delete();\r\n                                } else {\r\n                                    success = true;\r\n                                    System.out.println(\"\\nThe cinema is safe :)\");\r\n                                }\r\n\r\n                                if (success == false) {\r\n                                    do {\r\n                                        System.out.println(\"\\nDo you want to retry to delete this cinema? (Y / N)\");\r\n                                        System.out.print(\"Answer: \");\r\n                                        String answer = sc.next();\r\n                                        sc.nextLine();\r\n\r\n                                        confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                        if (confirmation.equals(\"Y\")) {\r\n                                            continues = true;\r\n                                        } else {\r\n                                            continues = false;\r\n                                        }\r\n                                    } while (confirmation.equals(\"Invalid\"));\r\n                                }\r\n                                else {\r\n                                    continues = false;\r\n                                }\r\n                            } while (continues);\r\n\r\n                            String continueDeleteCinema;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want to continue to delete another cinema? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer2 = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                continueDeleteCinema = SystemClass.askForContinue(answer2);\r\n                            } while (continueDeleteCinema.equals(\"Invalid\"));\r\n\r\n                            if (continueDeleteCinema.equals(\"Y\")) {\r\n                                continues = true;\r\n                            } else {\r\n                                continues = false;\r\n                                back = false;\r\n                            }\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n            }\r\n        } while (back == false);\r\n    }\r\n\r\n    private static void manageHall(Scanner sc) throws Exception {\r\n        boolean back = false;\r\n        boolean error = true;\r\n        boolean continues = true;\r\n\r\n        ArrayList<Cinema> cinemas = Cinema.viewCinemaList(1);\r\n        int cinemaSelected = 0;\r\n\r\n        do {\r\n            try {\r\n                System.out.println(\"\\nSelect the cinema you want to manage it's hall: \");\r\n                for (int i = 0; i < cinemas.size(); i++) {\r\n                    System.out.println((i + 1) + \". \" + cinemas.get(i).getCinemaName().getName());\r\n                }\r\n                System.out.print(\"\\nEnter your selection: \");\r\n                cinemaSelected = sc.nextInt();\r\n                sc.nextLine();\r\n\r\n                if (cinemaSelected > 0 && cinemaSelected <= cinemas.size()) {\r\n                    error = false;\r\n                }\r\n                else {\r\n                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                }\r\n            } catch (InputMismatchException e) {\r\n                System.out.println(\"Please enter a valid cinema no!\");\r\n                sc.nextLine();\r\n            }\r\n        } while (error);\r\n\r\n        Cinema cinema = cinemas.get(cinemaSelected - 1);\r\n\r\n        do {\r\n            int choice = displayMenu(\"Hall\", sc);\r\n            error = true;\r\n\r\n            switch (choice) {\r\n                case 0:\r\n                    back = true;\r\n                    break;\r\n                case 1:\r\n                    // Hall\r\n                    do {\r\n                        int hallNo = 0;\r\n                        error = true;\r\n                        ArrayList<Hall> halls = new ArrayList<>();\r\n                        do {\r\n                            try {\r\n                                System.out.println(\"\\nSelect the hall: \");\r\n                                halls = cinema.getHallList(1);\r\n\r\n                                for (int i = 0; i < halls.size(); i++) {\r\n                                    System.out.println((i + 1) + \". \" + halls.get(i).getHallName().getName());\r\n                                }\r\n\r\n                                System.out.print(\"\\nEnter the hall no (0 - Back): \");\r\n                                hallNo = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (hallNo >= 0 && hallNo <= halls.size()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid hall no!\");\r\n                                sc.nextLine();\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (hallNo != 0) {\r\n                            halls.get(hallNo - 1).viewHallDetails();\r\n\r\n                            String continueViewHall;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want view another cinema? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                continueViewHall = SystemClass.askForContinue(answer);\r\n                            } while (continueViewHall.equals(\"Invalid\"));\r\n\r\n                            if (continueViewHall.equals(\"Y\")) {\r\n                                continues = true;\r\n                            } else {\r\n                                continues = false;\r\n                                back = false;\r\n                            }\r\n                        }\r\n                        else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 2:\r\n                    do {\r\n                        Name name = null;\r\n                        String hallName;\r\n\r\n                        do {\r\n                            System.out.print(\"\\nEnter the hall name (0 - Back): \");\r\n                            hallName = sc.nextLine();\r\n\r\n                            if (!hallName.equals(\"0\")) {\r\n                                back = false;\r\n                                name = new Name(hallName);\r\n                                name.capitalizeWords();\r\n\r\n                                ResultSet result = null;\r\n                                try {\r\n                                    Object[] params = {cinema.getCinemaID()};\r\n                                    result = DatabaseUtils.selectQueryById(\"hall_name\", \"hall\", \"cinema_id = ?\", params);\r\n                                } catch (SQLException e) {\r\n                                    throw new RuntimeException(e);\r\n                                }\r\n\r\n                                String errorMsg = name.checkName(\"hall\", result, \"hall_name\");\r\n\r\n                                if (errorMsg == null) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(errorMsg);\r\n                                    error = true;\r\n                                }\r\n                            }\r\n                            else {\r\n                                error = false;\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (!hallName.equals(\"0\")) {\r\n                            String hallType = null;\r\n\r\n                            do {\r\n                                try {\r\n                                    System.out.println(\"\\nSelect the hall type: \");\r\n                                    System.out.println(\"1. Standard Hall\");\r\n                                    System.out.println(\"2. 3D Hall\");\r\n                                    System.out.print(\"\\nEnter your selection: \");\r\n                                    int hallTypeSelection = sc.nextInt();\r\n                                    sc.nextLine();\r\n\r\n                                    if (hallTypeSelection == 1) {\r\n                                        hallType = \"STANDARD\";\r\n                                        error = false;\r\n                                    } else if (hallTypeSelection == 2) {\r\n                                        hallType = \"3D\";\r\n                                        error = false;\r\n                                    } else {\r\n                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                        error = true;\r\n                                    }\r\n                                } catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid hall type no!\");\r\n                                    sc.nextLine();\r\n                                    error = true;\r\n                                }\r\n                            } while (error);\r\n\r\n                            Hall hall = new Hall(name, hallType);\r\n\r\n                            String confirmation;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want add the new hall for this cinema? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                confirmation = SystemClass.askForContinue(answer);\r\n                            } while (confirmation.equals(\"Invalid\"));\r\n\r\n                            // Confirm that the hall is successfully added\r\n                            boolean success;\r\n                            do {\r\n                                if (confirmation.equals(\"Y\")) {\r\n                                    success = cinema.addHall(hall);\r\n                                } else {\r\n                                    success = true;\r\n                                    System.out.println(\"This hall will not be added for the cinema.\");\r\n                                }\r\n\r\n                                if (success == false) {\r\n                                    do {\r\n                                        System.out.println(\"\\nDo you want to retry to add the new hall for this cinema? (Y / N)\");\r\n                                        System.out.print(\"Answer: \");\r\n                                        String answer = sc.next();\r\n                                        sc.nextLine();\r\n\r\n                                        confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                        if (confirmation.equals(\"Y\")) {\r\n                                            continues = true;\r\n                                        } else {\r\n                                            continues = false;\r\n                                        }\r\n                                    } while (confirmation.equals(\"Invalid\"));\r\n                                }\r\n                                else {\r\n                                    continues = false;\r\n                                }\r\n                            } while (continues);\r\n\r\n                            String continueAddHall;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want add another new cinema? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                continueAddHall = SystemClass.askForContinue(answer);\r\n                            } while (continueAddHall.equals(\"Invalid\"));\r\n\r\n                            if (continueAddHall.equals(\"Y\")) {\r\n                                continues = true;\r\n                            } else {\r\n                                continues = false;\r\n                                back = false;\r\n                            }\r\n                        }\r\n                        else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 3:\r\n                    // Modify Hall\r\n                    do {\r\n                        error = true;\r\n                        boolean stop = true;\r\n                        ArrayList<Hall> hallsModified = new ArrayList<>();\r\n                        int hallModified = 0;\r\n\r\n                        do {\r\n                            try {\r\n                                System.out.println(\"\\nSelect the hall you want to modify: \");\r\n                                hallsModified = cinema.getHallList(1);\r\n\r\n                                for (int i = 0; i < hallsModified.size(); i++) {\r\n                                    System.out.println((i + 1) + \". \" + hallsModified.get(i).getHallName().getName());\r\n                                }\r\n\r\n                                System.out.print(\"\\nEnter the hall no (0 - Back): \");\r\n                                hallModified = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (hallModified >= 0 && hallModified <= hallsModified.size()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid hall no!\");\r\n                                sc.nextLine();\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (hallModified != 0) {\r\n                            do {\r\n                                cinema.setHall(hallsModified.get(hallModified - 1));\r\n                                int serialNo = cinema.getHall().modifyHallDetails(sc);\r\n\r\n                                switch (serialNo) {\r\n                                    case 0:\r\n                                        String confirmation;\r\n                                        do {\r\n                                            System.out.println(\"\\nDo you want to save the changes? (Y / N)\");\r\n                                            System.out.print(\"Answer: \");\r\n                                            String answer = sc.next();\r\n                                            sc.nextLine();\r\n\r\n                                            confirmation = SystemClass.askForContinue(answer);\r\n                                        } while (confirmation.equals(\"Invalid\"));\r\n\r\n                                        stop = false;\r\n\r\n                                        // Confirm that the hall is successfully modified\r\n                                        boolean success = false;\r\n                                        do {\r\n                                            if (confirmation.equals(\"Y\")) {\r\n                                                success = cinema.getHall().modifyHall();\r\n                                            } else {\r\n                                                success = true;\r\n                                                System.out.println(\"\\nThe changes have not been saved.\");\r\n                                            }\r\n\r\n                                            if (success == false) {\r\n                                                do {\r\n                                                    System.out.println(\"\\nDo you want to retry to modify the hall? (Y / N)\");\r\n                                                    System.out.print(\"Answer: \");\r\n                                                    String answer = sc.next();\r\n                                                    sc.nextLine();\r\n\r\n                                                    confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                                    if (confirmation.equals(\"Y\")) {\r\n                                                        continues = true;\r\n                                                    } else {\r\n                                                        continues = false;\r\n                                                    }\r\n                                                } while (confirmation.equals(\"Invalid\"));\r\n                                            }\r\n                                            else {\r\n                                                continues = false;\r\n                                            }\r\n                                        } while (continues);\r\n\r\n                                        String continueModifyHall;\r\n                                        do {\r\n                                            System.out.println(\"\\nDo you want modify another hall? (Y / N)\");\r\n                                            System.out.print(\"Answer: \");\r\n                                            String answer = sc.next();\r\n                                            sc.nextLine();\r\n\r\n                                            continueModifyHall = SystemClass.askForContinue(answer);\r\n                                        } while (continueModifyHall.equals(\"Invalid\"));\r\n\r\n                                        if (continueModifyHall.equals(\"Y\")) {\r\n                                            continues = true;\r\n                                        } else {\r\n                                            continues = false;\r\n                                            back = false;\r\n                                        }\r\n                                        break;\r\n                                    case 1:\r\n                                        Name name = null;\r\n                                        do {\r\n                                            System.out.print(\"\\nEnter the new hall name: \");\r\n                                            String hallName = sc.nextLine();\r\n\r\n                                            name = new Name(hallName);\r\n                                            name.capitalizeWords();\r\n\r\n                                            ResultSet result = null;\r\n                                            try {\r\n                                                Object[] params = {cinema.getCinemaID()};\r\n                                                result = DatabaseUtils.selectQueryById(\"hall_name\", \"hall\", \"cinema_id = ?\", params);\r\n                                            } catch (SQLException e) {\r\n                                                throw new RuntimeException(e);\r\n                                            }\r\n\r\n                                            String errorMsg = name.checkEditName(\"hall\", result, \"hall_name\", cinema.getHall().getHallName().getName());\r\n\r\n                                            if (errorMsg == null) {\r\n                                                hallsModified.get(hallModified - 1).setHallName(name);\r\n                                                error = false;\r\n                                            } else {\r\n                                                System.out.println(errorMsg);\r\n                                                error = true;\r\n                                            }\r\n                                        } while (error);\r\n                                        break;\r\n                                    case 2:\r\n                                        System.out.println(\"Hall type cannot be modified! Please retry.\");\r\n                            /*do {\r\n                                try {\r\n                                    System.out.println(\"\\nSelect the hall type: \");\r\n                                    System.out.println(\"1. Standard Hall\");\r\n                                    System.out.println(\"2. 3D Hall\");\r\n                                    System.out.print(\"\\nEnter your selection: \");\r\n                                    int hallTypeSelection = sc.nextInt();\r\n\r\n                                    if (hallTypeSelection == 1) {\r\n                                        hallsModified.get(hallModified - 1).setHallType(\"STANDARD\");\r\n                                        //cinema.setHall(new Hall(hallsModified.get(hallModified - 1).getHallName(), \"STANDARD\"));\r\n                                        error = false;\r\n                                    } else if (hallTypeSelection == 2) {\r\n                                        hallsModified.get(hallModified - 1).setHallType(\"3D\");\r\n                                        //cinema.setHall(new Hall(hallsModified.get(hallModified - 1).getHallName(), \"3D\"));\r\n                                        error = false;\r\n                                    } else {\r\n                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                        error = true;\r\n                                    }\r\n                                }\r\n                                catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid hall type no!\");\r\n                                    sc.nextLine();\r\n                                    error = true;\r\n                                }\r\n                            } while (error);*/\r\n                                        break;\r\n                                    case 3:\r\n                                        System.out.println(\"Hall capacity cannot be modified! Please retry.\");\r\n                                        break;\r\n                                    case 4: //ChinYong Part\r\n\r\n                                        hallsModified.get(hallModified-1).initSeatList();\r\n\r\n                                        int row = 0, col = 0;\r\n                                        Scanner scanner=new Scanner(System.in);\r\n                                        boolean validInput = false;\r\n                                        String strCon=\"Y\";\r\n                                        char chCon = strCon.charAt(0);\r\n                                        while (chCon=='Y') {\r\n                                            hallsModified.get(hallModified-1).viewSeat_status();\r\n                                            while (!validInput) {\r\n                                                try {\r\n                                                    System.out.print(\"\\nSelect Row    : \");\r\n                                                    row = scanner.nextInt();\r\n\r\n                                                    System.out.print(\"Select Column : \");\r\n                                                    col = scanner.nextInt();\r\n\r\n                                                    if (!Seat.checkSeatValidation(row, col)) {\r\n                                                        System.out.println(\"Invalid Input\");\r\n                                                        continue;\r\n                                                    } else {\r\n                                                        validInput = true;\r\n                                                    }\r\n                                                } catch (Exception e) {\r\n                                                    System.out.println(\"Something wrong...\");\r\n                                                    scanner.nextLine();\r\n                                                }\r\n                                            }\r\n                                            validInput=false;\r\n                                            String letter2 = Integer.toString(hallsModified.get(hallModified - 1).getHallID());\r\n                                            char letter = (char) ('A' + row - 1);\r\n                                            String combineSeatId = letter2 + letter + Integer.toString(col);\r\n\r\n                                            int seatStatus = 1;\r\n                                            do {\r\n                                                System.out.print(\"Enter Status (1=Available 0=Unavailable) : \");\r\n                                                try {\r\n                                                    seatStatus = sc.nextInt();\r\n                                                    if (seatStatus != 1 && seatStatus != 0) {\r\n                                                        System.out.println(\"Invalid Input\");\r\n                                                    }\r\n                                                } catch (Exception e) {\r\n                                                    System.out.println(\"Something wrong...\");\r\n                                                    scanner.nextLine();\r\n                                                }\r\n                                            } while (seatStatus != 1 && seatStatus != 0);\r\n                                            String str = \" \";\r\n                                            char ch = str.charAt(0);\r\n                                            do {\r\n                                                System.out.print(\"Confirm ? (Y=Yes N=No) : \");\r\n                                                str = scanner.next().toUpperCase();\r\n                                                ch = str.charAt(0);\r\n                                            } while (ch != 'Y' && ch != 'N');\r\n                                            if (ch == 'Y') {\r\n                                                for (Seat seats : hallsModified.get(hallModified - 1).getSeats()) {\r\n                                                    if (seats.getSeat_id().equals(combineSeatId)) {\r\n                                                        seats.setSeat_status(seatStatus);\r\n                                                        seats.updateSeatStatus();\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            do {\r\n                                                System.out.print(\"Continue ? (Y=Yes N=No) : \");\r\n                                                strCon = scanner.next().toUpperCase();\r\n                                                chCon = str.charAt(0);\r\n                                            } while (chCon != 'Y' && chCon != 'N');\r\n                                        }\r\n                                        break;\r\n                                }\r\n                            } while (stop);\r\n                        }\r\n                        else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 4:\r\n                    // Delete Hall\r\n                    do {\r\n                        error = true;\r\n                        ArrayList<Hall> hallsDeleted = new ArrayList<>();\r\n                        int hallDeleted = 0;\r\n\r\n                        do {\r\n                            try {\r\n                                System.out.println(\"\\nSelect the hall you want to delete: \");\r\n                                hallsDeleted = cinema.getHallList(1);\r\n\r\n                                for (int i = 0; i < hallsDeleted.size(); i++) {\r\n                                    System.out.println((i + 1) + \". \" + hallsDeleted.get(i).getHallName().getName());\r\n                                }\r\n\r\n                                System.out.print(\"\\nEnter the hall no (0 - Back): \");\r\n                                hallDeleted = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (hallDeleted >= 0 && hallDeleted <= hallsDeleted.size()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid hall no!\");\r\n                                sc.nextLine();\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (hallDeleted != 0) {\r\n                            cinema.setHall(hallsDeleted.get(hallDeleted - 1));\r\n                            String confirmation;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want to delete this hall? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                confirmation = SystemClass.askForContinue(answer);\r\n                            } while (confirmation.equals(\"Invalid\"));\r\n\r\n                            if (confirmation.equals(\"Y\")) {\r\n                                cinema.getHall().deleteHall();\r\n                            } else {\r\n                                System.out.println(\"\\nThe hall is saved.\");\r\n                            }\r\n\r\n                            // Confirm that the cinema is successfully deleted\r\n                            boolean success;\r\n                            do {\r\n                                if (confirmation.equals(\"Y\")) {\r\n                                    success = cinema.getHall().deleteHall();\r\n                                } else {\r\n                                    success = true;\r\n                                    System.out.println(\"\\nThe hall is safe :)\");\r\n                                }\r\n\r\n                                if (success == false) {\r\n                                    do {\r\n                                        System.out.println(\"\\nDo you want to retry to delete this hall? (Y / N)\");\r\n                                        System.out.print(\"Answer: \");\r\n                                        String answer = sc.next();\r\n                                        sc.nextLine();\r\n\r\n                                        confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                        if (confirmation.equals(\"Y\")) {\r\n                                            continues = true;\r\n                                        } else {\r\n                                            continues = false;\r\n                                        }\r\n                                    } while (confirmation.equals(\"Invalid\"));\r\n                                }\r\n                                else {\r\n                                    continues = false;\r\n                                }\r\n                            } while (continues);\r\n\r\n                            String continueDeleteHall;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want to continue to delete another hall? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer2 = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                continueDeleteHall = SystemClass.askForContinue(answer2);\r\n                            } while (continueDeleteHall.equals(\"Invalid\"));\r\n\r\n                            if (continueDeleteHall.equals(\"Y\")) {\r\n                                continues = true;\r\n                            } else {\r\n                                continues = false;\r\n                                back = false;\r\n                            }\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n            }\r\n        } while (back == false);\r\n    }\r\n\r\n    private static void manageMovie(Scanner sc) throws Exception {\r\n        boolean back = false;\r\n\r\n        do {\r\n            int choice = displayMenu(\"Movie\", sc);\r\n            boolean error = true;\r\n            boolean continues = true;\r\n\r\n            switch (choice) {\r\n                case 0:\r\n                    back = true;\r\n                    break;\r\n                case 1:\r\n                    // View Movie\r\n                    do {\r\n                        int choice1 = 0;\r\n                        ArrayList<Movie> moviesAfterFiltered = MovieUtils.showMovieListAfterFiltered(null, null, 1);\r\n\r\n                        do {\r\n                            try {\r\n                                System.out.print(\"\\nEnter the movie no (0 - Back): \");\r\n                                choice1 = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (choice1 >= 0 && choice1 <= moviesAfterFiltered.size()) {\r\n                                    error = false;\r\n                                }\r\n                                else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                    error = true;\r\n                                }\r\n                            }\r\n                            catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid choice!\");\r\n                                sc.nextLine();\r\n                                error = true;\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (choice1 != 0) {\r\n                            Movie viewMovie = moviesAfterFiltered.get(choice1 - 1);\r\n                            viewMovie.viewMovieDetails();\r\n\r\n                            String continueViewMovie;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want view another movie? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                continueViewMovie = SystemClass.askForContinue(answer);\r\n                            } while (continueViewMovie.equals(\"Invalid\"));\r\n\r\n                            if (continueViewMovie.equals(\"Y\")) {\r\n                                continues = true;\r\n                            } else {\r\n                                continues = false;\r\n                                back = false;\r\n                            }\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 2:\r\n                    do {\r\n                        Movie newMovie = new Movie();\r\n\r\n                        // Movie Name\r\n                        Name name = null;\r\n                        do {\r\n                            System.out.print(\"\\nEnter movie name: \");\r\n                            String mvName = sc.nextLine();\r\n\r\n                            name = new Name(mvName);\r\n                            name.capitalizeWords();\r\n\r\n                            ResultSet result = null;\r\n                            try {\r\n                                result = DatabaseUtils.selectQueryById(\"mv_name\", \"movie\", null, null);\r\n                            } catch (SQLException e) {\r\n                                throw new RuntimeException(e);\r\n                            }\r\n\r\n                            String errorMessage = name.checkName(\"movie\", result, \"mv_name\");\r\n\r\n                            if (errorMessage == null) {\r\n                                newMovie.setMvName(name);\r\n                                error = false;\r\n                            } else {\r\n                                System.out.println(errorMessage + \"\\n\");\r\n                                error = true;\r\n                            }\r\n                        } while (error);\r\n\r\n                        // Movie Genre ID\r\n                        do {\r\n                            try {\r\n                                Object[] params = {1};\r\n                                ResultSet result = DatabaseUtils.selectQueryById(\"genre_id, genre_name\", \"genre\", \"genre_status = ?\", params);\r\n\r\n                                try {\r\n                                    int i = 1;\r\n                                    ArrayList<Integer> genreID = new ArrayList<>();\r\n\r\n                                    System.out.println(\"\\nAvailable Genres\");\r\n                                    while (result.next()) {\r\n                                        System.out.println(i + \". \" + result.getString(\"genre_name\"));\r\n                                        genreID.add(result.getInt(\"genre_id\"));  // Store the genre ID\r\n                                        i++;\r\n                                    }\r\n                                    System.out.print(\"\\nEnter your selection: \");\r\n                                    int genreSelected = sc.nextInt();\r\n                                    sc.nextLine();\r\n\r\n                                    String errorMessage = MovieValidator.checkGenreID(genreID.size(), genreSelected);\r\n\r\n                                    if (errorMessage == null) {\r\n                                        Genre genre = new Genre(genreID.get(genreSelected - 1));\r\n                                        newMovie.setGenre(genre);  // ArrayList starts from index 0\r\n                                        error = false;\r\n                                    }\r\n                                    else {\r\n                                        System.out.println(errorMessage);\r\n                                        error = true;\r\n                                    }\r\n                                }\r\n                                catch (Exception e) {\r\n                                    System.out.println(\"Please enter a valid choice!\");\r\n                                    sc.nextLine();\r\n                                    error = true;\r\n                                }\r\n                            }\r\n                            catch (SQLException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        } while (error);\r\n\r\n                        // Movie Release Date\r\n                        do {\r\n                            System.out.print(\"\\nEnter movie release date (YYYY-MM-DD): \");\r\n                            String releaseDate = sc.nextLine();\r\n\r\n                            if (releaseDate.trim().isEmpty()) {\r\n                                System.out.println(\"Please enter the release date.\");\r\n                                error = true;\r\n                            } else {\r\n                                try {\r\n                                    String[] parts = releaseDate.split(\"-\");\r\n                                    int year = Integer.parseInt(parts[0]);  // Java's built-in method for converting strings to integers (int type)\r\n                                    int month = Integer.parseInt(parts[1]);\r\n                                    int day = Integer.parseInt(parts[2]);\r\n\r\n                                    // 验证日期是否 valid\r\n                                    DateTime date = new DateTime(year, month, day);\r\n                                    boolean validDate = date.isValidDate();\r\n\r\n                                    if (validDate == true) {\r\n                                        String errorMessage = date.checkLocalDate();\r\n\r\n                                        if (errorMessage == null) {\r\n                                            newMovie.setReleaseDate(date);\r\n                                            error = false;\r\n                                        } else {\r\n                                            System.out.println(errorMessage);\r\n                                            error = true;\r\n                                        }\r\n                                    } else {\r\n                                        System.out.println(\"Please enter a valid date!\");\r\n                                        error = true;\r\n                                    }\r\n                                } catch (Exception e) {\r\n                                    System.out.println(\"The date format entered in wrong!\");\r\n                                    error = true;\r\n                                }\r\n                            }\r\n                        } while (error);\r\n\r\n                        // Movie Duration\r\n                        do {\r\n                            try {\r\n                                System.out.print(\"\\nEnter movie duration (in minutes): \");\r\n                                int duration = sc.nextInt();\r\n                                sc.nextLine();  // Consume the newline left by nextInt()\r\n\r\n                                String errorMessage = MovieValidator.checkDuration(duration);\r\n\r\n                                if (errorMessage == null) {\r\n                                    newMovie.setDuration(duration);\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(errorMessage);\r\n                                    error = true;\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid duration!\");\r\n                                sc.nextLine(); // Consume the erroneous input\r\n                                error = true;\r\n                            }\r\n                        } while (error);\r\n\r\n                        // Movie Language\r\n                        String[] languages = {\"English\", \"Chinese\", \"Japanese\", \"Korean\", \"German\", \"Italian\", \"Spanish\", \"Cantonese\", \"French\", \"Russian\", \"Arabic\", \"Hindi\", \"Tamil\"};\r\n\r\n                        String mvLanguage = MovieUtils.getMultipleChosens(sc, languages, \"languages\");\r\n                        newMovie.setLang(mvLanguage);\r\n\r\n                        // Movie Director\r\n                        String mvDirector = MovieUtils.getMultipleValues(sc, \"director\", \"directors\");\r\n                        newMovie.setDirector(mvDirector);\r\n\r\n                        // Movie Writter\r\n                        String mvWritter = MovieUtils.getMultipleValues(sc, \"writter\", \"writters\");\r\n                        newMovie.setWritter(mvWritter);\r\n\r\n                        // Movie Starring\r\n                        String mvStarring = MovieUtils.getMultipleValues(sc, \"starring\", \"starrings\");\r\n                        newMovie.setStarring(mvStarring);\r\n\r\n                        // Movie Music Provider\r\n                        String mvMusicProvider = MovieUtils.getMultipleValues(sc, \"music provider\", \"music prodivers\");\r\n                        newMovie.setMusicProvider(mvMusicProvider);\r\n\r\n                        // Movie Country\r\n                        String[] countries = {\"United States\", \"United Kingdom\", \"Canada\", \"China\", \"Taiwan\", \"Malaysia\", \"Singapore\", \"Japan\", \"North Korea\", \"Italy\", \"Hong Kong\", \"France\", \"Russia\", \"India\"};\r\n\r\n                        String mvCountry = MovieUtils.getMultipleChosens(sc, countries, \"countries\");\r\n                        newMovie.setCountry(mvCountry);\r\n\r\n                        // Movie Basic Ticket Price\r\n                        double mvBasicTicketPrice = MovieUtils.getTicketPrice(sc, \"basic\");\r\n                        newMovie.setBasicTicketPrice(mvBasicTicketPrice);\r\n\r\n                        // Movie Meta Description\r\n                        do {\r\n                            System.out.print(\"\\nEnter movie meta description: \");\r\n                            String mvDescription = sc.nextLine();\r\n\r\n                            String errorMessage = MovieValidator.checkMetaDescription(mvDescription);\r\n\r\n                            if (errorMessage == null) {\r\n                                newMovie.setMetaDescription(mvDescription);\r\n                                error = false;\r\n                            }\r\n                            else {\r\n                                System.out.println(errorMessage);\r\n                                error = true;\r\n                            }\r\n                        } while (error);\r\n\r\n                        String confirmation;\r\n                        do {\r\n                            System.out.println(\"\\nDo you want add this new movie? (Y / N)\");\r\n                            System.out.print(\"Answer: \");\r\n                            String answer = sc.next();\r\n                            sc.nextLine();\r\n\r\n                            confirmation = SystemClass.askForContinue(answer);\r\n                        } while (confirmation.equals(\"Invalid\"));\r\n\r\n                        // Confirm that the movie is successfully added\r\n                        boolean success = false;\r\n                        do {\r\n                            if (confirmation.equals(\"Y\")) {\r\n                                success = newMovie.add();\r\n                            } else {\r\n                                success = true;\r\n                                System.out.println(\"This movie will not be added.\");\r\n                            }\r\n\r\n                            if (success == false) {\r\n                                do {\r\n                                    System.out.println(\"\\nDo you want to retry to add the new movie? (Y / N)\");\r\n                                    System.out.print(\"Answer: \");\r\n                                    String answer = sc.next();\r\n                                    sc.nextLine();\r\n\r\n                                    confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                    if (confirmation.equals(\"Y\")) {\r\n                                        continues = true;\r\n                                    } else {\r\n                                        continues = false;\r\n                                    }\r\n                                } while (confirmation.equals(\"Invalid\"));\r\n                            }\r\n                            else {\r\n                                continues = false;\r\n                            }\r\n                        } while (continues);\r\n\r\n                        String continueAddMovie;\r\n                        do {\r\n                            System.out.println(\"\\nDo you want add another new movie? (Y / N)\");\r\n                            System.out.print(\"Answer: \");\r\n                            String answer = sc.next();\r\n                            sc.nextLine();\r\n\r\n                            continueAddMovie = SystemClass.askForContinue(answer);\r\n                        } while (continueAddMovie.equals(\"Invalid\"));\r\n\r\n                        if (continueAddMovie.equals(\"Y\")) {\r\n                            continues = true;\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 3:\r\n                    ArrayList<Movie> moviesAfterFiltered;\r\n                    int movieID = 1;\r\n\r\n                    do {\r\n                        System.out.println(\"\\nSelect the movie you want to modify: \");\r\n                        moviesAfterFiltered = MovieUtils.showMovieListAfterFiltered(null, null, 1);\r\n\r\n                        do {\r\n                            try {\r\n                                System.out.print(\"\\nEnter the movie id (0 - Back): \");\r\n                                movieID = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (movieID >= 0 && movieID <= moviesAfterFiltered.size()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                    error = true;\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid movie id!\");\r\n                                sc.nextLine();\r\n                                error = true;\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (movieID != 0) {\r\n                            Movie orgMovie = moviesAfterFiltered.get(movieID - 1);\r\n                            Movie movie = new Movie(orgMovie.getMovieID(), orgMovie.getGenre(), orgMovie.getMvName(), orgMovie.getReleaseDate(), orgMovie.getDuration(), orgMovie.getLang(), orgMovie.getDirector(), orgMovie.getWritter(), orgMovie.getStarring(), orgMovie.getMusicProvider(), orgMovie.getCountry(), orgMovie.getMetaDescription(), orgMovie.getBasicTicketPrice());\r\n                            boolean stop = true;\r\n\r\n                            do {\r\n                                int serialNum = movie.modifyMovieDetail(sc);\r\n                                switch (serialNum) {\r\n                                    case 0:\r\n                                        String confirmation;\r\n                                        do {\r\n                                            System.out.println(\"\\nDo you want to save the changes? (Y / N)\");\r\n                                            System.out.print(\"Answer: \");\r\n                                            String answer = sc.next();\r\n                                            sc.nextLine();\r\n\r\n                                            confirmation = SystemClass.askForContinue(answer);\r\n                                        } while (confirmation.equals(\"Invalid\"));\r\n\r\n                                        stop = false;\r\n\r\n                                        // Confirm that the movie is successfully modified\r\n                                        boolean success = false;\r\n                                        do {\r\n                                            if (confirmation.equals(\"Y\")) {\r\n                                                success = movie.modify();\r\n                                            } else {\r\n                                                success = true;\r\n                                                movie = orgMovie;\r\n                                                System.out.println(\"\\nThe changes have not been saved.\");\r\n                                            }\r\n\r\n                                            if (success == false) {\r\n                                                do {\r\n                                                    System.out.println(\"\\nDo you want to retry to modify the movie? (Y / N)\");\r\n                                                    System.out.print(\"Answer: \");\r\n                                                    String answer = sc.next();\r\n                                                    sc.nextLine();\r\n\r\n                                                    confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                                    if (confirmation.equals(\"Y\")) {\r\n                                                        continues = true;\r\n                                                    } else {\r\n                                                        continues = false;\r\n                                                    }\r\n                                                } while (confirmation.equals(\"Invalid\"));\r\n                                            }\r\n                                            else {\r\n                                                continues = false;\r\n                                            }\r\n                                        } while (continues);\r\n\r\n                                        String continueModifyMovie;\r\n                                        do {\r\n                                            System.out.println(\"\\nDo you want modify another movie? (Y / N)\");\r\n                                            System.out.print(\"Answer: \");\r\n                                            String answer = sc.next();\r\n                                            sc.nextLine();\r\n\r\n                                            continueModifyMovie = SystemClass.askForContinue(answer);\r\n                                        } while (continueModifyMovie.equals(\"Invalid\"));\r\n\r\n                                        if (continueModifyMovie.equals(\"Y\")) {\r\n                                            continues = true;\r\n                                        } else {\r\n                                            continues = false;\r\n                                            back = false;\r\n                                        }\r\n                                        break;\r\n                                    case 1:\r\n                                        // Movie Name\r\n                                        Name name = null;\r\n                                        do {\r\n                                            System.out.print(\"\\nEnter the new movie name: \");\r\n                                            String newMvName = sc.nextLine();\r\n\r\n                                            name = new Name(newMvName);\r\n                                            name.capitalizeWords();\r\n\r\n                                            ResultSet result = null;\r\n                                            try {\r\n                                                result = DatabaseUtils.selectQueryById(\"mv_name\", \"movie\", null, null);\r\n                                            } catch (SQLException e) {\r\n                                                throw new RuntimeException(e);\r\n                                            }\r\n\r\n                                            String errorMessage = name.checkEditName(\"movie\", result, \"mv_name\", orgMovie.getMvName().getName());\r\n\r\n                                            if (errorMessage == null) {\r\n                                                movie.setMvName(name);\r\n                                                error = false;\r\n                                            } else {\r\n                                                System.out.println(errorMessage);\r\n                                                error = true;\r\n                                            }\r\n                                        } while (error);\r\n                                        break;\r\n                                    case 2:\r\n                                        // Movie Genre ID\r\n                                        do {\r\n                                            try {\r\n                                                Object[] params = {1};\r\n                                                ResultSet result = DatabaseUtils.selectQueryById(\"genre_id, genre_name\", \"genre\", \"genre_status = ?\", params);\r\n\r\n                                                try {\r\n                                                    int i = 1;\r\n                                                    ArrayList<Integer> genreID = new ArrayList<>();\r\n\r\n                                                    System.out.println(\"\\nAvailable Genres\");\r\n                                                    while (result.next()) {\r\n                                                        System.out.println(i + \". \" + result.getString(\"genre_name\"));\r\n                                                        genreID.add(result.getInt(\"genre_id\"));  // Store the genre ID\r\n                                                        i++;\r\n                                                    }\r\n                                                    System.out.print(\"\\nEnter your selection: \");\r\n                                                    int newGenre = sc.nextInt();\r\n                                                    sc.nextLine();\r\n\r\n                                                    String errorMessage = MovieValidator.checkGenreID(genreID.size(), newGenre);\r\n\r\n                                                    if (errorMessage == null) {\r\n                                                        Genre genre = new Genre(genreID.get(newGenre - 1));\r\n                                                        movie.setGenre(genre);  // ArrayList starts from index 0\r\n                                                        error = false;\r\n                                                    } else {\r\n                                                        System.out.println(errorMessage);\r\n                                                        error = true;\r\n                                                    }\r\n                                                } catch (Exception e) {\r\n                                                    System.out.println(\"Please enter a valid choice!\");\r\n                                                    sc.nextLine();\r\n                                                    error = true;\r\n                                                }\r\n                                            } catch (SQLException e) {\r\n                                                e.printStackTrace();\r\n                                            }\r\n                                        } while (error);\r\n                                        break;\r\n                                    case 3:\r\n                                        // Movie Release Date\r\n                                        do {\r\n                                            System.out.print(\"\\nEnter movie release date (YYYY-MM-DD) (X - Back): \");\r\n                                            String editReleaseDate = sc.nextLine();\r\n\r\n                                            if (editReleaseDate.trim().isEmpty()) {\r\n                                                System.out.println(\"Please enter the release date.\");\r\n                                                error = true;\r\n                                            } else if (editReleaseDate.equals(\"x\") || editReleaseDate.equals(\"X\")) {\r\n                                                break;\r\n                                            } else {\r\n                                                try {\r\n                                                    String[] editParts = editReleaseDate.split(\"-\");\r\n                                                    int editYear = Integer.parseInt(editParts[0]);  // Java's built-in method for converting strings to integers (int type)\r\n                                                    int editMonth = Integer.parseInt(editParts[1]);\r\n                                                    int editDay = Integer.parseInt(editParts[2]);\r\n\r\n                                                    // 验证日期是否 valid\r\n                                                    DateTime editDate = new DateTime(editYear, editMonth, editDay);\r\n                                                    boolean editValidDate = editDate.isValidDate();\r\n\r\n                                                    if (editValidDate == true) {\r\n                                                        String errorMessage = editDate.checkLocalDate();\r\n\r\n                                                        if (errorMessage == null) {\r\n                                                            movie.setReleaseDate(editDate);\r\n                                                            error = false;\r\n                                                        } else {\r\n                                                            System.out.println(errorMessage);\r\n                                                            error = true;\r\n                                                        }\r\n                                                    } else {\r\n                                                        System.out.println(\"Please enter a valid date!\");\r\n                                                        error = true;\r\n                                                    }\r\n                                                } catch (Exception e) {\r\n                                                    System.out.println(\"The date format entered in wrong!\");\r\n                                                    error = true;\r\n                                                }\r\n                                            }\r\n                                        } while (error);\r\n                                        break;\r\n                                    case 4:\r\n                                        // Movie Duration\r\n                                        do {\r\n                                            try {\r\n                                                System.out.print(\"\\nEnter the new movie duration (in minutes): \");\r\n                                                int editDuration = sc.nextInt();\r\n                                                sc.nextLine();  // Consume the newline left by nextInt()\r\n\r\n                                                String errorMessage = MovieValidator.checkDuration(editDuration);\r\n\r\n                                                if (errorMessage == null) {\r\n                                                    movie.setDuration(editDuration);\r\n                                                    error = false;\r\n                                                } else {\r\n                                                    System.out.println(errorMessage);\r\n                                                    error = true;\r\n                                                }\r\n                                            } catch (InputMismatchException e) {\r\n                                                System.out.println(\"Please enter a valid duration!\");\r\n                                                sc.nextLine(); // Consume the erroneous input\r\n                                                error = true;\r\n                                            }\r\n                                        } while (error);\r\n                                        break;\r\n                                    case 5:\r\n                                        // Movie Language\r\n                                        String[] languages = {\"English\", \"Chinese\", \"Japanese\", \"Korean\", \"German\", \"Italian\", \"Spanish\", \"Cantonese\", \"French\", \"Russian\", \"Arabic\", \"Hindi\", \"Tamil\"};\r\n\r\n                                        String editMvLanguage = MovieUtils.getMultipleChosens(sc, languages, \"languages\");\r\n                                        movie.setLang(editMvLanguage);\r\n                                        break;\r\n                                    case 6:\r\n                                        // Movie Director\r\n                                        String editMvDirector = MovieUtils.getMultipleValues(sc, \"director\", \"directors\");\r\n                                        movie.setDirector(editMvDirector);\r\n                                        break;\r\n                                    case 7:\r\n                                        // Movie Writter\r\n                                        String editMvWritter = MovieUtils.getMultipleValues(sc, \"writter\", \"writters\");\r\n                                        movie.setWritter(editMvWritter);\r\n                                        break;\r\n                                    case 8:\r\n                                        // Movie Starring\r\n                                        String editMvStarring = MovieUtils.getMultipleValues(sc, \"starring\", \"starrings\");\r\n                                        movie.setStarring(editMvStarring);\r\n                                        break;\r\n                                    case 9:\r\n                                        // Movie Music Provider\r\n                                        String editMvMusicProvider = MovieUtils.getMultipleValues(sc, \"music provider\", \"music prodivers\");\r\n                                        movie.setMusicProvider(editMvMusicProvider);\r\n                                        break;\r\n                                    case 10:\r\n                                        // Movie Country\r\n                                        String[] countries = {\"United States\", \"United Kingdom\", \"Canada\", \"China\", \"Taiwan\", \"Malaysia\", \"Singapore\", \"Japan\", \"North Korea\", \"Italy\", \"Hong Kong\", \"France\", \"Russia\", \"India\"};\r\n\r\n                                        String editMvCountry = MovieUtils.getMultipleChosens(sc, countries, \"countries\");\r\n                                        movie.setCountry(editMvCountry);\r\n                                        break;\r\n                                    case 11:\r\n                                        // Movie Basic Ticket Price\r\n                                        double editMvBasicTicketPrice = MovieUtils.getTicketPrice(sc, \"basic\");\r\n                                        movie.setBasicTicketPrice(editMvBasicTicketPrice);\r\n                                        System.out.println(movie.getBasicTicketPrice());\r\n                                        break;\r\n                                    case 12:\r\n                                        // Movie Meta Description\r\n                                        do {\r\n                                            System.out.print(\"\\nEnter the new movie meta description: \");\r\n                                            String editMvDescription = sc.nextLine();\r\n\r\n                                            String errorMessage = MovieValidator.checkMetaDescription(editMvDescription);\r\n\r\n                                            if (errorMessage == null) {\r\n                                                movie.setMetaDescription(editMvDescription);\r\n                                                error = false;\r\n                                            }\r\n                                            else {\r\n                                                System.out.println(errorMessage);\r\n                                                error = true;\r\n                                            }\r\n                                        } while (error);\r\n                                        break;\r\n                                }\r\n                            } while (stop);\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 4:\r\n                    movieID = 0;\r\n                    do {\r\n                        System.out.println(\"\\nSelect the movie you want to delete: \");\r\n                        moviesAfterFiltered = MovieUtils.showMovieListAfterFiltered(null, null, 1);\r\n\r\n                        do {\r\n                            try {\r\n                                System.out.print(\"\\nEnter the movie id (0 - Back): \");\r\n                                movieID = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (movieID >= 0 && movieID <= moviesAfterFiltered.size()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                    error = true;\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid movie id!\");\r\n                                sc.nextLine();\r\n                                error = true;\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (movieID != 0) {\r\n                            Movie movie = moviesAfterFiltered.get(movieID - 1);\r\n                            movie.viewMovieDetails();\r\n                            String confirmation;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want to delete this movie? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                confirmation = SystemClass.askForContinue(answer);\r\n                            } while (confirmation.equals(\"Invalid\"));\r\n\r\n                            // Confirm that the movie is successfully deleted\r\n                            boolean success = false;\r\n                            do {\r\n                                if (confirmation.equals(\"Y\")) {\r\n                                    success = movie.delete();\r\n                                } else {\r\n                                    success = true;\r\n                                    System.out.println(\"\\nThe movie is safe :)\");\r\n                                }\r\n\r\n                                if (success == false) {\r\n                                    do {\r\n                                        System.out.println(\"\\nDo you want to retry to delete this cinema? (Y / N)\");\r\n                                        System.out.print(\"Answer: \");\r\n                                        String answer = sc.next();\r\n                                        sc.nextLine();\r\n\r\n                                        confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                        if (confirmation.equals(\"Y\")) {\r\n                                            continues = true;\r\n                                        } else {\r\n                                            continues = false;\r\n                                        }\r\n                                    } while (confirmation.equals(\"Invalid\"));\r\n                                }\r\n                                else {\r\n                                    continues = false;\r\n                                }\r\n                            } while (continues);\r\n\r\n                            String continueDeleteMovie;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want delete another movie? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                continueDeleteMovie = SystemClass.askForContinue(answer);\r\n                            } while (continueDeleteMovie.equals(\"Invalid\"));\r\n\r\n                            if (continueDeleteMovie.equals(\"Y\")) {\r\n                                continues = true;\r\n                            } else {\r\n                                continues = false;\r\n                                back = false;\r\n                            }\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n            }\r\n        } while (back == false);\r\n    }\r\n\r\n    private static void manageGenre(Scanner sc) throws Exception {\r\n        boolean back = false;\r\n\r\n        do {\r\n            ArrayList<Genre> genres = new ArrayList<>();\r\n            int choice = displayMenu(\"Genre\", sc);\r\n            boolean error = true;\r\n            boolean continues = true;\r\n\r\n            switch (choice) {\r\n                case 0:\r\n                    back = true;\r\n                    break;\r\n                case 1:\r\n                    int genreSelected = 0;\r\n                    genres = Genre.viewGenreList(1);\r\n\r\n                    do {\r\n                        try {\r\n                            System.out.print(\"\\nEnter the genre no (0 - Back): \");\r\n                            genreSelected = sc.nextInt();\r\n                            sc.nextLine();\r\n\r\n                            if (genreSelected >= 0 && genreSelected <= genres.size()) {\r\n                                error = false;\r\n                            }\r\n                            else {\r\n                                System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                error = true;\r\n                            }\r\n                        }\r\n                        catch (InputMismatchException e) {\r\n                            System.out.println(\"Please enter a valid choice!\");\r\n                            sc.nextLine();\r\n                            error = true;\r\n                        }\r\n                    } while (error);\r\n\r\n                    if (genreSelected != 0) {\r\n                        Genre viewGenre = genres.get(genreSelected - 1);\r\n                        viewGenre.viewGenreDetails();\r\n                    }\r\n                    back = false;\r\n                    break;\r\n                case 2:\r\n                    do {\r\n                        Genre newGenre = new Genre();\r\n\r\n                        // Genre Name\r\n                        Name name = null;\r\n                        do {\r\n                            System.out.print(\"\\nEnter genre name: \");\r\n                            String genreName = sc.nextLine();\r\n\r\n                            name = new Name(genreName);\r\n                            name.capitalizeWords();\r\n\r\n                            ResultSet result = null;\r\n                            try {\r\n                                result = DatabaseUtils.selectQueryById(\"genre_name\", \"genre\", null, null);\r\n                            } catch (SQLException e) {\r\n                                throw new RuntimeException(e);\r\n                            }\r\n\r\n                            String errorMessage = name.checkName(\"genre\", result, \"genre_name\");\r\n\r\n                            if (errorMessage == null) {\r\n                                newGenre.setGenreName(name);\r\n                                error = false;\r\n                            } else {\r\n                                System.out.println(errorMessage);\r\n                                error = true;\r\n                            }\r\n                        } while (error);\r\n\r\n                        String confirmation;\r\n                        do {\r\n                            System.out.println(\"\\nDo you want add this new genre? (Y / N)\");\r\n                            System.out.print(\"Answer: \");\r\n                            String answer = sc.next();\r\n                            sc.nextLine();\r\n\r\n                            confirmation = SystemClass.askForContinue(answer);\r\n                        } while (confirmation.equals(\"Invalid\"));\r\n\r\n                        // Confirm that the genre is successfully added\r\n                        boolean success = false;\r\n                        do {\r\n                            if (confirmation.equals(\"Y\")) {\r\n                                success = newGenre.add();\r\n                            } else {\r\n                                success = true;\r\n                                System.out.println(\"This genre will not be added.\");\r\n                            }\r\n\r\n                            if (success == false) {\r\n                                do {\r\n                                    System.out.println(\"\\nDo you want to retry to add the new genre? (Y / N)\");\r\n                                    System.out.print(\"Answer: \");\r\n                                    String answer = sc.next();\r\n                                    sc.nextLine();\r\n\r\n                                    confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                    if (confirmation.equals(\"Y\")) {\r\n                                        continues = true;\r\n                                    } else {\r\n                                        continues = false;\r\n                                    }\r\n                                } while (confirmation.equals(\"Invalid\"));\r\n                            }\r\n                            else {\r\n                                continues = false;\r\n                            }\r\n                        } while (continues);\r\n\r\n                        String continueAddGenre;\r\n                        do {\r\n                            System.out.println(\"\\nDo you want add another new genre? (Y / N)\");\r\n                            System.out.print(\"Answer: \");\r\n                            String answer = sc.next();\r\n                            sc.nextLine();\r\n\r\n                            continueAddGenre = SystemClass.askForContinue(answer);\r\n                        } while (continueAddGenre.equals(\"Invalid\"));\r\n\r\n                        if (continueAddGenre.equals(\"Y\")) {\r\n                            continues = true;\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 3:\r\n                    do {\r\n                        int genreModified = 0;\r\n                        do {\r\n                            try {\r\n                                System.out.println(\"\\nSelect the genre you want to modify: \");\r\n                                genres = Genre.viewGenreList(1);\r\n                                System.out.print(\"\\nEnter the genre no (0 - Back): \");\r\n                                genreModified = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (genreModified >= 0 && genreModified <= genres.size()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                    error = true;\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid choice!\");\r\n                                sc.nextLine();\r\n                                error = true;\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (genreModified != 0) {\r\n                            Genre orgGenre = genres.get(genreModified - 1);\r\n                            Genre genre = new Genre(orgGenre.getGenreID(), orgGenre.getGenreName(), orgGenre.getPost(), orgGenre.getStatus());\r\n                            Name name = null;\r\n\r\n                            do {\r\n                                System.out.print(\"\\nEnter the new genre name (0 - Back): \");\r\n                                String editGenreName = sc.nextLine();\r\n\r\n                                if (editGenreName.equals(\"0\")) {\r\n                                    error = false;\r\n                                } else {\r\n                                    name = new Name(editGenreName);\r\n                                    name.capitalizeWords();\r\n\r\n                                    ResultSet result = null;\r\n                                    try {\r\n                                        result = DatabaseUtils.selectQueryById(\"genre_name\", \"genre\", null, null);\r\n                                    } catch (SQLException e) {\r\n                                        throw new RuntimeException(e);\r\n                                    }\r\n\r\n                                    String errorMessage = name.checkEditName(\"genre\", result, \"genre_name\", genre.getGenreName().getName());\r\n\r\n                                    if (errorMessage == null) {\r\n                                        error = false;\r\n                                        genre.setGenreName(name);\r\n\r\n                                        String confirmation;\r\n                                        do {\r\n                                            System.out.println(\"\\nDo you want to save the changes? (Y / N)\");\r\n                                            System.out.print(\"Answer: \");\r\n                                            String answer = sc.next();\r\n                                            sc.nextLine();\r\n\r\n                                            confirmation = SystemClass.askForContinue(answer);\r\n                                        } while (confirmation.equals(\"Invalid\"));\r\n\r\n                                        // Confirm that the genre is successfully modified\r\n                                        boolean success = false;\r\n                                        do {\r\n                                            if (confirmation.equals(\"Y\")) {\r\n                                                success = genre.modify();\r\n                                            } else {\r\n                                                success = true;\r\n                                                genre.setGenreName(orgGenre.getGenreName());\r\n                                                System.out.println(\"\\nThe changes have not been saved.\");\r\n                                            }\r\n\r\n                                            if (success == false) {\r\n                                                do {\r\n                                                    System.out.println(\"\\nDo you want to retry to modify the genre? (Y / N)\");\r\n                                                    System.out.print(\"Answer: \");\r\n                                                    String answer = sc.next();\r\n                                                    sc.nextLine();\r\n\r\n                                                    confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                                    if (confirmation.equals(\"Y\")) {\r\n                                                        continues = true;\r\n                                                    } else {\r\n                                                        continues = false;\r\n                                                    }\r\n                                                } while (confirmation.equals(\"Invalid\"));\r\n                                            }\r\n                                            else {\r\n                                                continues = false;\r\n                                            }\r\n                                        } while (continues);\r\n                                    } else {\r\n                                        System.out.println(errorMessage);\r\n                                        error = true;\r\n                                    }\r\n                                }\r\n                            } while (error);\r\n\r\n                            String continueModifyGenre;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want to continue to modify another genre? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer2 = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                continueModifyGenre = SystemClass.askForContinue(answer2);\r\n                            } while (continueModifyGenre.equals(\"Invalid\"));\r\n\r\n                            if (continueModifyGenre.equals(\"Y\")) {\r\n                                continues = true;\r\n                            } else {\r\n                                back = false;\r\n                                continues = false;\r\n                            }\r\n                        } else {\r\n                            back = false;\r\n                            continues = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 4:\r\n                    // Delere genre\r\n                    do {\r\n                        int genreDeleted = 0;\r\n                        do {\r\n                            try {\r\n                                System.out.println(\"\\nSelect the genre you want to delete: \");\r\n                                genres = Genre.viewGenreList(1);\r\n                                System.out.print(\"\\nEnter the genre no (0 - Back): \");\r\n                                genreDeleted = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (genreDeleted >= 0 && genreDeleted <= genres.size()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                    error = true;\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid choice!\");\r\n                                sc.nextLine();\r\n                                error = true;\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (genreDeleted != 0) {\r\n                            int post = genres.get(genreDeleted - 1).getPost();\r\n\r\n                            if (post == 0) {\r\n                                Genre genre = genres.get(genreDeleted - 1);\r\n                                String confirmation;\r\n                                do {\r\n                                    System.out.println(\"\\nAre you sure you want to delete this genre? (Y / N)\");\r\n                                    System.out.print(\"Answer: \");\r\n                                    String answer = sc.next();\r\n                                    sc.nextLine();\r\n\r\n                                    confirmation = SystemClass.askForContinue(answer);\r\n                                } while (confirmation.equals(\"Invalid\"));\r\n\r\n                                // Confirm that the genre is successfully deleted\r\n                                boolean success = false;\r\n                                do {\r\n                                    if (confirmation.equals(\"Y\")) {\r\n                                        success = genre.delete();\r\n                                    } else {\r\n                                        success = true;\r\n                                        System.out.println(\"\\nThe genre is safe :)\");\r\n                                    }\r\n\r\n                                    if (success == false) {\r\n                                        do {\r\n                                            System.out.println(\"\\nDo you want to retry to delete this genre? (Y / N)\");\r\n                                            System.out.print(\"Answer: \");\r\n                                            String answer = sc.next();\r\n                                            sc.nextLine();\r\n\r\n                                            confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                            if (confirmation.equals(\"Y\")) {\r\n                                                continues = true;\r\n                                            } else {\r\n                                                continues = false;\r\n                                            }\r\n                                        } while (confirmation.equals(\"Invalid\"));\r\n                                    }\r\n                                    else {\r\n                                        continues = false;\r\n                                    }\r\n                                } while (continues);\r\n\r\n                                String continueDeleteGenre;\r\n                                do {\r\n                                    System.out.println(\"\\nDo you want to continue to delete another genre? (Y / N)\");\r\n                                    System.out.print(\"Answer: \");\r\n                                    String answer2 = sc.next();\r\n                                    sc.nextLine();\r\n\r\n                                    continueDeleteGenre = SystemClass.askForContinue(answer2);\r\n                                } while (continueDeleteGenre.equals(\"Invalid\"));\r\n\r\n                                if (continueDeleteGenre.equals(\"Y\")) {\r\n                                    continues = true;\r\n                                } else {\r\n                                    continues = false;\r\n                                    back = false;\r\n                                }\r\n                            } else {\r\n                                System.out.println(\"Sorry, you cannot delete this genre. Please make sure there are no movie posts in this genre!\");\r\n                                continues = true;\r\n                            }\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n            }\r\n        } while (back == false);\r\n    }\r\n\r\n    private static void manageSchedule(Scanner sc) throws Exception {\r\n        boolean back = false;\r\n\r\n        do {\r\n            int choice = displayMenu(\"Schedule\", sc);\r\n            boolean error = true;\r\n            boolean continues = true;\r\n\r\n            switch (choice) {\r\n                case 0:\r\n                    back = true;\r\n                    break;\r\n                case 1:\r\n                    do {\r\n                        // Cinema\r\n                        int cinemaNo = 0;\r\n                        error = true;\r\n                        ArrayList<Cinema> cinemas = new ArrayList<>();\r\n                        do {\r\n                            try {\r\n                                System.out.print(\"\\nSelect the cinema you want to view the schedule (0 - Back): \");\r\n                                cinemas = Cinema.viewCinemaList(1);\r\n                                System.out.print(\"\\nEnter the cinema no: \");\r\n                                cinemaNo = sc.nextInt();\r\n                                sc.nextLine();\r\n\r\n                                if (cinemaNo >= 0 && cinemaNo <= cinemas.size()) {\r\n                                    error = false;\r\n                                } else {\r\n                                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                }\r\n                            } catch (InputMismatchException e) {\r\n                                System.out.println(\"Please enter a valid cinema no!\");\r\n                                sc.nextLine();\r\n                            }\r\n                        } while (error);\r\n\r\n                        if (cinemaNo != 0) {\r\n                            TimeTable timeTable = TimeTable.acceptViewScheduleListInput(sc, cinemas.get(cinemaNo - 1));\r\n\r\n                            ArrayList<TimeTable> schedules = timeTable.viewSchedule();\r\n\r\n                            TimeTable.printing(schedules);\r\n\r\n                            String continueViewSchedule;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want view another schedule? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                continueViewSchedule = SystemClass.askForContinue(answer);\r\n                            } while (continueViewSchedule.equals(\"Invalid\"));\r\n\r\n                            if (continueViewSchedule.equals(\"Y\")) {\r\n                                continues = true;\r\n                            } else {\r\n                                continues = false;\r\n                                back = false;\r\n                            }\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                        }\r\n                    } while (continues);\r\n                    break;\r\n                case 2:\r\n                    TimeTable newSchedule = new TimeTable();\r\n\r\n                    ArrayList<Movie> moviesAfterFiltered;\r\n                    int movieID = 1, hallID = 1;\r\n                    error = true;\r\n\r\n                    do {\r\n                        moviesAfterFiltered = MovieUtils.viewMovieListByFilter(sc);  // return null means user select 0 (back), return empty ArrayList means no movie was found\r\n\r\n                        if (moviesAfterFiltered != null) {\r\n                            do {\r\n                                try {\r\n                                    System.out.print(\"\\nEnter the movie id (0 - Back): \");\r\n                                    movieID = sc.nextInt();\r\n                                    sc.nextLine();\r\n\r\n                                    if (movieID >= 0 && movieID <= moviesAfterFiltered.size()) {\r\n                                        error = false;\r\n                                    } else {\r\n                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                        error = true;\r\n                                    }\r\n                                } catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid movie id!\");\r\n                                    sc.nextLine();\r\n                                    error = true;\r\n                                }\r\n                            } while (error);\r\n                        } else {\r\n                            continues = false;\r\n                            back = false;\r\n                            break;\r\n                        }\r\n                    } while (movieID == 0 && moviesAfterFiltered != null);\r\n\r\n                    if (movieID != 0 && moviesAfterFiltered != null) {\r\n                        do {\r\n                            newSchedule.setMovie(moviesAfterFiltered.get(movieID - 1));\r\n\r\n                            // Cinema\r\n                            int cinemaNo = 0;\r\n                            error = true;\r\n                            ArrayList<Cinema> cinemas = new ArrayList<>();\r\n\r\n                            do {\r\n                                try {\r\n                                    System.out.print(\"\\nSelect the cinema you want to view the schedule: \");\r\n                                    cinemas = Cinema.viewCinemaList(1);\r\n                                    System.out.print(\"\\nEnter the cinema no: \");\r\n                                    cinemaNo = sc.nextInt();\r\n                                    sc.nextLine();\r\n\r\n                                    if (cinemaNo > 0 && cinemaNo <= cinemas.size()) {\r\n                                        error = false;\r\n                                    } else {\r\n                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                    }\r\n                                } catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid cinema no!\");\r\n                                    sc.nextLine();\r\n                                }\r\n                            } while (error);\r\n\r\n                            // Hall\r\n                            int hallNo = 0;\r\n                            error = true;\r\n                            ArrayList<Hall> halls = new ArrayList<>();\r\n                            do {\r\n                                try {\r\n                                    System.out.println(\"\\nSelect the hall: \");\r\n                                    halls = cinemas.get(cinemaNo - 1).getHallList(1);\r\n\r\n                                    for (int i = 0; i < halls.size(); i++) {\r\n                                        System.out.println((i + 1) + \". \" + halls.get(i).getHallName().getName());\r\n                                    }\r\n\r\n                                    System.out.print(\"\\nEnter the hall no: \");\r\n                                    hallNo = sc.nextInt();\r\n                                    sc.nextLine();\r\n\r\n                                    if (hallNo > 0 && hallNo <= halls.size()) {\r\n                                        error = false;\r\n                                    } else {\r\n                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                    }\r\n                                } catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid hall no!\");\r\n                                    sc.nextLine();\r\n                                }\r\n                            } while (error);\r\n\r\n                            newSchedule.setHall(halls.get(hallNo - 1));\r\n\r\n                            // Show Date\r\n                            error = true;\r\n                            String date = null;\r\n                            DateTime addDate = null;\r\n                            boolean validDate = false;\r\n                            do {\r\n                                System.out.print(\"\\nEnter movie show date (YYYY-MM-DD): \");\r\n                                date = sc.nextLine();\r\n\r\n                                if (date.trim().isEmpty()) {\r\n                                    System.out.println(\"Please enter the show date.\");\r\n                                } else {\r\n                                    try {\r\n                                        String[] parts = date.split(\"-\");\r\n                                        int year = Integer.parseInt(parts[0]);  // Java's built-in method for converting strings to integers (int type)\r\n                                        int month = Integer.parseInt(parts[1]);\r\n                                        int day = Integer.parseInt(parts[2]);\r\n\r\n                                        // 验证日期是否 valid\r\n                                        addDate = new DateTime(year, month, day);\r\n                                        validDate = addDate.isValidDate();\r\n\r\n                                        if (validDate == true) {\r\n                                            String errorMessage = addDate.checkLocalDate();\r\n\r\n                                            if (errorMessage == null) {\r\n                                                newSchedule.setShowDate(addDate);\r\n\r\n                                                if (movieID == 1) {  // 1 mean add the schedule for the future movie, thus need to check whether the show date later than the movie release date\r\n                                                    errorMessage = newSchedule.checkShowDate();\r\n                                                    if (errorMessage == null) {\r\n                                                        error = false;\r\n                                                    } else {\r\n                                                        System.out.println(errorMessage);\r\n                                                    }\r\n                                                }\r\n                                            } else {\r\n                                                System.out.println(errorMessage);\r\n                                            }\r\n                                        } else {\r\n                                            System.out.println(\"Please enter a valid date!\");\r\n                                            error = true;\r\n                                        }\r\n                                    } catch (Exception e) {\r\n                                        System.out.println(\"The date format entered in wrong!\");\r\n                                    }\r\n                                }\r\n                            } while (error);\r\n\r\n                            LocalTime[] selectedTimeSlots = newSchedule.availableTimeSlots(sc);\r\n                            newSchedule.setStartTime(selectedTimeSlots[0]);\r\n                            newSchedule.setEndTime(selectedTimeSlots[1]);\r\n\r\n                            // Add schedule\r\n                            String confirmation;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want add the new schedule for this movie? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                confirmation = SystemClass.askForContinue(answer);\r\n                            } while (confirmation.equals(\"Invalid\"));\r\n\r\n                            // Confirm that the schedule is successfully added\r\n                            boolean success;\r\n                            do {\r\n                                if (confirmation.equals(\"Y\")) {\r\n                                    success = newSchedule.add();\r\n                                } else {\r\n                                    success = true;\r\n                                    System.out.println(\"This schedule will not be added for the movie.\");\r\n                                }\r\n\r\n                                if (success == false) {\r\n                                    do {\r\n                                        System.out.println(\"\\nDo you want to retry to add the new schedule for this movie? (Y / N)\");\r\n                                        System.out.print(\"Answer: \");\r\n                                        String answer = sc.next();\r\n                                        sc.nextLine();\r\n\r\n                                        confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                        if (confirmation.equals(\"Y\")) {\r\n                                            continues = true;\r\n                                        } else {\r\n                                            continues = false;\r\n                                        }\r\n                                    } while (confirmation.equals(\"Invalid\"));\r\n                                }\r\n                                else {\r\n                                    continues = false;\r\n                                }\r\n                            } while (continues);\r\n\r\n                            String continueAddSchedule;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want add another new schedule for this movie? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                continueAddSchedule = SystemClass.askForContinue(answer);\r\n                            } while (continueAddSchedule.equals(\"Invalid\"));\r\n\r\n                            if (continueAddSchedule.equals(\"Y\")) {\r\n                                newSchedule = new TimeTable();\r\n                                continues = true;\r\n                            } else {\r\n                                continues = false;\r\n                                back = false;\r\n                            }\r\n                        } while (continues);\r\n                    }\r\n                    break;\r\n                case 3:\r\n                    // Modify Schedule\r\n                    error = true;\r\n                    int scheduleNo = 0;\r\n\r\n                    // Cinema\r\n                    int cinemaNo = 0;\r\n                    error = true;\r\n                    ArrayList<Cinema> cinemas = new ArrayList<>();\r\n\r\n                    do {\r\n                        try {\r\n                            System.out.print(\"\\nSelect the cinema you want to view the schedule: \");\r\n                            cinemas = Cinema.viewCinemaList(1);\r\n                            System.out.print(\"\\nEnter the cinema no (0 - Back): \");\r\n                            cinemaNo = sc.nextInt();\r\n                            sc.nextLine();\r\n\r\n                            if (cinemaNo >= 0 && cinemaNo <= cinemas.size()) {\r\n                                error = false;\r\n                            } else {\r\n                                System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                            }\r\n                        } catch (InputMismatchException e) {\r\n                            System.out.println(\"Please enter a valid cinema no!\");\r\n                            sc.nextLine();\r\n                        }\r\n                    } while (error);\r\n\r\n                    error = true;\r\n                    if (cinemaNo != 0) {\r\n                        TimeTable timeTable = TimeTable.acceptViewScheduleListInput(sc, cinemas.get(cinemaNo - 1));\r\n\r\n                        ArrayList<TimeTable> schedules = timeTable.viewSchedule();\r\n\r\n                        TimeTable.printing(schedules);\r\n\r\n                        if (!schedules.isEmpty()) {\r\n                            do {\r\n                                try {\r\n                                    System.out.print(\"\\nEnter the schedule no. you want to modify: \");\r\n                                    scheduleNo = sc.nextInt();\r\n                                    sc.nextLine();\r\n\r\n                                    if (scheduleNo > 0 && scheduleNo <= schedules.size()) {\r\n                                        error = false;\r\n                                    } else {\r\n                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                    }\r\n                                } catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid schedule no.\");\r\n                                    sc.nextLine();\r\n                                }\r\n                            } while (error);\r\n\r\n                            TimeTable modifySchedule = new TimeTable(schedules.get(scheduleNo - 1).getTimetableID(), schedules.get(scheduleNo - 1).getMovie(), schedules.get(scheduleNo - 1).getHall(), schedules.get(scheduleNo - 1).getShowDate(), schedules.get(scheduleNo - 1).getStartTime());\r\n\r\n                            error = true;\r\n                            int choice2 = 0;\r\n                            do {\r\n                                try {\r\n                                    System.out.println(\"\\nSelect the operation:\");\r\n                                    System.out.println(\"1. Modify the movie show time\");\r\n                                    System.out.println(\"2. Modify the movie show date\");\r\n                                    System.out.println(\"3. Modify the movie to be played\");\r\n                                    System.out.println(\"4. Modify the location of the movie to be played\");\r\n                                    System.out.print(\"\\nEnter your selection: \");\r\n                                    choice2 = sc.nextInt();\r\n                                    sc.nextLine();\r\n\r\n                                    if (choice2 <= 0 || choice2 > 4) {\r\n                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                    } else {\r\n                                        error = false;\r\n                                    }\r\n                                } catch (InputMismatchException e) {\r\n                                    System.out.println(\"Please enter a valid operation no.\");\r\n                                    sc.nextLine();\r\n                                }\r\n                            } while (error);\r\n\r\n                            switch (choice2) {\r\n                                case 1:\r\n                                    // 时间调整\r\n                                    LocalTime[] selectedTimeSlots = modifySchedule.availableTimeSlots(sc);\r\n                                    modifySchedule.setStartTime(selectedTimeSlots[0]);\r\n                                    modifySchedule.setEndTime(selectedTimeSlots[1]);\r\n\r\n                                    break;\r\n                                case 2:\r\n                                    // 日期调整\r\n                                    error = true;\r\n                                    String date;\r\n                                    DateTime modifyDate = null;  // Store the old show date\r\n                                    boolean validDate;\r\n\r\n                                    do {\r\n                                        System.out.print(\"\\nEnter the new movie show date (YYYY-MM-DD): \");\r\n                                        date = sc.nextLine();\r\n\r\n                                        if (date.trim().isEmpty()) {\r\n                                            System.out.println(\"Please enter the show date.\");\r\n                                        } else {\r\n                                            try {\r\n                                                String[] parts = date.split(\"-\");\r\n                                                int year = Integer.parseInt(parts[0]);  // Java's built-in method for converting strings to integers (int type)\r\n                                                int month = Integer.parseInt(parts[1]);\r\n                                                int day = Integer.parseInt(parts[2]);\r\n\r\n                                                // 验证日期是否 valid\r\n                                                modifyDate = new DateTime(year, month, day);\r\n                                                validDate = modifyDate.isValidDate();\r\n\r\n                                                if (validDate == true) {\r\n                                                    String errorMessage = modifyDate.checkLocalDate();\r\n\r\n                                                    if (errorMessage == null) {\r\n                                                        modifySchedule.setShowDate(modifyDate);\r\n\r\n                                                        errorMessage = modifySchedule.checkShowDate();\r\n                                                        if (errorMessage == null) {\r\n                                                            error = false;\r\n                                                        } else {\r\n                                                            System.out.println(errorMessage);\r\n                                                        }\r\n                                                    } else {\r\n                                                        System.out.println(errorMessage);\r\n                                                        error = true;\r\n                                                    }\r\n                                                } else {\r\n                                                    System.out.println(\"Please enter a valid date!\");\r\n                                                    error = true;\r\n                                                }\r\n                                            } catch (Exception e) {\r\n                                                System.out.println(\"The date format entered in wrong!\");\r\n                                            }\r\n                                        }\r\n                                    } while (error);\r\n\r\n                                    // 时间调整\r\n                                    selectedTimeSlots = modifySchedule.availableTimeSlots(sc);\r\n                                    modifySchedule.setStartTime(selectedTimeSlots[0]);\r\n                                    modifySchedule.setEndTime(selectedTimeSlots[1]);\r\n\r\n                                    break;\r\n                                case 3:\r\n                                    // Modify the movie to be played\r\n                                    movieID = 1;\r\n\r\n                                    do {\r\n                                        moviesAfterFiltered = MovieUtils.viewMovieListByFilter(sc);\r\n\r\n                                        if (moviesAfterFiltered != null) {\r\n                                            do {\r\n                                                try {\r\n                                                    System.out.print(\"\\nEnter the movie id: \");\r\n                                                    movieID = sc.nextInt();\r\n                                                    sc.nextLine();\r\n\r\n                                                    if (movieID > 0 && movieID <= moviesAfterFiltered.size()) {\r\n                                                        error = false;\r\n                                                    } else {\r\n                                                        System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                                        error = true;\r\n                                                    }\r\n                                                } catch (InputMismatchException e) {\r\n                                                    System.out.println(\"Please enter a valid movie id!\");\r\n                                                    sc.nextLine();\r\n                                                    error = true;\r\n                                                }\r\n                                            } while (error);\r\n                                        }\r\n                                    } while (movieID == 0 && moviesAfterFiltered != null);\r\n\r\n                                    if (moviesAfterFiltered != null) {\r\n                                        modifySchedule.setMovie(moviesAfterFiltered.get(movieID - 1));\r\n\r\n                                        // 日期调整\r\n                                        error = true;\r\n                                        modifyDate = null;  // Store the old show date\r\n\r\n                                        do {\r\n                                            System.out.print(\"\\nEnter the new movie show date (YYYY-MM-DD): \");\r\n                                            date = sc.nextLine();\r\n\r\n                                            if (date.trim().isEmpty()) {\r\n                                                System.out.println(\"Please enter the show date.\");\r\n                                            } else {\r\n                                                try {\r\n                                                    String[] parts = date.split(\"-\");\r\n                                                    int year = Integer.parseInt(parts[0]);  // Java's built-in method for converting strings to integers (int type)\r\n                                                    int month = Integer.parseInt(parts[1]);\r\n                                                    int day = Integer.parseInt(parts[2]);\r\n\r\n                                                    // 验证日期是否 valid\r\n                                                    modifyDate = new DateTime(year, month, day);\r\n                                                    validDate = modifyDate.isValidDate();\r\n\r\n                                                    if (validDate == true) {\r\n                                                        String errorMessage = modifyDate.checkLocalDate();\r\n\r\n                                                        if (errorMessage == null) {\r\n                                                            modifySchedule.setShowDate(modifyDate);\r\n\r\n                                                            errorMessage = modifySchedule.checkShowDate();\r\n                                                            if (errorMessage == null) {\r\n                                                                error = false;\r\n                                                            } else {\r\n                                                                System.out.println(errorMessage);\r\n                                                            }\r\n                                                            error = false;\r\n                                                        } else {\r\n                                                            System.out.println(errorMessage);\r\n                                                            error = true;\r\n                                                        }\r\n                                                    } else {\r\n                                                        System.out.println(\"Please enter a valid date!\");\r\n                                                        error = true;\r\n                                                    }\r\n                                                } catch (Exception e) {\r\n                                                    System.out.println(\"The date format entered in wrong!\");\r\n                                                }\r\n                                            }\r\n                                        } while (error);\r\n\r\n                                        // 时间调整\r\n                                        selectedTimeSlots = modifySchedule.availableTimeSlots(sc);\r\n                                        modifySchedule.setStartTime(selectedTimeSlots[0]);\r\n                                        modifySchedule.setEndTime(selectedTimeSlots[1]);\r\n                                    }\r\n                                    break;\r\n                                case 4:\r\n                                    // Cinema\r\n                                    cinemaNo = 0;\r\n                                    error = true;\r\n                                    cinemas = new ArrayList<>();\r\n\r\n                                    do {\r\n                                        try {\r\n                                            System.out.print(\"\\nSelect the cinema you want to add the schedule: \");\r\n                                            cinemas = Cinema.viewCinemaList(1);\r\n                                            System.out.print(\"\\nEnter the cinema no: \");\r\n                                            cinemaNo = sc.nextInt();\r\n                                            sc.nextLine();\r\n\r\n                                            if (cinemaNo > 0 && cinemaNo <= cinemas.size()) {\r\n                                                error = false;\r\n                                            } else {\r\n                                                System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                            }\r\n                                        } catch (InputMismatchException e) {\r\n                                            System.out.println(\"Please enter a valid cinema no!\");\r\n                                            sc.nextLine();\r\n                                        }\r\n                                    } while (error);\r\n\r\n                                    // Receive the input of hall and show date\r\n                                    timeTable = TimeTable.acceptViewScheduleListInput(sc, cinemas.get(cinemaNo - 1));\r\n\r\n                                    modifySchedule.setHall(timeTable.getHall());\r\n                                    modifySchedule.setShowDate(timeTable.getShowDate());\r\n\r\n                                    selectedTimeSlots = modifySchedule.availableTimeSlots(sc);\r\n                                    modifySchedule.setStartTime(selectedTimeSlots[0]);\r\n                                    modifySchedule.setEndTime(selectedTimeSlots[1]);\r\n\r\n                                    break;\r\n                            }\r\n\r\n                            // Modify schedule\r\n                            String confirmation;\r\n                            do {\r\n                                System.out.println(\"\\nDo you want to modify this schedule? (Y / N)\");\r\n                                System.out.print(\"Answer: \");\r\n                                String answer = sc.next();\r\n                                sc.nextLine();\r\n\r\n                                confirmation = SystemClass.askForContinue(answer);\r\n                            } while (confirmation.equals(\"Invalid\"));\r\n\r\n                            // Confirm that the schedule is successfully modified\r\n                            boolean success = false;\r\n                            do {\r\n                                if (confirmation.equals(\"Y\")) {\r\n                                    success = modifySchedule.modify();\r\n                                } else {\r\n                                    success = true;\r\n                                    System.out.println(\"This schedule will not be modified.\");\r\n                                }\r\n\r\n                                if (success == false) {\r\n                                    do {\r\n                                        System.out.println(\"\\nDo you want to retry to modify the hall? (Y / N)\");\r\n                                        System.out.print(\"Answer: \");\r\n                                        String answer = sc.next();\r\n                                        sc.nextLine();\r\n\r\n                                        confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                        if (confirmation.equals(\"Y\")) {\r\n                                            continues = true;\r\n                                        } else {\r\n                                            continues = false;\r\n                                        }\r\n                                    } while (confirmation.equals(\"Invalid\"));\r\n                                }\r\n                                else {\r\n                                    continues = false;\r\n                                }\r\n                            } while (continues);\r\n                        }\r\n                    }\r\n                    back = false;\r\n                    break;\r\n                case 4:\r\n                    // Cinema\r\n                    cinemaNo = 0;\r\n                    error = true;\r\n                    cinemas = new ArrayList<>();\r\n\r\n                    do {\r\n                        try {\r\n                            System.out.print(\"\\nSelect the cinema you want to view the schedule: \");\r\n                            cinemas = Cinema.viewCinemaList(1);\r\n                            System.out.print(\"\\nEnter the cinema no (0 - Back): \");\r\n                            cinemaNo = sc.nextInt();\r\n                            sc.nextLine();\r\n\r\n                            if (cinemaNo >= 0 && cinemaNo <= cinemas.size()) {\r\n                                error = false;\r\n                            } else {\r\n                                System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                            }\r\n                        } catch (InputMismatchException e) {\r\n                            System.out.println(\"Please enter a valid cinema no!\");\r\n                            sc.nextLine();\r\n                        }\r\n                    } while (error);\r\n\r\n                    if (cinemaNo != 0) {\r\n                        TimeTable timeTable = TimeTable.acceptViewScheduleListInput(sc, cinemas.get(cinemaNo - 1));\r\n\r\n                        do {\r\n                            ArrayList<TimeTable> schedules = timeTable.viewSchedule();\r\n\r\n                            TimeTable.printing(schedules);\r\n\r\n                            if (!schedules.isEmpty()) {\r\n                                error = true;\r\n                                scheduleNo = 1;\r\n                                String confirmation;\r\n\r\n                                do {\r\n                                    try {\r\n                                        System.out.print(\"\\nEnter the schedule no. you want to delete: \");\r\n                                        scheduleNo = sc.nextInt();\r\n                                        sc.nextLine();\r\n\r\n                                        if (scheduleNo > 0 && scheduleNo <= schedules.size()) {\r\n                                            error = false;\r\n                                        } else {\r\n                                            System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                                        }\r\n                                    } catch (InputMismatchException e) {\r\n                                        System.out.println(\"Please enter a valid schedule no.\");\r\n                                        sc.nextLine();\r\n                                    }\r\n                                } while (error);\r\n\r\n                                TimeTable deleteSchedule = new TimeTable(schedules.get(scheduleNo - 1).getTimetableID(), schedules.get(scheduleNo - 1).getMovie(), schedules.get(scheduleNo - 1).getHall(), schedules.get(scheduleNo - 1).getShowDate(), schedules.get(scheduleNo - 1).getStartTime());\r\n\r\n                                do {\r\n                                    System.out.println(\"\\nDo you want to delete this schedule? (Y / N)\");\r\n                                    System.out.print(\"Answer: \");\r\n                                    String answer = sc.next();\r\n                                    sc.nextLine();\r\n\r\n                                    confirmation = SystemClass.askForContinue(answer);\r\n                                } while (confirmation.equals(\"Invalid\"));\r\n\r\n                                // Confirm that the schedule is successfully deleted\r\n                                boolean success;\r\n                                do {\r\n                                    if (confirmation.equals(\"Y\")) {\r\n                                        success = deleteSchedule.delete();\r\n                                    } else {\r\n                                        success = true;\r\n                                        System.out.println(\"\\nThe schedule is saved.\");\r\n                                    }\r\n\r\n                                    if (success == false) {\r\n                                        do {\r\n                                            System.out.println(\"\\nDo you want to retry to delete this schedule? (Y / N)\");\r\n                                            System.out.print(\"Answer: \");\r\n                                            String answer = sc.next();\r\n                                            sc.nextLine();\r\n\r\n                                            confirmation = SystemClass.askForContinue(answer);\r\n\r\n                                            if (confirmation.equals(\"Y\")) {\r\n                                                continues = true;\r\n                                            } else {\r\n                                                continues = false;\r\n                                            }\r\n                                        } while (confirmation.equals(\"Invalid\"));\r\n                                    }\r\n                                    else {\r\n                                        continues = false;\r\n                                    }\r\n                                } while (continues);\r\n\r\n                                String continueDeleteSchedule;\r\n                                do {\r\n                                    System.out.println(\"\\nDo you want delete another schedule? (Y / N)\");\r\n                                    System.out.print(\"Answer: \");\r\n                                    String answer = sc.next();\r\n                                    sc.nextLine();\r\n\r\n                                    continueDeleteSchedule = SystemClass.askForContinue(answer);\r\n                                } while (continueDeleteSchedule.equals(\"Invalid\"));\r\n\r\n                                if (continueDeleteSchedule.equals(\"Y\")) {\r\n                                    continues = true;\r\n                                } else {\r\n                                    continues = false;\r\n                                }\r\n                            } else {\r\n                                continues = false;\r\n                            }\r\n                        } while (continues);\r\n                    }\r\n                    back = false;\r\n                    break;\r\n            }\r\n        } while (back == false);\r\n    }\r\n\r\n    public void registration(Scanner sc) {\r\n\r\n    }\r\n\r\n    private static int displayMenu(String propertyName, Scanner sc){\r\n        boolean error = true;\r\n        int choice = 0;\r\n\r\n        do {\r\n            try {\r\n                System.out.println(\"\\nSelect the operation:\");\r\n                System.out.println(\"1. View \" + propertyName);\r\n                System.out.println(\"2. Add \" + propertyName);\r\n                System.out.println(\"3. Modify \" + propertyName);\r\n                System.out.println(\"4. Delete \" + propertyName);\r\n                System.out.print(\"\\nEnter your selection (0 - Back): \");\r\n                choice = sc.nextInt();\r\n                sc.nextLine();\r\n\r\n                if (choice >= 0 && choice <= 4) {\r\n                    error = false;\r\n                }\r\n                else {\r\n                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                }\r\n            }\r\n            catch (InputMismatchException e) {\r\n                System.out.println(\"Please enter a valid choice!\");\r\n                sc.nextLine();\r\n            }\r\n        } while (error);\r\n\r\n        return choice;\r\n    }\r\n\r\n    public static String askForContinue(String answer){\r\n        answer = answer.toUpperCase();\r\n\r\n        if (answer.equals(\"Y\") || answer.equals(\"YES\")) {\r\n            return \"Y\";\r\n        }\r\n        else if (answer.equals(\"N\") || answer.equals(\"NO\")) {\r\n            return \"N\";\r\n        }\r\n        else {\r\n            System.out.println(\"Please enter Y / N.\");\r\n            return \"Invalid\";\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Driver/SystemClass.java b/Driver/SystemClass.java
--- a/Driver/SystemClass.java	(revision fdc08511edf28627fe2a32c5ef49e4018f777694)
+++ b/Driver/SystemClass.java	(date 1694918032745)
@@ -1536,7 +1536,7 @@
                                         String strCon="Y";
                                         char chCon = strCon.charAt(0);
                                         while (chCon=='Y') {
-                                            hallsModified.get(hallModified-1).viewSeat_status();
+                                            hallsModified.get(hallModified-1).viewSeatStatus();
                                             while (!validInput) {
                                                 try {
                                                     System.out.print("\nSelect Row    : ");
@@ -1917,7 +1917,7 @@
                         String[] languages = {"English", "Chinese", "Japanese", "Korean", "German", "Italian", "Spanish", "Cantonese", "French", "Russian", "Arabic", "Hindi", "Tamil"};
 
                         String mvLanguage = MovieUtils.getMultipleChosens(sc, languages, "languages");
-                        newMovie.setLang(mvLanguage);
+                        newMovie.setLanguage(mvLanguage);
 
                         // Movie Director
                         String mvDirector = MovieUtils.getMultipleValues(sc, "director", "directors");
@@ -2050,7 +2050,7 @@
 
                         if (movieID != 0) {
                             Movie orgMovie = moviesAfterFiltered.get(movieID - 1);
-                            Movie movie = new Movie(orgMovie.getMovieID(), orgMovie.getGenre(), orgMovie.getMvName(), orgMovie.getReleaseDate(), orgMovie.getDuration(), orgMovie.getLang(), orgMovie.getDirector(), orgMovie.getWritter(), orgMovie.getStarring(), orgMovie.getMusicProvider(), orgMovie.getCountry(), orgMovie.getMetaDescription(), orgMovie.getBasicTicketPrice());
+                            Movie movie = new Movie(orgMovie.getMovieID(), orgMovie.getGenre(), orgMovie.getMvName(), orgMovie.getReleaseDate(), orgMovie.getDuration(), orgMovie.getLanguage(), orgMovie.getDirector(), orgMovie.getWritter(), orgMovie.getStarring(), orgMovie.getMusicProvider(), orgMovie.getCountry(), orgMovie.getMetaDescription(), orgMovie.getBasicTicketPrice());
                             boolean stop = true;
 
                             do {
@@ -2259,7 +2259,7 @@
                                         String[] languages = {"English", "Chinese", "Japanese", "Korean", "German", "Italian", "Spanish", "Cantonese", "French", "Russian", "Arabic", "Hindi", "Tamil"};
 
                                         String editMvLanguage = MovieUtils.getMultipleChosens(sc, languages, "languages");
-                                        movie.setLang(editMvLanguage);
+                                        movie.setLanguage(editMvLanguage);
                                         break;
                                     case 6:
                                         // Movie Director
Index: Booking_Management/Booking.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Booking_Management;\r\n\r\nimport Database.DatabaseUtils;\r\nimport Driver.DateTime;\r\nimport Hall_Management.Hall;\r\nimport Seat_Management.Seat;\r\n\r\nimport Ticket_Managemnet.Ticket;\r\nimport Schedule_Management.TimeTable;\r\n\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.sql.Time;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalTime;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Scanner;\r\n\r\n\r\npublic class Booking {\r\n    /////////////////////////////////////////////////////////\r\n    private int customerId;  //暂时用，暂时代替Customer class///\r\n    /////////////////////////////////////////////////////////\r\n    private int booking_id;\r\n    private int adultTicket_qty;\r\n    private int childTicket_qty;\r\n    private double totalPrice;\r\n    private DateTime bookingDateTime;\r\n    private LocalTime bookingTime;\r\n    private int booking_status;\r\n    private ArrayList<Ticket> ticketList;\r\n    public Booking() {\r\n        this.childTicket_qty=0;\r\n        this.adultTicket_qty=0;\r\n        this.totalPrice=0;\r\n    }\r\n\r\n    public Booking(int booking_id, int adultTicket_qty, int childTicket_qty, double totalPrice, int booking_status) {\r\n        this.booking_id = booking_id;\r\n        this.adultTicket_qty = adultTicket_qty;\r\n        this.childTicket_qty = childTicket_qty;\r\n        this.totalPrice = totalPrice;\r\n        this.booking_status = booking_status;\r\n    }\r\n\r\n    //Getter\r\n    public int getBooking_id() {\r\n        return booking_id;\r\n    }\r\n    public void countBooking_id() {\r\n        this.booking_id=1;\r\n        //this.ticket_id = ticket_id;\r\n        ArrayList<Booking> bookings=Booking.getBookingList();\r\n        for(Booking b:bookings){\r\n            this.booking_id++;\r\n        }\r\n//        this.ticket_id+=count;\r\n        //return this.booking_id;\r\n    }\r\n    public int getAdultTicket_qty() {\r\n        return adultTicket_qty;\r\n    }\r\n    public int getChildTicket_qty() {\r\n        return childTicket_qty;\r\n    }\r\n    public double getTotalPrice() {\r\n        return totalPrice;\r\n    }\r\n\r\n    public LocalTime getBookingTime() {\r\n        return bookingTime;\r\n    }\r\n\r\n    public DateTime getBookingDateTime() {\r\n        return bookingDateTime;\r\n    }\r\n\r\n    public ArrayList<Ticket> getTicketList() {\r\n        return ticketList;\r\n    }\r\n\r\n    public int getBooking_status() {\r\n        return booking_status;\r\n    }\r\n\r\n    //Setter\r\n    public void setBooking_id(int booking_id) {\r\n        this.booking_id = booking_id;\r\n    }\r\n    public void setAdultTicket_qty(int adultTicket_qty) {\r\n        this.adultTicket_qty = adultTicket_qty;\r\n    }\r\n    public void setChildTicket_qty(int childTicket_qty) {\r\n        this.childTicket_qty = childTicket_qty;\r\n    }\r\n    public void setTotalPrice(double totalPrice) {\r\n        this.totalPrice = totalPrice;\r\n    }\r\n\r\n    public void setBookingTime(LocalTime bookingTime) {\r\n        this.bookingTime = bookingTime;\r\n    }\r\n\r\n    public void setBookingDateTime(DateTime bookingDateTime) {\r\n        this.bookingDateTime = bookingDateTime;\r\n    }\r\n\r\n    public void setBooking_status(int booking_status) {\r\n        this.booking_status = booking_status;\r\n    }\r\n\r\n    public void setTicketList(ArrayList<Ticket> ticketList) {\r\n        this.ticketList = ticketList;\r\n    }\r\n\r\n    //----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\r\n    public static void insertBooking(Booking b) throws Exception {\r\n        int rowAffected = 0;\r\n\r\n        try {\r\n            String insertSql = \"INSERT INTO `booking` (`booking_id`,`adultTicket_qty`,`childTicket_qty`,`total_price`,`booking_date`,`booking_time`,`booking_status`) value(?,?,?,?,?,?,?);\";\r\n            Object[] params = {b.getBooking_id(),b.getAdultTicket_qty(),b.getChildTicket_qty(),b.getTotalPrice(),b.getBookingDateTime().getDate(),b.getBookingTime(),b.getBooking_status()};\r\n            rowAffected = DatabaseUtils.insertQuery(insertSql, params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (rowAffected > 0) {\r\n            System.out.println(\"\\nBooking successfully added...\");\r\n        }\r\n        else {\r\n            System.out.println(\"\\nSomething went wrong!\");\r\n        }\r\n    }\r\n\r\n    public static int viewSeat_status(TimeTable schedule) {\r\n        boolean error = false;\r\n        ArrayList<Seat> seats = new ArrayList<>();\r\n        int largestRow=0;\r\n        int largestCol=0;\r\n        try {\r\n            Object[] params = {schedule.getHall().getHallID()};\r\n            ResultSet result = DatabaseUtils.selectQueryById(\"*\", \"seat\", \"hall_id = ?\", params);\r\n            //find hall\r\n\r\n            while (result.next()) {\r\n\r\n                Seat seat = new Seat();\r\n                //Hall hl=new Hall();\r\n                //seat.setHall(hl);\r\n                seat.setSeat_id(result.getString(\"seat_id\"));\r\n                //seat.getHall().setHallID(hallId);\r\n                Hall hall =new Hall();\r\n                hall.setHallID(result.getInt(\"hall_id\"));\r\n                //seat.setHall(hall);\r\n                seat.setSeatRow(result.getInt(\"seatrow\"));\r\n                seat.setSeatCol(result.getInt(\"seatcol\"));\r\n                seat.setSeat_status(result.getInt(\"seat_status\"));\r\n                //System.out.printf(\"%d\",seat.hall.getHallID());\r\n                largestRow=result.getInt(\"seatrow\");\r\n                largestCol=result.getInt(\"seatcol\");\r\n                seats.add(seat);\r\n            }\r\n\r\n            result.close();\r\n            //resultHall.close();\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        ArrayList<Ticket> tickets=Ticket.getBookedTicketList(schedule.getTimetableID());\r\n        System.out.printf(\"Movie : %s   Hall : %d   Date : %s   Start Time : %s:%s\\n\",schedule.getMovie().getMvName().getName(),schedule.getHall().getHallID(),schedule.getShowDate().getDate(),schedule.getStartTime().getHour(),schedule.getStartTime().getMinute());\r\n        System.out.println(\"\\t             [Screen]\");\r\n        //System.out.println(\"   1   2   3   4   5   6   7   8\");\r\n        int j=0;\r\n        for(int i=1;i<=largestRow;i++) {\r\n            char letter = (char) ('A' + i - 1);\r\n            System.out.print(\"\\t\"+letter+\" \");\r\n            do {\r\n                char st;\r\n                if(seats.get(j).getSeat_status()==1) {\r\n                    st='O';\r\n                }else{\r\n                    st='X';\r\n                }\r\n                for (Ticket t:tickets) {\r\n                    if(t.getSeat().getSeat_id().equals(seats.get(j).getSeat_id())){\r\n                        st='1';\r\n                    }\r\n                }\r\n                System.out.printf(\"[%c] \",st);\r\n                j++;\r\n            } while (seats.get(j).getSeatCol() +1 <= largestCol);\r\n            char st;\r\n            if(seats.get(j).getSeat_status()==1) {\r\n                st='O';\r\n            }else{\r\n                st='X';\r\n            }\r\n            for (Ticket t:tickets) {\r\n                if(t.getSeat().getSeat_id().equals(seats.get(j).getSeat_id())){\r\n                    st='1';\r\n                }\r\n            }\r\n            System.out.printf(\"[%c] \",st);\r\n            System.out.printf(\"\\n\");\r\n            j += 1;\r\n        }\r\n        System.out.println(\"\\t   1   2   3   4   5   6   7   8\");\r\n        System.out.printf(\"\\nO = Available    1 = Booked    X = Unavailable/Broken\\n\");\r\n        System.out.printf(\"Movie Basic Price : RM%.2f\\n\",schedule.getMovie().getBasicTicketPrice());\r\n        return 0;\r\n    }\r\n\r\n    public void executeBooking(TimeTable schedule) throws Exception {\r\n\r\n\r\n        this.countBooking_id();\r\n        Scanner scanner = new Scanner(System.in);\r\n        String confirmStr=\"R\";\r\n        char confirmChar=confirmStr.charAt(0);\r\n        while (confirmChar!='Y'&& confirmChar!='N') {\r\n            this.childTicket_qty=0;\r\n            this.adultTicket_qty=0;\r\n            this.totalPrice=0;\r\n            System.out.println(\"Time table id : \"+schedule.getTimetableID());\r\n            Booking.viewSeat_status(schedule);\r\n            ArrayList<Ticket> tickets = Ticket.getBookedTicketList(schedule.getTimetableID());\r\n            ArrayList<Ticket> cartTicket = new ArrayList<>();\r\n            System.out.println(\"Booking ID : \" + this.booking_id);\r\n            int row = 0, col = 0;\r\n\r\n            String str = \" \";\r\n            char ch = str.charAt(0);\r\n\r\n            int inputType = 0;\r\n            String ticketType = \"\";\r\n            double priceRate = 0.0;\r\n            int count = 1;\r\n\r\n            while (ch != 'N') {\r\n                boolean validInput = false;\r\n                while (!validInput) {\r\n                    try {\r\n                        System.out.print(\"\\nSelect Row    : \");\r\n                        row = scanner.nextInt();\r\n                        //System.out.println(row);/////////////////////\r\n                        System.out.print(\"Select Column : \");\r\n                        col = scanner.nextInt();\r\n                        //System.out.println(col);///////////////////////\r\n                        if (!Seat.checkSeatValidation(row, col)) {\r\n                            System.out.println(\"Invalid Input\");\r\n                            continue;\r\n                        } else {\r\n                            validInput = true;\r\n                        }\r\n                    } catch (Exception e) {\r\n                        System.out.println(\"Something wrong...\");\r\n                        scanner.nextLine();\r\n                    }\r\n                }\r\n\r\n                do {\r\n                    try {\r\n                        System.out.print(\"Select type(1.Adult 2.Child ) :\");\r\n                        inputType = scanner.nextInt();\r\n                        if (inputType == 1) {\r\n                            ticketType = \"Adult\";\r\n                            priceRate = 1.2;\r\n                            //this.adultTicket_qty++;\r\n\r\n                        } else if (inputType == 2) {\r\n                            ticketType = \"Child\";\r\n                            priceRate = 0.8;\r\n                            //this.childTicket_qty++;\r\n                        } else {\r\n                            System.out.println(\"Invalid Input...\\n\");\r\n                        }\r\n                    } catch (Exception e) {\r\n                        System.out.println(\"something wrong...\");\r\n                        scanner.nextLine();\r\n                    }\r\n                } while (inputType != 1 && inputType != 2);\r\n                String letter2 = Integer.toString(schedule.getHall().getHallID());\r\n                char letter = (char) ('A' + row - 1);\r\n                String combineSeatId = letter2 + letter + Integer.toString(col);\r\n\r\n                boolean exist = false;\r\n                for (Ticket t : tickets) {\r\n                    if (t.getSeat().getSeat_id().equals(combineSeatId)) {\r\n                        exist = true;\r\n                        System.out.println(\"This seat not available/already be booked...\");\r\n                    }\r\n                }\r\n                schedule.getHall().initSeatList();\r\n\r\n                for (Seat seats:schedule.getHall().getSeats()){\r\n                    if(seats.getSeat_id().equals(combineSeatId)){\r\n                        if (seats.getSeat_status()==0){\r\n                            exist=true;\r\n                            System.out.println(\"This Seat is unavailable...\");\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!exist) {\r\n                    //seat\r\n                    Seat seat = new Seat(combineSeatId, row, col, 1);\r\n                    Ticket ticket = new Ticket();\r\n                    ticket.setPrice_rate(priceRate);\r\n                    ticket.setTicketType(ticketType);\r\n                    ticket.setTicket_id(ticket.countTicket_id(count+1));\r\n                    ticket.setBooking(this);\r\n                    ticket.setSeat(seat);\r\n                    ticket.setTimeTable(schedule);\r\n                    cartTicket.add(ticket);\r\n                }\r\n\r\n                do {\r\n                    System.out.print(\"Continue ? (Y=Yes N=Next) : \");\r\n                    str = scanner.next().toUpperCase();\r\n                    ch = str.charAt(0);\r\n                }while(ch!='Y'&&ch!='N');\r\n                count++;\r\n            }\r\n\r\n\r\n            if (cartTicket.size() > 0) {\r\n                System.out.println(\"\\nCart : \");\r\n                for (Ticket t : cartTicket) {\r\n                    System.out.println(\"\\t\\t-------------------------\");\r\n                    System.out.printf(\"\\t\\t| Ticket id :| %6d   |\\n\", t.getTicket_id());\r\n                    System.out.printf(\"\\t\\t| Seat id   :| %6s   |\\n\", t.getSeat().getSeat_id());\r\n                    System.out.printf(\"\\t\\t| Price     :| RM%6.2f |\\n\", t.calculateTicketPrice());\r\n                    this.totalPrice += t.calculateTicketPrice();\r\n                    if(t.getTicketType().equals(\"Adult\")){\r\n                        this.adultTicket_qty++;\r\n                    }else if(t.getTicketType().equals(\"Child\")){\r\n                        this.childTicket_qty++;\r\n                    }\r\n                }\r\n\r\n                LocalDate date = LocalDate.now();\r\n                DateTime bookingDate=new DateTime(date);\r\n                setBookingDateTime(bookingDate);\r\n\r\n                LocalTime currentTime = LocalTime.now();\r\n                setBookingTime(currentTime);\r\n\r\n                System.out.println(\"\\t\\t-------------------------\\n\");\r\n                System.out.println(\"Booking Details : \");\r\n                System.out.println(\"\\t\\t-------------------------------------------\");\r\n                System.out.printf(\"\\t\\t Booking ID : %04d\\t\\tDate : %s\\n\", getBooking_id(), getBookingDateTime().getDate());\r\n                System.out.println(\"\\t\\t-------------------------------------------\");\r\n                System.out.printf(\"\\t\\t Adult Ticket(RM%6.2f) x %d\\n\", schedule.getMovie().getBasicTicketPrice() * 1.2, getAdultTicket_qty());\r\n                System.out.printf(\"\\t\\t Child Ticket(RM%6.2f) X %d\\n\", schedule.getMovie().getBasicTicketPrice() * 0.8, getChildTicket_qty());\r\n                System.out.printf(\"\\t\\t\\t\\tTotal : RM%.2f\\n\", totalPrice);\r\n                System.out.println(\"\\t\\t-------------------------------------------\");\r\n                do {\r\n                    try {\r\n                        System.out.println(\"Confirm This Booking ? (Y=Yes R=No, Select Again N=No Confirm, Exit) : \");\r\n                        str = scanner.next().toUpperCase();\r\n                        confirmChar = str.charAt(0);\r\n                        if (confirmChar == 'Y') {\r\n                            Booking.insertBooking(this);\r\n                            for (Ticket t : cartTicket) {\r\n                                Ticket.insertTicket(t);\r\n                            }\r\n\r\n                        }\r\n                    }catch (Exception e){\r\n                        System.out.println(\"Something wrong...\");\r\n                        scanner.nextLine();\r\n                    }\r\n\r\n                }while(confirmChar!='Y' && confirmChar!='N' && confirmChar!='R');\r\n            } else {\r\n                System.out.println(\"No Ticket be Selected.\\nExit Booking Page...\");\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n        //replace by getBookingList();\r\n//    public static ArrayList<Booking> getBookedBookingList(){\r\n//        boolean error = false;\r\n//        ArrayList<Booking> bookings = new ArrayList<>();\r\n//\r\n//        try {\r\n//            Object[] params = { };\r\n//            ResultSet result = DatabaseUtils.selectQueryById(\"*\", \"booking\",null,null);\r\n//\r\n//            while (result.next()) {\r\n//                Booking booking =new Booking();\r\n//                booking.setBooking_id(result.getInt(\"booking_id\"));\r\n//                booking.setAdultTicket_qty(result.getInt(\"adultTicket_qty\"));\r\n//                booking.setChildTicket_qty(result.getInt(\"childTicket_qty\"));\r\n//                booking.setBooking_status(result.getInt(\"booking_status\"));\r\n//\r\n//                bookings.add(booking);\r\n//\r\n//            }\r\n//\r\n//            result.close();\r\n//            //resultHall.close();\r\n//        }\r\n//        catch (SQLException e) {\r\n//            e.printStackTrace();\r\n//        }\r\n//\r\n//        return bookings;\r\n//    }\r\n\r\n    public static ArrayList<Booking> getBookingList(){\r\n        boolean error = false;\r\n        ArrayList<Booking> bookingList = new ArrayList<>();\r\n\r\n        try {\r\n            Object[] params = { };\r\n            ResultSet result = DatabaseUtils.selectQueryById(\"*\", \"booking\",null,null);\r\n\r\n            while (result.next()) {\r\n\r\n                Booking booking = new Booking();\r\n                booking.setBooking_id(result.getInt(\"booking_id\"));\r\n                booking.setAdultTicket_qty(result.getInt(\"adultTicket_qty\"));\r\n                booking.setBookingDateTime(new DateTime(result.getDate(\"booking_date\").toLocalDate()));\r\n                booking.setChildTicket_qty(result.getInt(\"childTicket_qty\"));\r\n                booking.setTotalPrice(result.getDouble(\"total_price\"));\r\n                booking.setBooking_status(result.getInt(\"booking_status\"));\r\n                Time time =result.getTime(\"booking_time\");\r\n                booking.setBookingTime(time.toLocalTime());\r\n\r\n                bookingList.add(booking);\r\n\r\n            }\r\n\r\n            result.close();\r\n\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return bookingList;\r\n    }\r\n\r\n    //For loading all exist booking's tickets\r\n    public void loadingTicketList() throws SQLException {\r\n        ArrayList<Ticket> tickets = new ArrayList<>();\r\n\r\n        try {\r\n            Object[] params = {booking_id};\r\n            ResultSet result = DatabaseUtils.selectQueryById(\"*\", \"ticket\",\"booking_id = ?\",params);\r\n\r\n            while (result.next()) {\r\n\r\n                Ticket ticket = new Ticket();\r\n\r\n                ticket.setTicketType(result.getString(\"ticket_type\"));\r\n                ticket.setTicket_id(result.getInt(\"ticket_id\"));\r\n                Seat seat = new Seat();\r\n                seat.setSeat_id(result.getString(\"seat_id\"));\r\n                ticket.setSeat(seat);\r\n\r\n                Booking booking =new Booking();\r\n                booking.setBooking_id(result.getInt(\"booking_id\"));\r\n                ticket.setBooking(booking);\r\n\r\n                TimeTable timetable=new TimeTable();\r\n                timetable.setTimetableID(result.getInt(\"schedule_id\"));\r\n                ticket.setBooking(booking);\r\n\r\n                ticket.setPrice_rate(result.getDouble(\"price_rate\"));\r\n                tickets.add(ticket);\r\n\r\n\r\n            }\r\n\r\n            result.close();\r\n\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        this.setTicketList(ticketList);\r\n\r\n    }\r\n\r\n    public boolean deleteBooking() throws SQLException {\r\n        int rowAffected = 0;\r\n\r\n        try {\r\n            Object[] params = {booking_id};\r\n            rowAffected = DatabaseUtils.deleteQueryById(\"booking\", \"booking_status\", \"booking_id\", params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (rowAffected > 0) {\r\n            System.out.println(\"\\nThe booking has been deleted.\");\r\n            return true;\r\n        } else {\r\n            System.out.println(\"\\nSomething went wrong...\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Booking_Management/Booking.java b/Booking_Management/Booking.java
--- a/Booking_Management/Booking.java	(revision fdc08511edf28627fe2a32c5ef49e4018f777694)
+++ b/Booking_Management/Booking.java	(date 1694877739182)
@@ -30,6 +30,7 @@
     private LocalTime bookingTime;
     private int booking_status;
     private ArrayList<Ticket> ticketList;
+
     public Booking() {
         this.childTicket_qty=0;
         this.adultTicket_qty=0;
@@ -48,6 +49,7 @@
     public int getBooking_id() {
         return booking_id;
     }
+
     public void countBooking_id() {
         this.booking_id=1;
         //this.ticket_id = ticket_id;
Index: Ticket_Managemnet/Ticket.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Ticket_Managemnet;\r\n\r\nimport Database.DatabaseUtils;\r\nimport Booking_Management.Booking;\r\nimport Seat_Management.Seat;\r\nimport Schedule_Management.TimeTable;\r\n\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\n\r\npublic class Ticket {\r\n    private int ticket_id;\r\n    private Seat seat;\r\n    private Booking booking;\r\n    private String ticketType;\r\n    private double price_rate;\r\n    private int ticketStatus;\r\n\r\n    public Ticket() {\r\n        this.ticketStatus=1;\r\n    }\r\n\r\n//    public Ticket(int ticket_id, Seat seat, Booking booking) {\r\n//        this.ticket_id = ticket_id;\r\n//        this.seat = seat;\r\n//        this.booking = booking;\r\n//    }\r\n    public Ticket(int ticket_id, Seat seat, Booking booking, TimeTable timeTable) {\r\n        this.ticket_id = ticket_id;\r\n        this.seat = seat;\r\n        this.booking = booking;\r\n        this.timeTable = timeTable;\r\n        this.ticketStatus=1;\r\n    }\r\n    public Ticket(int ticket_id, Seat seat, Booking booking, String ticketType, double price_rate, TimeTable timeTable) {\r\n        this.ticket_id = ticket_id;\r\n        this.seat = seat;\r\n        this.booking = booking;\r\n        this.ticketType = ticketType;\r\n        this.price_rate = price_rate;\r\n        this.timeTable = timeTable;\r\n    }\r\n\r\n    private TimeTable timeTable;\r\n    //Getter\r\n    public int getTicket_id() {\r\n        return ticket_id;\r\n    }\r\n    public Seat getSeat() {\r\n        return seat;\r\n    }\r\n    public TimeTable getTimeTable() {\r\n        return timeTable;\r\n    }\r\n    public Booking getBooking() {\r\n        return booking;\r\n    }\r\n    public String getTicketType() {\r\n        return ticketType;\r\n    }\r\n    public double getPrice_rate() {\r\n        return price_rate;\r\n    }\r\n    //Setter\r\n    public void setTicket_id(int ticket_id) {\r\n        this.ticket_id=ticket_id;\r\n    }\r\n    public int countTicket_id(int count) {\r\n        this.ticket_id=1;\r\n        //this.ticket_id = ticket_id;\r\n        ArrayList<Ticket> tickets=Ticket.getBookedTicketList();\r\n        for(Ticket t:tickets){\r\n            this.ticket_id++;\r\n        }\r\n        this.ticket_id+=count;\r\n        return this.ticket_id;\r\n    }\r\n\r\n    public void setTicketStatus(int ticketStatus) {\r\n        this.ticketStatus = ticketStatus;\r\n    }\r\n\r\n    public int getTicketStatus() {\r\n        return ticketStatus;\r\n    }\r\n\r\n    public void setSeat(Seat seat) {\r\n        this.seat = seat;\r\n    }\r\n    public void setTimeTable(TimeTable timeTable) {\r\n        this.timeTable = timeTable;\r\n    }\r\n    public void setBooking(Booking booking) {\r\n        this.booking = booking;\r\n    }\r\n    public void setTicketType(String ticketType) {\r\n        this.ticketType = ticketType;\r\n    }\r\n    public void setPrice_rate(double price_rate) {\r\n        this.price_rate = price_rate;\r\n    }\r\n//--------------------------------------------------------------------------------------------------------------------------------\r\n//    public void addTicket() throws Exception {\r\n//        int rowAffected = 0;\r\n//\r\n//        try {\r\n//            String insertSql = \"INSERT INTO `ticket` (`ticket_id`,`booking_id`,``,`seat_id`,`schedule_id`,`ticket_type`,`price_rate`) value(?,?,?,?,?,?);\";\r\n//            Object[] params = {getSeat_id(),this.hall.getHallID(),getSeatRow(),getSeatCol(),getSeat_status()};\r\n//            rowAffected = DatabaseUtils.insertQuery(insertSql, params);\r\n//        }\r\n//        catch (SQLException e) {\r\n//            e.printStackTrace();\r\n//        }\r\n//\r\n//        if (rowAffected > 0) {\r\n//            System.out.println(\"\\nSeat successfully added...\");\r\n//        }\r\n//        else {\r\n//            System.out.println(\"\\nSomething went wrong!\");\r\n//        }\r\n//    }\r\n    public static ArrayList<Ticket> getBookedTicketList(){\r\n        boolean error = false;\r\n        ArrayList<Ticket> tickets = new ArrayList<>();\r\n\r\n        try {\r\n            Object[] params = { };\r\n            ResultSet result = DatabaseUtils.selectQueryById(\"*\", \"ticket\",null,null);\r\n            //Ticket ticket = null;\r\n            while (result.next()) {\r\n//                String typeC=\"Child\";\r\n//                String typeA=\"Adult\";\r\n//                String type= result.getString(\"ticket_type\");\r\n                Ticket ticket = new Ticket();\r\n//                if(type.equals(typeC)){\r\n//                    ticket = new ChildTicket(\"Child\");\r\n//                }else{\r\n//                    ticket = new AdultTicket(\"Adult\");\r\n//                }\r\n                ticket.setTicketType(result.getString(\"ticket_type\"));\r\n                ticket.setTicket_id(result.getInt(\"ticket_id\"));\r\n                Seat seat = new Seat();\r\n                seat.setSeat_id(result.getString(\"seat_id\"));\r\n                ticket.setSeat(seat);\r\n\r\n                Booking booking =new Booking();\r\n                booking.setBooking_id(result.getInt(\"booking_id\"));\r\n                ticket.setBooking(booking);\r\n                //ticket.booking.setBooking_id(result.getInt(\"booking_id\"));\r\n                TimeTable timetable=new TimeTable();\r\n                timetable.setTimetableID(result.getInt(\"schedule_id\"));\r\n                ticket.setBooking(booking);\r\n                //ticket.timeTable.setTimetableID(result.getInt(\"schedule_id\"));\r\n                ticket.setPrice_rate(result.getDouble(\"price_rate\"));\r\n                tickets.add(ticket);\r\n\r\n                //seats.add(seat);\r\n            }\r\n\r\n            result.close();\r\n            //resultHall.close();\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return tickets;\r\n    }\r\n\r\n\r\n    public static ArrayList<Ticket> getBookedTicketList(int schedule_id){\r\n        boolean error = false;\r\n        ArrayList<Ticket> tickets = new ArrayList<>();\r\n\r\n        try {\r\n            Object[] params = {schedule_id};\r\n            ResultSet result = DatabaseUtils.selectQueryById(\"*\", \"ticket\",\"schedule_id = ?\",params);\r\n            //Ticket ticket = null;\r\n            while (result.next()) {\r\n//                String typeC=\"Child\";\r\n//                String typeA=\"Adult\";\r\n//                String type= result.getString(\"ticket_type\");\r\n                Ticket ticket = new Ticket();\r\n//                if(type.equals(typeC)){\r\n//                    ticket = new ChildTicket(\"Child\");\r\n//                }else{\r\n//                    ticket = new AdultTicket(\"Adult\");\r\n//                }\r\n                ticket.setTicketType(result.getString(\"ticket_type\"));\r\n                ticket.setTicket_id(result.getInt(\"ticket_id\"));\r\n                Seat seat = new Seat();\r\n                seat.setSeat_id(result.getString(\"seat_id\"));\r\n                ticket.setSeat(seat);\r\n                //ticket.seat.setSeat_id(result.getString(\"seat_id\"));\r\n                Booking booking =new Booking();\r\n                booking.setBooking_id(result.getInt(\"booking_id\"));\r\n                ticket.setBooking(booking);\r\n                //ticket.booking.setBooking_id(result.getInt(\"booking_id\"));\r\n                TimeTable timetable=new TimeTable();\r\n                timetable.setTimetableID(result.getInt(\"schedule_id\"));\r\n                ticket.setBooking(booking);\r\n                //ticket.timeTable.setTimetableID(result.getInt(\"schedule_id\"));\r\n                ticket.setPrice_rate(result.getDouble(\"price_rate\"));\r\n                tickets.add(ticket);\r\n\r\n                //seats.add(seat);\r\n            }\r\n\r\n            result.close();\r\n            //resultHall.close();\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return tickets;\r\n    }\r\n    public static void insertTicket(Ticket ticket) throws Exception {\r\n        int rowAffected = 0;\r\n\r\n        try {\r\n            String insertSql = \"INSERT INTO `ticket` (`ticket_id`,`booking_id`,`seat_id`,`schedule_id`,`ticket_type`,`price_rate`,`ticket_status`) value(?,?,?,?,?,?,?);\";\r\n            Object[] params = {ticket.getTicket_id(),ticket.getBooking().getBooking_id(),ticket.getSeat().getSeat_id(),ticket.timeTable.getTimetableID(),ticket.getTicketType(),ticket.getPrice_rate(),ticket.getTicketStatus()};\r\n            rowAffected = DatabaseUtils.insertQuery(insertSql, params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (rowAffected > 0) {\r\n            System.out.println(\"\\nTicket successfully added...\");\r\n        }\r\n        else {\r\n            System.out.println(\"\\nSomething went wrong!\");\r\n        }\r\n    }\r\n    public double calculateTicketPrice(){\r\n        return this.timeTable.getMovie().getBasicTicketPrice()*this.price_rate;\r\n        //return movie.getBasicTicketPrice()*this.price_rate;\r\n\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Ticket_Managemnet/Ticket.java b/Ticket_Managemnet/Ticket.java
--- a/Ticket_Managemnet/Ticket.java	(revision fdc08511edf28627fe2a32c5ef49e4018f777694)
+++ b/Ticket_Managemnet/Ticket.java	(date 1694875051441)
@@ -13,6 +13,7 @@
     private int ticket_id;
     private Seat seat;
     private Booking booking;
+    private TimeTable timeTable;
     private String ticketType;
     private double price_rate;
     private int ticketStatus;
@@ -33,6 +34,7 @@
         this.timeTable = timeTable;
         this.ticketStatus=1;
     }
+
     public Ticket(int ticket_id, Seat seat, Booking booking, String ticketType, double price_rate, TimeTable timeTable) {
         this.ticket_id = ticket_id;
         this.seat = seat;
@@ -42,7 +44,6 @@
         this.timeTable = timeTable;
     }
 
-    private TimeTable timeTable;
     //Getter
     public int getTicket_id() {
         return ticket_id;
@@ -62,6 +63,7 @@
     public double getPrice_rate() {
         return price_rate;
     }
+
     //Setter
     public void setTicket_id(int ticket_id) {
         this.ticket_id=ticket_id;
Index: Hall_Management/Hall.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Hall_Management;\r\n\r\nimport Database.DatabaseUtils;\r\nimport Driver.Name;\r\nimport Seat_Management.Seat;\r\n\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\nimport java.util.InputMismatchException;\r\nimport java.util.Scanner;\r\n\r\npublic class Hall {\r\n    private int hallID;\r\n    private Name hallName;\r\n    private String hallType;\r\n    private int hallCapacity;\r\n    private int status;\r\n    private ArrayList<Seat> seats;\r\n\r\n    // Constructor\r\n    public Hall(){\r\n    }\r\n\r\n    public Hall(Name hallName, String hallType){\r\n        this.hallName = hallName;\r\n        this.hallType = hallType;\r\n        calHallCapacity();\r\n    }\r\n\r\n    public Hall(int hallID, Name hallName, String hallType){\r\n        this.hallID = hallID;\r\n        this.hallName = hallName;\r\n        this.hallType = hallType;\r\n        calHallCapacity();\r\n    }\r\n\r\n    public void calHallCapacity() {\r\n        if (hallType.equals(\"STANDARD\")) {\r\n            hallCapacity = 64;\r\n        }\r\n        else if (hallType.equals(\"3D\")) {\r\n            hallCapacity = 32;\r\n        }\r\n    }\r\n\r\n    // Method\r\n    public void viewHallDetails(){\r\n        System.out.printf(\"\\nHall Detail:\\n\");\r\n        System.out.println(\"Hall Name: \" + getHallName().getName());\r\n        System.out.println(\"Hall Type: \" + getHallType() + \" HALL\");\r\n        System.out.println(\"Hall Capacity: \" + getHallCapacity());\r\n    }\r\n\r\n    public int modifyHallDetails(Scanner sc) {\r\n        boolean error = true;\r\n\r\n        do {\r\n            int count = 1;\r\n            try {\r\n                System.out.printf(\"\\nHall Detail:\\n\");\r\n                System.out.println(count + \". Hall Name: \" + getHallName().getName());\r\n                count++;\r\n                System.out.println(count + \". Hall Type: \" + getHallType() + \" HALL\");\r\n                count++;\r\n                System.out.println(count + \". Hall Capacity: \" + getHallCapacity() + \" (cannot be modified)\");\r\n                count++;\r\n                System.out.println(count + \". Manage Seats Status\");\r\n\r\n                System.out.print(\"\\nEnter the serial number of the hall information you want to change (0 - Stop): \");\r\n                int serialNum = sc.nextInt();\r\n                sc.nextLine();\r\n\r\n                if (serialNum < 0 || serialNum > count) {\r\n                    System.out.println(\"Your choice is not among the available options! PLease try again.\");\r\n                    error = true;\r\n                } else {\r\n                    return serialNum;\r\n                }\r\n            }\r\n            catch (InputMismatchException e) {\r\n                System.out.println(\"Please enter a valid choice!\");\r\n                sc.nextLine();\r\n                error = true;\r\n            }\r\n        } while (error);\r\n\r\n        return 0;\r\n    }\r\n\r\n    public boolean modifyHall() throws SQLException {\r\n        int rowAffected = 0;\r\n\r\n        try {\r\n            String updateSql = \"UPDATE `hall` SET `hall_name`= ?, `hall_type`= ?, `hall_capacity`= ? WHERE hall_id = ?\";\r\n            Object[] params = {getHallName().getName(), getHallType(), getHallCapacity(), getHallID()};\r\n            rowAffected = DatabaseUtils.updateQuery(updateSql, params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (rowAffected > 0) {\r\n            System.out.println(\"\\nThe changes have been saved.\");\r\n            return true;\r\n        } else {\r\n            System.out.println(\"\\nSomething went wrong...\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public boolean deleteHall() throws SQLException {\r\n        int rowAffected = 0;\r\n\r\n        try {\r\n            Object[] params = {getHallID()};\r\n            rowAffected = DatabaseUtils.deleteQueryById(\"hall\", \"hall_status\", \"hall_id\", params);\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (rowAffected > 0) {\r\n            System.out.println(\"\\nThe hall has been deleted.\");\r\n            return true;\r\n        } else {\r\n            System.out.println(\"\\nSomething went wrong...\");\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Setter\r\n    public void setHallID(int hallID) {\r\n        this.hallID = hallID;\r\n    }\r\n\r\n    public void setHallName(Name hallName) {\r\n        this.hallName = hallName;\r\n    }\r\n\r\n    public void setHallType(String hallType) {\r\n        this.hallType = hallType;\r\n        calHallCapacity();\r\n    }\r\n\r\n    public void setStatus(int status) {\r\n        this.status = status;\r\n    }\r\n\r\n    public void setSeats(ArrayList<Seat> seats) {\r\n        this.seats = seats;\r\n    }\r\n\r\n    // Getter\r\n    public int getHallID(){\r\n        return hallID;\r\n    }\r\n\r\n    public Name getHallName() {\r\n        return hallName;\r\n    }\r\n\r\n    public String getHallType() {\r\n        return hallType;\r\n    }\r\n\r\n    public int getHallCapacity() {\r\n        return hallCapacity;\r\n    }\r\n\r\n    public int getStatus() {\r\n        return status;\r\n    }\r\n\r\n    public ArrayList<Seat> getSeats() {\r\n        return seats;\r\n    }\r\n\r\n    //ChinYong Part\r\n    //init the hall's seat from database\r\n    public void initSeatList() throws SQLException {\r\n        ArrayList<Seat> seats = new ArrayList<>();\r\n\r\n        try {\r\n            Object[] params = {this.hallID};\r\n            ResultSet result = DatabaseUtils.selectQueryById(\"*\", \"seat\", \"hall_id = ?\", params);\r\n\r\n            while (result.next()) {\r\n                Seat seat = new Seat();\r\n\r\n                seat.setSeat_id(result.getString(\"seat_id\"));\r\n                //seat.hall.setHallID(hallId);\r\n                seat.setSeatRow(result.getInt(\"seatrow\"));\r\n                seat.setSeatCol(result.getInt(\"seatcol\"));\r\n                seat.setSeat_status(result.getInt(\"seat_status\"));\r\n\r\n                seats.add(seat);\r\n            }\r\n\r\n            result.close();\r\n        }\r\n        catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        this.setSeats(seats);\r\n    }\r\n\r\n    public void viewSeat_status() {\r\n        boolean error = false;\r\n\r\n        int largestRow=0;\r\n        int largestCol=0;\r\n\r\n        for(Seat seats:this.getSeats()){\r\n            largestRow=seats.getSeatRow();\r\n            largestCol=seats.getSeatCol();\r\n        }\r\n\r\n        System.out.println(\"\\t\\t\\t1\\t\\t2\\t\\t3\\t\\t4\\t\\t5\\t\\t6\\t\\t7\\t\\t8\");\r\n        int j=0;\r\n\r\n        for(int i = 1 ; i <= largestRow ; i++) {\r\n            System.out.printf(\"\\t\\t\");\r\n            char letter = (char) ('A' + i - 1);\r\n            System.out.print(letter+\" \");\r\n            do {\r\n                char st;\r\n                if(seats.get(j).getSeat_status()==1) {\r\n                    st='O';\r\n                }else{\r\n                    st='X';\r\n                }\r\n\r\n                System.out.printf(\"[%s]:%c \",seats.get(j).getSeat_id(),st);\r\n                j++;\r\n            } while (seats.get(j).getSeatCol()+1 <= largestCol);\r\n\r\n            char st;\r\n\r\n            if(seats.get(j).getSeat_status()==1) {\r\n                st='O';\r\n            }else{\r\n                st='X';\r\n            }\r\n\r\n            System.out.printf(\"[%s]:%c \",seats.get(j).getSeat_id(),st);\r\n            System.out.printf(\"\\n\");\r\n            j += 1;\r\n        }\r\n\r\n        System.out.printf(\"\\nO = Available/intact and undamaged\\tX = Unavailable/damaged\");\r\n        //return 0;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Hall_Management/Hall.java b/Hall_Management/Hall.java
--- a/Hall_Management/Hall.java	(revision fdc08511edf28627fe2a32c5ef49e4018f777694)
+++ b/Hall_Management/Hall.java	(date 1694916601178)
@@ -129,53 +129,6 @@
         }
     }
 
-    // Setter
-    public void setHallID(int hallID) {
-        this.hallID = hallID;
-    }
-
-    public void setHallName(Name hallName) {
-        this.hallName = hallName;
-    }
-
-    public void setHallType(String hallType) {
-        this.hallType = hallType;
-        calHallCapacity();
-    }
-
-    public void setStatus(int status) {
-        this.status = status;
-    }
-
-    public void setSeats(ArrayList<Seat> seats) {
-        this.seats = seats;
-    }
-
-    // Getter
-    public int getHallID(){
-        return hallID;
-    }
-
-    public Name getHallName() {
-        return hallName;
-    }
-
-    public String getHallType() {
-        return hallType;
-    }
-
-    public int getHallCapacity() {
-        return hallCapacity;
-    }
-
-    public int getStatus() {
-        return status;
-    }
-
-    public ArrayList<Seat> getSeats() {
-        return seats;
-    }
-
     //ChinYong Part
     //init the hall's seat from database
     public void initSeatList() throws SQLException {
@@ -202,10 +155,11 @@
         catch (SQLException e) {
             e.printStackTrace();
         }
-        this.setSeats(seats);
+
+        this.seats = seats;
     }
 
-    public void viewSeat_status() {
+    public void viewSeatStatus() {
         boolean error = false;
 
         int largestRow=0;
@@ -251,4 +205,51 @@
         System.out.printf("\nO = Available/intact and undamaged\tX = Unavailable/damaged");
         //return 0;
     }
+
+    // Setter
+    public void setHallID(int hallID) {
+        this.hallID = hallID;
+    }
+
+    public void setHallName(Name hallName) {
+        this.hallName = hallName;
+    }
+
+    public void setHallType(String hallType) {
+        this.hallType = hallType;
+        calHallCapacity();
+    }
+
+    public void setStatus(int status) {
+        this.status = status;
+    }
+
+    public void setSeats(ArrayList<Seat> seats) {
+        this.seats = seats;
+    }
+
+    // Getter
+    public int getHallID(){
+        return hallID;
+    }
+
+    public Name getHallName() {
+        return hallName;
+    }
+
+    public String getHallType() {
+        return hallType;
+    }
+
+    public int getHallCapacity() {
+        return hallCapacity;
+    }
+
+    public int getStatus() {
+        return status;
+    }
+
+    public ArrayList<Seat> getSeats() {
+        return seats;
+    }
 }
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"5ecf6160-812f-4e7a-9181-2318ab0f4334\" name=\"Changes\" comment=\"update the search movie by name\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Driver/SystemClass.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Driver/SystemClass.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\"><![CDATA[{\r\n  \"lastFilter\": {\r\n    \"state\": \"OPEN\"\r\n  }\r\n}]]></component>\r\n  <component name=\"GithubPullRequestsUISettings\">\r\n    <option name=\"selectedUrlAndAccountId\">\r\n      <UrlAndAccount>\r\n        <option name=\"accountId\" value=\"1f9b8559-597a-48c5-b449-57d87711c619\" />\r\n        <option name=\"url\" value=\"https://github.com/dawn012/Java-Assignment.git\" />\r\n      </UrlAndAccount>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2VScJffwsxrMXTAnbRaLkJefcbV\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/zheng/Downloads/Java/Practical 6/Q3&quot;,\r\n    &quot;onboarding.tips.debug.path&quot;: &quot;C:/Users/zheng/Downloads/Cinema Ticketing System/src/main/java/org/example/Main.java&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\zheng\\Downloads\\Java Assignment\\Cinema Ticketing System\\lib\" />\r\n    </key>\r\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\r\n      <recent name=\"Driver\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"5ecf6160-812f-4e7a-9181-2318ab0f4334\" name=\"Changes\" comment=\"\" />\r\n      <created>1694832853776</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1694832853776</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"first\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694833510798</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694833510798</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"first\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694833622697</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694833622697</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"first\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694833797116</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694833797116</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"first\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694834583500</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694834583500</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"first\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694835111036</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694835111036</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"first\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694835116057</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694835116057</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"first\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694835172254</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694835172254</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"first\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694835881955</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694835881955</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"first\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694835979146</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694835979146</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"add the package\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694837709370</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694837709370</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"add the sql\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694837926997</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694837926997</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"add the yong package\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694838189034</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694838189034</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"change the hall package\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694838504476</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694838504476</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"change the SystemClass.java\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694839223323</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694839223323</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"change the directory to package\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694839720991</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694839720991</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"change the directory to package\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694840088620</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694840088620</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"change the sql.txt\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694840174911</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694840174911</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"change the package name\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694842307045</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694842307045</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"change the view schedule\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694845299906</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694845299907</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"change the manage schedule method\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694852855929</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694852855929</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"fix the delete hall bug in manage hall method\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694853138500</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694853138500</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"change the cinema class\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694853437806</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694853437806</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"change the structure\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694860185879</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694860185879</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"update the search movie by name\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1694862946585</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1694862946585</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"25\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"RECENT_FILTERS\">\r\n      <map>\r\n        <entry key=\"User\">\r\n          <value>\r\n            <list>\r\n              <RecentGroup>\r\n                <option name=\"FILTER_VALUES\">\r\n                  <option value=\"*\" />\r\n                </option>\r\n              </RecentGroup>\r\n            </list>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"origin/master\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                  <entry key=\"user\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"*\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"first\" />\r\n    <MESSAGE value=\"add the package\" />\r\n    <MESSAGE value=\"add the sql\" />\r\n    <MESSAGE value=\"add the yong package\" />\r\n    <MESSAGE value=\"change the hall package\" />\r\n    <MESSAGE value=\"change the SystemClass.java\" />\r\n    <MESSAGE value=\"change the directory to package\" />\r\n    <MESSAGE value=\"change the sql.txt\" />\r\n    <MESSAGE value=\"change the package name\" />\r\n    <MESSAGE value=\"change the view schedule\" />\r\n    <MESSAGE value=\"change the manage schedule method\" />\r\n    <MESSAGE value=\"fix the delete hall bug in manage hall method\" />\r\n    <MESSAGE value=\"change the cinema class\" />\r\n    <MESSAGE value=\"change the structure\" />\r\n    <MESSAGE value=\"update the search movie by name\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"update the search movie by name\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/main/java/org/example/Main.java</url>\r\n          <line>15</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision fdc08511edf28627fe2a32c5ef49e4018f777694)
+++ b/.idea/workspace.xml	(date 1694918086586)
@@ -4,9 +4,18 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="5ecf6160-812f-4e7a-9181-2318ab0f4334" name="Changes" comment="update the search movie by name">
+    <list default="true" id="5ecf6160-812f-4e7a-9181-2318ab0f4334" name="Changes" comment="update the search movie by genre">
+      <change afterPath="$PROJECT_DIR$/Report_Management/Report.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Report_Management/TopMovieReport.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Booking_Management/Booking.java" beforeDir="false" afterPath="$PROJECT_DIR$/Booking_Management/Booking.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Driver/SystemClass.java" beforeDir="false" afterPath="$PROJECT_DIR$/Driver/SystemClass.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Hall_Management/Hall.java" beforeDir="false" afterPath="$PROJECT_DIR$/Hall_Management/Hall.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Movie_Management/Movie.java" beforeDir="false" afterPath="$PROJECT_DIR$/Movie_Management/Movie.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Movie_Management/MovieUtils.java" beforeDir="false" afterPath="$PROJECT_DIR$/Movie_Management/MovieUtils.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Schedule_Management/TimeTable.java" beforeDir="false" afterPath="$PROJECT_DIR$/Schedule_Management/TimeTable.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Ticket_Managemnet/Ticket.java" beforeDir="false" afterPath="$PROJECT_DIR$/Ticket_Managemnet/Ticket.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/sql.txt" beforeDir="false" afterPath="$PROJECT_DIR$/sql.txt" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -260,7 +269,15 @@
       <option name="project" value="LOCAL" />
       <updated>1694862946585</updated>
     </task>
-    <option name="localTasksCounter" value="25" />
+    <task id="LOCAL-00025" summary="update the search movie by genre">
+      <option name="closed" value="true" />
+      <created>1694864181130</created>
+      <option name="number" value="00025" />
+      <option name="presentableId" value="LOCAL-00025" />
+      <option name="project" value="LOCAL" />
+      <updated>1694864181130</updated>
+    </task>
+    <option name="localTasksCounter" value="26" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -324,7 +341,8 @@
     <MESSAGE value="change the cinema class" />
     <MESSAGE value="change the structure" />
     <MESSAGE value="update the search movie by name" />
-    <option name="LAST_COMMIT_MESSAGE" value="update the search movie by name" />
+    <MESSAGE value="update the search movie by genre" />
+    <option name="LAST_COMMIT_MESSAGE" value="update the search movie by genre" />
   </component>
   <component name="XDebuggerManager">
     <breakpoint-manager>
Index: Report_Management/TopMovieReport.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Report_Management/TopMovieReport.java b/Report_Management/TopMovieReport.java
new file mode 100644
--- /dev/null	(date 1694918032751)
+++ b/Report_Management/TopMovieReport.java	(date 1694918032751)
@@ -0,0 +1,123 @@
+package Report_Management;
+
+import Booking_Management.Booking;
+import Database.DatabaseUtils;
+import Driver.DateTime;
+import Driver.Name;
+import Genre_Management.Genre;
+import Movie_Management.Movie;
+import Schedule_Management.TimeTable;
+import Ticket_Managemnet.Ticket;
+
+import java.sql.ResultSet;
+import java.sql.SQLException;
+import java.util.ArrayList;
+
+public class TopMovieReport extends Report {
+    public static void main(String[] args) {
+        ArrayList<Movie> movies = new ArrayList<>();
+        ArrayList<TimeTable> schedules = new ArrayList<>();
+        ArrayList<Ticket> tickets = new ArrayList<>();
+        ArrayList<Booking> bookings = new ArrayList<>();
+
+        try {
+            Object[] params = {1};
+            ResultSet result = DatabaseUtils.selectQueryById("*", "movie", "movie_status = ?", params);
+
+            while (result.next()) {
+                Movie movie = new Movie();
+
+                movie.setMovieID(result.getInt("movie_id"));
+                movie.setGenre(new Genre(result.getInt("genre_id")));
+                movie.setMvName(new Name(result.getString("mv_name")));
+                movie.setReleaseDate(new DateTime(result.getDate("release_date").toLocalDate()));
+                movie.setDuration(result.getInt("duration"));
+                movie.setLanguage(result.getString("lang"));
+                movie.setDirector(result.getString("director"));
+                movie.setWritter(result.getString("writter"));
+                movie.setStarring(result.getString("starring"));
+                movie.setMusicProvider(result.getString("music"));
+                movie.setCountry(result.getString("country"));
+                movie.setMetaDescription(result.getString("meta_description"));
+                movie.setBasicTicketPrice(result.getDouble("basic_TicketPrice"));
+                movie.setStatus(result.getInt("movie_status"));
+
+                movies.add(movie);
+            }
+
+            result.close();
+        }
+        catch (SQLException e) {
+            e.printStackTrace();
+        }
+
+        for (int i = 0; i < 1; i++) {
+            try {
+                Object[] params = {7};
+                ResultSet result = DatabaseUtils.selectQueryById("schedule_id", "timeTable", "movie_id = ?", params);
+
+                while (result.next()) {
+                    TimeTable schedule = new TimeTable();
+
+                    schedule.setTimetableID(result.getInt("schedule_id"));
+
+                    schedules.add(schedule);
+                }
+
+                result.close();
+            }
+            catch (SQLException e) {
+                e.printStackTrace();
+            }
+        }
+
+        for (int i = 0; i < schedules.size(); i++) {
+            try {
+                Object[] params = {schedules.get(i).getTimetableID()};  // 1
+                ResultSet result = DatabaseUtils.selectQueryById("DISTINCT booking_id", "ticket", "schedule_id = ?", params);
+
+                while (result.next()) {
+                    Ticket ticket = new Ticket();
+                    Booking booking = new Booking();
+
+                    booking.setBooking_id(result.getInt("booking_id"));
+                    ticket.setBooking(booking);
+
+                    tickets.add(ticket);
+                }
+
+                result.close();
+            }
+            catch (SQLException e) {
+                e.printStackTrace();
+            }
+        }
+
+        for (int i = 0; i < tickets.size(); i++) {
+            try {
+                Object[] params = {tickets.get(i).getBooking().getBooking_id()};
+                ResultSet result = DatabaseUtils.selectQueryById("total_price", "booking", "booking_id = ?", params);
+
+                while (result.next()) {
+                    Booking booking = new Booking();
+
+                    booking.setTotalPrice(result.getDouble("total_price"));
+
+                    bookings.add(booking);
+                }
+
+                result.close();
+            }
+            catch (SQLException e) {
+                e.printStackTrace();
+            }
+        }
+
+        double totalPrice = 0;
+        for (int i = 0; i < bookings.size(); i++) {
+            totalPrice += bookings.get(i).getTotalPrice();
+        }
+
+        System.out.println(totalPrice);
+    }
+}
\ No newline at end of file
Index: Report_Management/Report.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Report_Management/Report.java b/Report_Management/Report.java
new file mode 100644
--- /dev/null	(date 1694876752647)
+++ b/Report_Management/Report.java	(date 1694876752647)
@@ -0,0 +1,7 @@
+package Report_Management;
+
+import Movie_Management.Movie;
+
+public class Report {
+
+}
Index: sql.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>CREATE TABLE `cinema` (\r\n  `cinema_id` int(11) AUTO_INCREMENT NOT NULL,\r\n  `cinema_name` varchar(30) NOT NULL,\r\n  `cinema_address` varchar(80) NOT NULL,\r\n  `cinema_phone` varchar(20) NOT NULL,\r\n  `cinema_status` int(1) NOT NULL DEFAULT 1,\r\n  PRIMARY KEY(cinema_id),\r\n  CONSTRAINT CHK_CINEMA_STATUS CHECK (CINEMA_STATUS IN (0, 1))\r\n);\r\n\r\nINSERT INTO `cinema` (`cinema_id`, `cinema_name`, `cinema_address`, `cinema_phone`, `cinema_status`) VALUES\r\n(1, 'GRC Johor Bahru', '108, JALAN WONG FOOK, 10050 GEORGE TOWN, PENANG', '08-98765432', 1),\r\n(2, 'GRC Penang', '27, JALAN BATU 2, 64000 KUALA LUMPUR, SELANGOR', '08-98965432', 1);\r\n\r\n\r\nCREATE TABLE `hall` (\r\n  `hall_id` int(11) AUTO_INCREMENT NOT NULL,\r\n  `cinema_id` int(11) NOT NULL,\r\n  `hall_name` varchar(255) NOT NULL,\r\n  `hall_type` char(8) NOT NULL,\r\n  `hall_capacity` int(3) NOT NULL,\r\n  `hall_status` int(1) NOT NULL DEFAULT 1,\r\n  PRIMARY KEY(hall_id),\r\n  FOREIGN KEY(cinema_id) REFERENCES cinema(cinema_id),\r\n  CONSTRAINT CHK_TYPE CHECK (UPPER(HALL_TYPE) IN ('3D', 'STANDARD')),\r\n  CONSTRAINT CHK_HALL_STATUS CHECK (HALL_STATUS IN (0, 1))\r\n);\r\n\r\nINSERT INTO `hall` (`hall_id`, `cinema_id`, `hall_name`, `hall_type`, `hall_capacity`, `hall_status`) VALUES\r\n(1, 1, 'Hall 1', 'STANDARD', 64, 1),\r\n(2, 1, 'Hall 2', 'STANDARD', 64, 1),\r\n(3, 1, 'Hall 3', 'STANDARD', 64, 1),\r\n(4, 2, 'Queen', '3D', 32, 1),\r\n(5, 2, 'Queen Bey', 'STANDARD', 64, 1);\r\n\r\n\r\nCREATE TABLE `genre` (\r\n  `genre_id` int(11) AUTO_INCREMENT NOT NULL,\r\n  `genre_name` varchar(255) NOT NULL,\r\n  `post` int(11) NOT NULL,\r\n  `genre_status` int(1) NOT NULL DEFAULT 1,\r\n  PRIMARY KEY(genre_id),\r\n  CONSTRAINT CHK_GENRE_STATUS CHECK (GENRE_STATUS IN (0, 1))\r\n);\r\n\r\nINSERT INTO `genre` (`genre_id`, `genre_name`, `post`, `genre_status`) VALUES\r\n(1, 'Action', 0, 1),\r\n(2, 'Adventure', 0, 1),\r\n(3, 'Animation', 0, 1),\r\n(4, 'Comedy', 0, 1),\r\n(5, 'Crime', 0, 1),\r\n(6, 'Drama', 0, 1),\r\n(7, 'Documentary', 0, 1),\r\n(8, 'Family', 0, 1);\r\n\r\n\r\nCREATE TABLE `movie` (\r\n  `movie_id` int(255) AUTO_INCREMENT NOT NULL,\r\n  `genre_id` int(255) NOT NULL,\r\n  `mv_name` varchar(255) NOT NULL,\r\n  `release_date` date NOT NULL,\r\n  `duration` int NOT NULL,\r\n  `lang` varchar(255) NOT NULL,\r\n  `director` varchar(255) NOT NULL,\r\n  `writter` varchar(255) NOT NULL,\r\n  `starring` varchar(255) NOT NULL,\r\n  `music` varchar(255) NOT NULL,\r\n  `country` varchar(255) NOT NULL,\r\n  `meta_description` varchar(500) NOT NULL,\r\n  `basic_TicketPrice` double(5,2) NOT NULL,\r\n  `movie_status` int(1) NOT NULL DEFAULT 1,\r\n  PRIMARY KEY(movie_id),\r\n  FOREIGN KEY(genre_id) REFERENCES genre(genre_id),\r\n  CONSTRAINT CHK_MOVIE_STATUS CHECK (MOVIE_STATUS IN (0, 1))\r\n);\r\n\r\nINSERT INTO `movie` (`movie_id`, `genre_id`, `mv_name`, `release_date`, `duration`, `lang`, `director`, `writter`, `starring`, `music`, `country`, `meta_description`, `basic_TicketPrice`, `movie_status`) VALUES\r\n(1, 3, 'Suzume', '2023-03-09', '80', 'Japanese', 'Makoto Shinkai', 'Makoto Shinkai', 'Nanoka Hara, Hokuto Matsumura', 'Radwimps, Kazuma Jinnouchi', 'Japan', 'Seventeen-year-old Suzume discovers a mysterious door in the mountains, and soon other doors begin appearing across Japan. As the doors open, they release disasters and destruction, and it’s up to Suzume to close them again.', 13.00, 1),\r\n(2, 3, 'Your Name', '2023-03-22', '107', 'Japanese', 'Makoto Shinkai', 'Makoto Shinkai', 'Ryunosuke Kamiki, Mone Kamishiraishi', 'Radwimps', 'Japan', 'Two teenagers share a profound, magical connection upon discovering they are swapping bodies. Things manage to become even more complicated when the boy and girl decide to meet in person.', 15.00, 1),\r\n(3, 3, 'Spirited Away', '2023-06-13', '125', 'Japanese', 'Hayao Miyazaki', 'Hayao Miyazaki', 'Rumi Hiiragi, Miyu Irino', 'Joe Hisaishi', 'Japan', 'In this animated feature by noted Japanese director Hayao Miyazaki, 10-year-old Chihiro (Rumi Hiiragi) and her parents (Takashi Naitô, Yasuko Sawaguchi) stumble upon a seemingly abandoned amusement park. After her mother and father are turned into giant pigs, Chihiro meets the mysterious Haku (Miyu Irino), who explains that the park is a resort for supernatural beings who need a break from their time spent in the earthly realm, and that she must work there to free herself and her parents.', 13.00, 1),\r\n(4, 3, 'Violet Evergarder', '2023-04-22', '140', 'Japanese', 'Taichi Ishidate', 'Reiko Yoshida', 'Yui Ishikawa, Daisuke Namikawa', 'Evan Call', 'Japan', 'After the aftermath of a war, a young girl who was used as a tool for war learns to properly live. With the scars of burns, she goes back to her past to discover her true feelings towards the Major.', 13.00, 1),\r\n(5, 3, 'Demon Slayer', '2023-02-03', '110', 'Japanese', 'Haruo Sotozaki', 'Ufotable', 'Natsuki Hanae, Akari Kitō', 'Yuki Kajiura, Go Shiina', 'Japan', 'As Tanjiro Kamado, Zenitsu Agatsuma, and Inosuke Hashibira assist the Sound Hashira Tengen Uzui against the sibling demons Gyutaro and Daki, holders of Upper Six of the Twelve Kizuki, they realize that the only way to kill the siblings is to behead them simultaneously.', 13.00, 1),\r\n(6, 6, 'Venom', '2021-09-14', '97', 'English', 'Andy Serkis', 'Tom Hardy, Kelly Marcel', 'Tom Hardy, Michelle Williams', 'Marco Beltrami', 'United States', 'Eddie Brock attempts to reignite his career by interviewing serial killer Cletus Kasady, who becomes the host of the symbiote Carnage and escapes prison after a failed execution.', 13.00, 1),\r\n(7, 3, 'Weathering with You', '2023-03-17', '112', 'Japanese', 'Makoto Shinkai', 'Makoto Shinkai', 'Kotaro Daigo, Nana Mori', 'Radwimps', 'Japan', 'Set during a period of exceptionally rainy weather, high-school boy Hodaka Morishima runs away from his troubled rural home to Tokyo and befriends an orphan girl who can manipulate the weather.', 13.00, 1),\r\n(8, 3, 'The Tunnel To Summer', '2023-02-27', '83', 'Japanese', 'Tomohisa Taguchi', 'Tomohisa Taguchi', 'Marie Iitoyo, Oji Suzuka', 'Harumi Fuuki', 'Japan', 'One summer morning before school, Kaoru hears an unsettling rumor—of a mysterious tunnel that can grant any wish to those who enter it, but ages them dramatically in exchange. At first, he writes it off as nothing more than an urban legend, but that very night, he happens upon the selfsame passage: the Urashima Tunnel.', 13.00, 1),\r\n(9, 3, 'Anthem of the Heart', '2023-04-01', '119', 'Japanese', 'Tatsuyuki Nagai', 'Tatsuyuki Nagai', 'Inori Minase, Kōki Uchiyama', 'Mito, Masaru Yokoyama', 'Japan', 'A girl who carries the guilt of breaking up her family with carelessly uttered words when she was young is suddenly cursed by a mysterious Egg Fairy so that she can never hurt anybody with her words again.', 13.00, 1),\r\n(10, 3, 'A Silent Voice', '2023-10-26', '130', 'Japanese', 'Naoko Yamada', 'Yoshitoki Ōima', 'Miyu Irino, Saori Hayami', 'Kensuke Ushio', 'Japan', 'When a grade school student with impaired hearing is bullied mercilessly, she transfers to another school. Years later, one of her former tormentors sets out to make amends.', 13.00, 1);\r\n\r\nCREATE TABLE `timeTable` (\r\n  `schedule_id` int(255) AUTO_INCREMENT NOT NULL,\r\n  `hall_id` int(11) NOT NULL,\r\n  `movie_id` int(11) NOT NULL,\r\n  `movie_showDate` Date NOT NULL,\r\n  `movie_startTime` Time NOT NULL,\r\n  `movie_endTime` Time NOT NULL,\r\n  `timeTable_status` int(1) NOT NULL DEFAULT 1,\r\n  PRIMARY KEY(schedule_id),\r\n  FOREIGN KEY(hall_id) REFERENCES hall(hall_id),\r\n  FOREIGN KEY(movie_id) REFERENCES movie(movie_id),\r\n  CONSTRAINT CHK_TIMETABLE_STATUS CHECK (TIMETABLE_STATUS IN (0, 1))\r\n);\r\n\r\nINSERT INTO `timeTable` (`schedule_id`, `hall_id`, `movie_id`, `movie_showDate`, `movie_startTime`, `movie_endTime`, `timeTable_status`) VALUES\r\n(1, 2, 7, '2023-03-17', '11:00:00', '12:55:00', 1),\r\n(2, 3, 2, '2023-03-22', '11:00:00', '12:50:00', 1),\r\n(3, 1, 4, '2023-04-22', '11:00:00', '13:20:00', 1),\r\n(4, 3, 9, '2023-06-13', '13:00:00', '15:00:00', 1),\r\n(5, 1, 6, '2021-09-14', '13:00:00', '14:40:00', 1),\r\n(6, 2, 9, '2023-06-15', '17:00:00', '19:00:00', 1),\r\n(7, 3, 2, '2023-03-25', '17:00:00', '18:50:00', 1),\r\n(8, 1, 3, '2023-06-17', '12:55:00', '15:00:00', 1),\r\n(9, 2, 8, '2023-03-03', '13:30:00', '14:25:00', 1),\r\n(10, 3, 4, '2023-04-25', '13:30:00', '15:50:00', 1),\r\n(11, 1, 2, '2023-03-25', '11:00:00', '12:50:00', 1),\r\n(12, 1, 3, '2023-06-17', '17:05:00', '19:30:00', 1),\r\n(13, 1, 5, '2023-02-07', '17:10:00', '19:00:00', 1),\r\n(14, 2, 1, '2023-03-15', '17:00:00', '18:20:00', 1),\r\n(15, 3, 10, '2023-10-29', '13:00:00', '15:10:00', 1),\r\n(16, 2, 8, '2023-10-17', '13:30:00', '14:25:00', 1),\r\n(17, 3, 10, '2023-10-30', '11:00:00', '13:10:00', 1),\r\n(18, 2, 10, '2023-09-02', '11:00:00', '13:10:00', 1),\r\n(19, 5, 10, '2023-12-05', '15:15:00', '17:25:00', 1),\r\n(20, 5, 10, '2023-09-11', '13:15:00', '15:25:00', 1),\r\n(21, 5, 10, '2023-09-12', '13:15:00', '15:25:00', 1),\r\n(22, 5, 10, '2023-09-14', '13:15:00', '15:25:00', 1);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nCREATE TABLE `seat` (\r\n  `seat_id` varchar(3) NOT NULL,\r\n  `hall_id` int(11) NOT NULL,\r\n  `seatrow` int(1) DEFAULT NULL,\r\n  `seatcol` int(1) DEFAULT NULL,\r\n  `seat_status` int(1) NOT NULL DEFAULT 1,\r\n  PRIMARY KEY(`seat_id`,`hall_id`),\r\n  FOREIGN KEY(hall_id) REFERENCES hall(hall_id)\r\n);\r\n\r\nINSERT INTO `seat` (`seat_id`, `hall_id`, `seatrow`, `seatcol`, `seat_status`) VALUES\r\n('1A1', 1, 1, 1, 1),\r\n('1A2', 1, 1, 2, 1),\r\n('1A3', 1, 1, 3, 1),\r\n('1A4', 1, 1, 4, 1),\r\n('1A5', 1, 1, 5, 1),\r\n('1A6', 1, 1, 6, 1),\r\n('1A7', 1, 1, 7, 1),\r\n('1A8', 1, 1, 8, 0),\r\n('1B1', 1, 2, 1, 1),\r\n('1B2', 1, 2, 2, 1),\r\n('1B3', 1, 2, 3, 1),\r\n('1B4', 1, 2, 4, 1),\r\n('1B5', 1, 2, 5, 1),\r\n('1B6', 1, 2, 6, 1),\r\n('1B7', 1, 2, 7, 1),\r\n('1B8', 1, 2, 8, 1),\r\n('1C1', 1, 3, 1, 1),\r\n('1C2', 1, 3, 2, 1),\r\n('1C3', 1, 3, 3, 1),\r\n('1C4', 1, 3, 4, 1),\r\n('1C5', 1, 3, 5, 1),\r\n('1C6', 1, 3, 6, 1),\r\n('1C7', 1, 3, 7, 1),\r\n('1C8', 1, 3, 8, 0),\r\n('1D1', 1, 4, 1, 1),\r\n('1D2', 1, 4, 2, 1),\r\n('1D3', 1, 4, 3, 1),\r\n('1D4', 1, 4, 4, 1),\r\n('1D5', 1, 4, 5, 1),\r\n('1D6', 1, 4, 6, 1),\r\n('1D7', 1, 4, 7, 1),\r\n('1D8', 1, 4, 8, 1),\r\n('1E1', 1, 5, 1, 1),\r\n('1E2', 1, 5, 2, 1),\r\n('1E3', 1, 5, 3, 1),\r\n('1E4', 1, 5, 4, 1),\r\n('1E5', 1, 5, 5, 1),\r\n('1E6', 1, 5, 6, 1),\r\n('1E7', 1, 5, 7, 1),\r\n('1E8', 1, 5, 8, 1),\r\n('1F1', 1, 6, 1, 1),\r\n('1F2', 1, 6, 2, 1),\r\n('1F3', 1, 6, 3, 1),\r\n('1F4', 1, 6, 4, 1),\r\n('1F5', 1, 6, 5, 1),\r\n('1F6', 1, 6, 6, 1),\r\n('1F7', 1, 6, 7, 1),\r\n('1F8', 1, 6, 8, 1),\r\n('1G1', 1, 7, 1, 1),\r\n('1G2', 1, 7, 2, 1),\r\n('1G3', 1, 7, 3, 1),\r\n('1G4', 1, 7, 4, 1),\r\n('1G5', 1, 7, 5, 1),\r\n('1G6', 1, 7, 6, 1),\r\n('1G7', 1, 7, 7, 1),\r\n('1G8', 1, 7, 8, 1),\r\n('1H1', 1, 8, 1, 1),\r\n('1H2', 1, 8, 2, 1),\r\n('1H3', 1, 8, 3, 1),\r\n('1H4', 1, 8, 4, 1),\r\n('1H5', 1, 8, 5, 1),\r\n('1H6', 1, 8, 6, 1),\r\n('1H7', 1, 8, 7, 1),\r\n('1H8', 1, 8, 8, 1),\r\n('2A1', 2, 1, 1, 1),\r\n('2A2', 2, 1, 2, 1),\r\n('2A3', 2, 1, 3, 1),\r\n('2A4', 2, 1, 4, 1),\r\n('2A5', 2, 1, 5, 1),\r\n('2A6', 2, 1, 6, 1),\r\n('2A7', 2, 1, 7, 1),\r\n('2A8', 2, 1, 8, 1),\r\n('2B1', 2, 2, 1, 1),\r\n('2B2', 2, 2, 2, 1),\r\n('2B3', 2, 2, 3, 1),\r\n('2B4', 2, 2, 4, 1),\r\n('2B5', 2, 2, 5, 1),\r\n('2B6', 2, 2, 6, 1),\r\n('2B7', 2, 2, 7, 1),\r\n('2B8', 2, 2, 8, 1),\r\n('2C1', 2, 3, 1, 1),\r\n('2C2', 2, 3, 2, 1),\r\n('2C3', 2, 3, 3, 1),\r\n('2C4', 2, 3, 4, 1),\r\n('2C5', 2, 3, 5, 1),\r\n('2C6', 2, 3, 6, 1),\r\n('2C7', 2, 3, 7, 1),\r\n('2C8', 2, 3, 8, 1),\r\n('2D1', 2, 4, 1, 1),\r\n('2D2', 2, 4, 2, 1),\r\n('2D3', 2, 4, 3, 1),\r\n('2D4', 2, 4, 4, 1),\r\n('2D5', 2, 4, 5, 1),\r\n('2D6', 2, 4, 6, 1),\r\n('2D7', 2, 4, 7, 1),\r\n('2D8', 2, 4, 8, 1),\r\n('2E1', 2, 5, 1, 1),\r\n('2E2', 2, 5, 2, 1),\r\n('2E3', 2, 5, 3, 1),\r\n('2E4', 2, 5, 4, 1),\r\n('2E5', 2, 5, 5, 1),\r\n('2E6', 2, 5, 6, 1),\r\n('2E7', 2, 5, 7, 1),\r\n('2E8', 2, 5, 8, 1),\r\n('2F1', 2, 6, 1, 1),\r\n('2F2', 2, 6, 2, 1),\r\n('2F3', 2, 6, 3, 1),\r\n('2F4', 2, 6, 4, 1),\r\n('2F5', 2, 6, 5, 1),\r\n('2F6', 2, 6, 6, 1),\r\n('2F7', 2, 6, 7, 1),\r\n('2F8', 2, 6, 8, 1),\r\n('2G1', 2, 7, 1, 1),\r\n('2G2', 2, 7, 2, 1),\r\n('2G3', 2, 7, 3, 1),\r\n('2G4', 2, 7, 4, 1),\r\n('2G5', 2, 7, 5, 1),\r\n('2G6', 2, 7, 6, 1),\r\n('2G7', 2, 7, 7, 1),\r\n('2G8', 2, 7, 8, 1),\r\n('2H1', 2, 8, 1, 1),\r\n('2H2', 2, 8, 2, 1),\r\n('2H3', 2, 8, 3, 1),\r\n('2H4', 2, 8, 4, 1),\r\n('2H5', 2, 8, 5, 1),\r\n('2H6', 2, 8, 6, 1),\r\n('2H7', 2, 8, 7, 1),\r\n('2H8', 2, 8, 8, 1),\r\n('3A1', 3, 1, 1, 1),\r\n('3A2', 3, 1, 2, 1),\r\n('3A3', 3, 1, 3, 1),\r\n('3A4', 3, 1, 4, 1),\r\n('3A5', 3, 1, 5, 1),\r\n('3A6', 3, 1, 6, 1),\r\n('3A7', 3, 1, 7, 1),\r\n('3A8', 3, 1, 8, 1),\r\n('3B1', 3, 2, 1, 1),\r\n('3B2', 3, 2, 2, 1),\r\n('3B3', 3, 2, 3, 1),\r\n('3B4', 3, 2, 4, 1),\r\n('3B5', 3, 2, 5, 1),\r\n('3B6', 3, 2, 6, 1),\r\n('3B7', 3, 2, 7, 1),\r\n('3B8', 3, 2, 8, 1),\r\n('3C1', 3, 3, 1, 1),\r\n('3C2', 3, 3, 2, 1),\r\n('3C3', 3, 3, 3, 1),\r\n('3C4', 3, 3, 4, 1),\r\n('3C5', 3, 3, 5, 1),\r\n('3C6', 3, 3, 6, 1),\r\n('3C7', 3, 3, 7, 1),\r\n('3C8', 3, 3, 8, 1),\r\n('3D1', 3, 4, 1, 1),\r\n('3D2', 3, 4, 2, 1),\r\n('3D3', 3, 4, 3, 1),\r\n('3D4', 3, 4, 4, 1),\r\n('3D5', 3, 4, 5, 1),\r\n('3D6', 3, 4, 6, 1),\r\n('3D7', 3, 4, 7, 1),\r\n('3D8', 3, 4, 8, 1),\r\n('3E1', 3, 5, 1, 1),\r\n('3E2', 3, 5, 2, 1),\r\n('3E3', 3, 5, 3, 1),\r\n('3E4', 3, 5, 4, 1),\r\n('3E5', 3, 5, 5, 1),\r\n('3E6', 3, 5, 6, 1),\r\n('3E7', 3, 5, 7, 1),\r\n('3E8', 3, 5, 8, 1),\r\n('3F1', 3, 6, 1, 1),\r\n('3F2', 3, 6, 2, 1),\r\n('3F3', 3, 6, 3, 1),\r\n('3F4', 3, 6, 4, 1),\r\n('3F5', 3, 6, 5, 1),\r\n('3F6', 3, 6, 6, 1),\r\n('3F7', 3, 6, 7, 1),\r\n('3F8', 3, 6, 8, 1),\r\n('3G1', 3, 7, 1, 1),\r\n('3G2', 3, 7, 2, 1),\r\n('3G3', 3, 7, 3, 1),\r\n('3G4', 3, 7, 4, 1),\r\n('3G5', 3, 7, 5, 1),\r\n('3G6', 3, 7, 6, 1),\r\n('3G7', 3, 7, 7, 1),\r\n('3G8', 3, 7, 8, 1),\r\n('3H1', 3, 8, 1, 1),\r\n('3H2', 3, 8, 2, 1),\r\n('3H3', 3, 8, 3, 1),\r\n('3H4', 3, 8, 4, 1),\r\n('3H5', 3, 8, 5, 1),\r\n('3H6', 3, 8, 6, 1),\r\n('3H7', 3, 8, 7, 1),\r\n('3H8', 3, 8, 8, 1),\r\n('4A1', 4, 1, 1, 1),\r\n('4A2', 4, 1, 2, 1),\r\n('4A3', 4, 1, 3, 1),\r\n('4A4', 4, 1, 4, 1),\r\n('4A5', 4, 1, 5, 1),\r\n('4A6', 4, 1, 6, 1),\r\n('4A7', 4, 1, 7, 1),\r\n('4A8', 4, 1, 8, 1),\r\n('4B1', 4, 2, 1, 1),\r\n('4B2', 4, 2, 2, 1),\r\n('4B3', 4, 2, 3, 1),\r\n('4B4', 4, 2, 4, 1),\r\n('4B5', 4, 2, 5, 1),\r\n('4B6', 4, 2, 6, 1),\r\n('4B7', 4, 2, 7, 1),\r\n('4B8', 4, 2, 8, 1),\r\n('4C1', 4, 3, 1, 1),\r\n('4C2', 4, 3, 2, 1),\r\n('4C3', 4, 3, 3, 1),\r\n('4C4', 4, 3, 4, 1),\r\n('4C5', 4, 3, 5, 1),\r\n('4C6', 4, 3, 6, 1),\r\n('4C7', 4, 3, 7, 1),\r\n('4C8', 4, 3, 8, 1),\r\n('4D1', 4, 4, 1, 1),\r\n('4D2', 4, 4, 2, 1),\r\n('4D3', 4, 4, 3, 1),\r\n('4D4', 4, 4, 4, 1),\r\n('4D5', 4, 4, 5, 1),\r\n('4D6', 4, 4, 6, 1),\r\n('4D7', 4, 4, 7, 1),\r\n('4D8', 4, 4, 8, 1),\r\n('5A1', 5, 1, 1, 1),\r\n('5A2', 5, 1, 2, 1),\r\n('5A3', 5, 1, 3, 1),\r\n('5A4', 5, 1, 4, 1),\r\n('5A5', 5, 1, 5, 1),\r\n('5A6', 5, 1, 6, 1),\r\n('5A7', 5, 1, 7, 1),\r\n('5A8', 5, 1, 8, 1),\r\n('5B1', 5, 2, 1, 1),\r\n('5B2', 5, 2, 2, 1),\r\n('5B3', 5, 2, 3, 1),\r\n('5B4', 5, 2, 4, 1),\r\n('5B5', 5, 2, 5, 1),\r\n('5B6', 5, 2, 6, 1),\r\n('5B7', 5, 2, 7, 1),\r\n('5B8', 5, 2, 8, 1),\r\n('5C1', 5, 3, 1, 1),\r\n('5C2', 5, 3, 2, 1),\r\n('5C3', 5, 3, 3, 1),\r\n('5C4', 5, 3, 4, 1),\r\n('5C5', 5, 3, 5, 1),\r\n('5C6', 5, 3, 6, 1),\r\n('5C7', 5, 3, 7, 1),\r\n('5C8', 5, 3, 8, 1),\r\n('5D1', 5, 4, 1, 1),\r\n('5D2', 5, 4, 2, 1),\r\n('5D3', 5, 4, 3, 1),\r\n('5D4', 5, 4, 4, 1),\r\n('5D5', 5, 4, 5, 1),\r\n('5D6', 5, 4, 6, 1),\r\n('5D7', 5, 4, 7, 1),\r\n('5D8', 5, 4, 8, 1),\r\n('5E1', 5, 5, 1, 1),\r\n('5E2', 5, 5, 2, 1),\r\n('5E3', 5, 5, 3, 1),\r\n('5E4', 5, 5, 4, 1),\r\n('5E5', 5, 5, 5, 1),\r\n('5E6', 5, 5, 6, 1),\r\n('5E7', 5, 5, 7, 1),\r\n('5E8', 5, 5, 8, 1),\r\n('5F1', 5, 6, 1, 1),\r\n('5F2', 5, 6, 2, 1),\r\n('5F3', 5, 6, 3, 1),\r\n('5F4', 5, 6, 4, 1),\r\n('5F5', 5, 6, 5, 1),\r\n('5F6', 5, 6, 6, 1),\r\n('5F7', 5, 6, 7, 1),\r\n('5F8', 5, 6, 8, 1),\r\n('5G1', 5, 7, 1, 1),\r\n('5G2', 5, 7, 2, 1),\r\n('5G3', 5, 7, 3, 1),\r\n('5G4', 5, 7, 4, 1),\r\n('5G5', 5, 7, 5, 1),\r\n('5G6', 5, 7, 6, 1),\r\n('5G7', 5, 7, 7, 1),\r\n('5G8', 5, 7, 8, 1),\r\n('5H1', 5, 8, 1, 1),\r\n('5H2', 5, 8, 2, 1),\r\n('5H3', 5, 8, 3, 1),\r\n('5H4', 5, 8, 4, 1),\r\n('5H5', 5, 8, 5, 1),\r\n('5H6', 5, 8, 6, 1),\r\n('5H7', 5, 8, 7, 1),\r\n('5H8', 5, 8, 8, 1);\r\n\r\nCREATE TABLE `booking` (\r\n  `booking_id` int(11) NOT NULL,\r\n  `adultTicket_qty` int(11) DEFAULT NULL,\r\n  `childTicket_qty` int(11) DEFAULT NULL,\r\n  `total_price` decimal(11,2) DEFAULT NULL,\r\n  `booking_date` date DEFAULT NULL,\r\n  `booking_time` time DEFAULT NULL,\r\n  `booking_status` int(1) DEFAULT NULL,\r\n  `customer_id` int(11) DEFAULT NULL\r\n);\r\nALTER TABLE `booking` ADD PRIMARY KEY (`booking_id`);\r\n\r\ncreate table ticket(\r\n\tticket_id int(11),\r\n    booking_id int(11),\r\n    seat_id varchar(3),\r\n    schedule_id int(255),\r\n    ticket_type varchar(25),\r\n    price_rate decimal(11,2),\r\n    ticket_status int(11) NOT NULL DEFAULT 1,\r\n    primary key(ticket_id),\r\n\tFOREIGN KEY(seat_id) REFERENCES seat(seat_id),\r\n\tFOREIGN KEY(schedule_id) REFERENCES timetable(schedule_id)\r\n);\r\nALTER TABLE ticket\r\nADD FOREIGN KEY (booking_id) REFERENCES booking(booking_id);
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/sql.txt b/sql.txt
--- a/sql.txt	(revision fdc08511edf28627fe2a32c5ef49e4018f777694)
+++ b/sql.txt	(date 1694875952489)
@@ -452,7 +452,7 @@
 ALTER TABLE `booking` ADD PRIMARY KEY (`booking_id`);
 
 create table ticket(
-	ticket_id int(11),
+    ticket_id int(11),
     booking_id int(11),
     seat_id varchar(3),
     schedule_id int(255),
@@ -460,8 +460,8 @@
     price_rate decimal(11,2),
     ticket_status int(11) NOT NULL DEFAULT 1,
     primary key(ticket_id),
-	FOREIGN KEY(seat_id) REFERENCES seat(seat_id),
-	FOREIGN KEY(schedule_id) REFERENCES timetable(schedule_id)
+    FOREIGN KEY(seat_id) REFERENCES seat(seat_id),
+    FOREIGN KEY(schedule_id) REFERENCES timetable(schedule_id)
 );
 ALTER TABLE ticket
 ADD FOREIGN KEY (booking_id) REFERENCES booking(booking_id);
\ No newline at end of file
